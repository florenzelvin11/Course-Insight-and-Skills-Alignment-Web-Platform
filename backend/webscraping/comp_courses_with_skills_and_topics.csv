Course Code,Course Name,Type,Course Description,Course Aims,Course Outcomes,Course Schedule,Course General Schedule,Year,Term,Date Scraped,Combined Course Information,Skills,Knowledge,topics
COMP1010,The Art of Computing,undergraduate,"This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding.","This course aims to provide a grounding in programming and computational thinking for any undergraduate interested in learning these essential skills. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium.
The course is a purely elective course, intended to be available as a General Education course for non-CSE students.
Topics: computer systems, computational problem solving, spreadsheets, programming in Python.","Course Learning Outcomes
CLO1 : Use a spreadsheet for simple data management tasks.
Course Learning Outcomes
CLO2 : Write Python programs to solve simple computational problems.
Course Learning Outcomes
CLO3 : Solve problems via computer systems.
Course Learning Outcomes
CLO4 : Build simple human-centered interfaces to computers.","App examples based on student questions
CSS
Python: Testing
Course Intro
Python: I/O, data types, conditionals, loops
Flexibility Week
Python: Revision videos
Full Stack: Cookies, Serialization
Full Stack: Flask, PyHTML
Python: modules and libraries (datetime and random)
Full Stack: APIs
HTML
Full Stack: Flask, PyHTML
Project Release
Python: nested structures, setting up VsCode (tutes), Git
Python: extras
Python: more loops, functions, collections",,2023.0,T3,2023-10-23 22:55:56,"This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding. This course aims to provide a grounding in programming and computational thinking for any undergraduate interested in learning these essential skills. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium.
The course is a purely elective course, intended to be available as a General Education course for non-CSE students.
Topics: computer systems, computational problem solving, spreadsheets, programming in Python. Course Learning Outcomes
CLO1 : Use a spreadsheet for simple data management tasks.
Course Learning Outcomes
CLO2 : Write Python programs to solve simple computational problems.
Course Learning Outcomes
CLO3 : Solve problems via computer systems.
Course Learning Outcomes
CLO4 : Build simple human-centered interfaces to computers. App examples based on student questions
CSS
Python: Testing
Course Intro
Python: I/O, data types, conditionals, loops
Flexibility Week
Python: Revision videos
Full Stack: Cookies, Serialization
Full Stack: Flask, PyHTML
Python: modules and libraries (datetime and random)
Full Stack: APIs
HTML
Full Stack: Flask, PyHTML
Project Release
Python: nested structures, setting up VsCode (tutes), Git
Python: extras
Python: more loops, functions, collections ","{'problem solving': 18, 'resilience': 27, 'critical thinking': 18, 'spreadsheets': 9, 'adaptability': 9, 'time management': 9, 'social networking': 9}","{'HTML': 14, 'git': 14, 'flask': 14, 'python': 14, 'modules': 14, 'libraries': 14, 'computer system': 14}","['programming in Python', 'computational problem solving', 'spreadsheets', 'computer systems']"
COMP1511,Programming Fundamentals,undergraduate,"From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming concepts
Introduction to Computer Science
The C programming language and use of a C compiler
Programming style
Program design and organisation concepts
Program testing and debugging","The importance of this course lies in its role as the foundation of your programming journey, providing essential knowledge and skills vital for your success in the field. By focusing on proficiency in the high-level programming language C and fostering problem-solving abilities, this course equips you with the fundamental tools and mindset necessary to think like a programmer.
As the first course in the program, it plays a crucial role in setting the stage for your future learning. It serves as a prerequisite for many of the core courses, ensuring that all students begin with a solid understanding of the fundamental concepts required to progress further. By establishing a common knowledge base and skills, this course ensures that everyone starts on an equal footing and can effectively tackle more advanced topics.
This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer.","Course Learning Outcomes
CLO1 : Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically
Course Learning Outcomes
CLO2 : Review the produced code against specification criteria by applying testing techniques
Course Learning Outcomes
CLO3 : Apply basic data structures, such as arrays and linked lists, to solve complex problems
Course Learning Outcomes
CLO4 : Read and understand coding solutions.","2D Arrays
Arrays
Arrays
Pointers
Basic control flow
Variables
Control Flow
Control Flow and Variables
Course Revision
Course intro
UNIX + Tools
What is a program
Custom Data Types
Dynamic arrays
Memory
Exam details
Exam practice (past exam questions)
Extra Content (Non-Examinable)
Flexibility Week, NO LECTURE, NO Tutorials, NO Labs
Functions
Functions
Arrays
Strings
Lecture Program 1: Arrays
Lecture Program 2: Linked Lists
Linked Lists
Malloc and start of Linked Lists
Memory (heap vs stack)
Basic linked list
Memory allocation
Pointers
Procedures
Functions
Revision of course content
Setting up your environment

Basic Input/Output
Static Arrays
Strings
Variables/Constants
Welcome
What is programming?","General Schedule Information
Schedule information will be clearly communicated elsewhere.",2023.0,T3,2023-10-23 22:59:47,"From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming concepts
Introduction to Computer Science
The C programming language and use of a C compiler
Programming style
Program design and organisation concepts
Program testing and debugging The importance of this course lies in its role as the foundation of your programming journey, providing essential knowledge and skills vital for your success in the field. By focusing on proficiency in the high-level programming language C and fostering problem-solving abilities, this course equips you with the fundamental tools and mindset necessary to think like a programmer.
As the first course in the program, it plays a crucial role in setting the stage for your future learning. It serves as a prerequisite for many of the core courses, ensuring that all students begin with a solid understanding of the fundamental concepts required to progress further. By establishing a common knowledge base and skills, this course ensures that everyone starts on an equal footing and can effectively tackle more advanced topics.
This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer. Course Learning Outcomes
CLO1 : Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically
Course Learning Outcomes
CLO2 : Review the produced code against specification criteria by applying testing techniques
Course Learning Outcomes
CLO3 : Apply basic data structures, such as arrays and linked lists, to solve complex problems
Course Learning Outcomes
CLO4 : Read and understand coding solutions. 2D Arrays
Arrays
Arrays
Pointers
Basic control flow
Variables
Control Flow
Control Flow and Variables
Course Revision
Course intro
UNIX + Tools
What is a program
Custom Data Types
Dynamic arrays
Memory
Exam details
Exam practice (past exam questions)
Extra Content (Non-Examinable)
Flexibility Week, NO LECTURE, NO Tutorials, NO Labs
Functions
Functions
Arrays
Strings
Lecture Program 1: Arrays
Lecture Program 2: Linked Lists
Linked Lists
Malloc and start of Linked Lists
Memory (heap vs stack)
Basic linked list
Memory allocation
Pointers
Procedures
Functions
Revision of course content
Setting up your environment

Basic Input/Output
Static Arrays
Strings
Variables/Constants
Welcome
What is programming? General Schedule Information
Schedule information will be clearly communicated elsewhere.","{'operate': 9, 'problem solving': 18, 'communication': 27, 'adaptability': 18, 'critical thinking': 9, 'resilience': 18}","{'level high': 6, 'robotics': 6, 'general programming': 6, 'translate': 6, 'unix': 6, 'programming language': 6, 'flow control': 6, 'compiler c': 6, 'genome': 6, 'programming concept': 6, 'mechanics': 6, 'programs computer': 6, 'design program': 6, 'computer system': 6, 'list link': 6, 'arrays': 6}","['Malloc and start of Linked Lists', 'VariablesConstants', 'Control Flow', 'Static Arrays', 'Pointers', 'Memory', 'What is a program', 'Memory allocation', 'Arrays', 'Basic linked list', 'Control Flow and Variables', '2D Arrays', 'Strings', 'Variables', 'Program 1 Arrays', 'Procedures', 'Linked Lists', 'What is programming', 'Setting up your environment', 'Memory heap vs stack', 'Dynamic arrays', 'Basic InputOutput', 'UNIX + Tools', 'Program 2 Linked Lists', 'Functions', 'Basic control flow', 'Custom Data Types']"
COMP1521,Computer Systems Fundamentals,undergraduate,"This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems.","Provide a programmer's view on how a computer system executes programs, manipulates data and communicates
Enable students to become effective programmers in dealing with issues of performance, portability, and robustness
Serve as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required","Course Learning Outcomes
CLO1 : Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards
Course Learning Outcomes
CLO2 : Describe the principles of memory management and explain the workings of a system with virtual memory management
Course Learning Outcomes
CLO3 : Explain how the major components of a CPU work together, including how data and instructions are represented in a computer
Course Learning Outcomes
CLO4 : Design, implement, and analyse small programs at the assembly/machine level
Course Learning Outcomes
CLO5 : Describe the relationship between a high-level procedural language (C) and assembly (machine language) which implements it, including how a compiled program is executed in a classical von Neumann machine
Course Learning Outcomes
CLO6 : Describe the components comprising, and the services offered by, an operating system
Course Learning Outcomes
CLO7 : Implement simple programs involving communication and concurrency","Bit manipulations; Integer representations
C revision
IEEE-754; UTF-8
MIPS assembly programming
concurrency, parallelism, threads
course intro; MIPS assembly programming
file metadata; file systems
manipulating files, metadata, and directories
using threads in C",,2023.0,T3,2023-10-23 23:04:17,"This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems. Provide a programmer's view on how a computer system executes programs, manipulates data and communicates
Enable students to become effective programmers in dealing with issues of performance, portability, and robustness
Serve as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required Course Learning Outcomes
CLO1 : Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards
Course Learning Outcomes
CLO2 : Describe the principles of memory management and explain the workings of a system with virtual memory management
Course Learning Outcomes
CLO3 : Explain how the major components of a CPU work together, including how data and instructions are represented in a computer
Course Learning Outcomes
CLO4 : Design, implement, and analyse small programs at the assembly/machine level
Course Learning Outcomes
CLO5 : Describe the relationship between a high-level procedural language (C) and assembly (machine language) which implements it, including how a compiled program is executed in a classical von Neumann machine
Course Learning Outcomes
CLO6 : Describe the components comprising, and the services offered by, an operating system
Course Learning Outcomes
CLO7 : Implement simple programs involving communication and concurrency Bit manipulations; Integer representations
C revision
IEEE-754; UTF-8
MIPS assembly programming
concurrency, parallelism, threads
course intro; MIPS assembly programming
file metadata; file systems
manipulating files, metadata, and directories
using threads in C ","{'communication': 29, 'problem solving': 14, 'leadership': 14, 'adaptability': 14, 'time management': 14, 'reading': 14}","{'programs executes': 6, 'level high': 6, 'IEEE': 6, 'networks architecture systems': 6, 'assembly language': 6, 'level high language': 6, 'virtual memory': 6, 'issues systems': 6, 'system file': 6, 'architecture operating': 6, 'programming file': 6, 'computer system': 6, 'programs procedural': 6, 'operating system': 6, 'electronic component': 6, 'compilers': 6}","['file metadata file systems', 'using threads in C', 'manipulating files metadata and directories', 'Bit manipulations Integer representations', 'concurrency parallelism threads', 'MIPS assembly programming']"
COMP1531,Software Engineering Fundamentals,undergraduate,"This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.
You will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a web-based application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.","This course aims to provide the students with a strong foundation in the fundamental principles and practices of software engineering that will prepare them for the advanced software engineering workshops. As such, a broad range of key software engineering topics will be taught and reinforced through a group project, that will enable students to apply the theoretical concepts acquired to solve a practical software engineering problem. An agile software delivery style has been chosen for the implementation of the group project, to make students familiar with modern agile development methodologies.","Course Learning Outcomes
CLO1 : Demonstrate effective use of software development tools to build full-stack end-user applications
Course Learning Outcomes
CLO2 : Demonstrate effective use of static testing, dynamic testing, and user testing to validate and verify software systems
Course Learning Outcomes
CLO3 : Understand key characteristics of a functioning team in terms of understanding professional expectations, maintaining healthy relationships, and managing conflict.
Course Learning Outcomes
CLO4 : Demonstrate an ability to analyse complex software systems in terms of their data model, state model, and more.
Course Learning Outcomes
CLO5 : Understand the software engineering life cycle in the context of modern and iterative software development practices in order to elicit requirements, design systems thoughtfully, and implement software correctly.
Course Learning Outcomes
CLO6 : Demonstrate an understanding of how to use version control, continuous integration, and deployment tooling to sustainably integrate code from multiple parties","Advanced Functions
HTTP Servers
Auth
Software Complexity
Git - Undo
Code Coverage
Conceptual Modelling
Deployment
Course Overview
Git - Solo Usage
Git - Team Usage
Javascript
Data Interchange
Continuous Integration
Static Verification
Linting
Individual Project Iteration
(Bonus) Web Front-end
(Bonus) Building an MVP
Iteration 3
Introduction
Use Cases, User Stories
Validation
Package Management
Mutli-file & Importing
Dynamic Verification
Working as a team
Persistence
Iteration 2
Exceptions
Designing for Maintainability
Term Break (Flex Week)",,2023.0,T3,2023-10-23 23:08:07,"This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.
You will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a web-based application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses. This course aims to provide the students with a strong foundation in the fundamental principles and practices of software engineering that will prepare them for the advanced software engineering workshops. As such, a broad range of key software engineering topics will be taught and reinforced through a group project, that will enable students to apply the theoretical concepts acquired to solve a practical software engineering problem. An agile software delivery style has been chosen for the implementation of the group project, to make students familiar with modern agile development methodologies. Course Learning Outcomes
CLO1 : Demonstrate effective use of software development tools to build full-stack end-user applications
Course Learning Outcomes
CLO2 : Demonstrate effective use of static testing, dynamic testing, and user testing to validate and verify software systems
Course Learning Outcomes
CLO3 : Understand key characteristics of a functioning team in terms of understanding professional expectations, maintaining healthy relationships, and managing conflict.
Course Learning Outcomes
CLO4 : Demonstrate an ability to analyse complex software systems in terms of their data model, state model, and more.
Course Learning Outcomes
CLO5 : Understand the software engineering life cycle in the context of modern and iterative software development practices in order to elicit requirements, design systems thoughtfully, and implement software correctly.
Course Learning Outcomes
CLO6 : Demonstrate an understanding of how to use version control, continuous integration, and deployment tooling to sustainably integrate code from multiple parties Advanced Functions
HTTP Servers
Auth
Software Complexity
Git - Undo
Code Coverage
Conceptual Modelling
Deployment
Course Overview
Git - Solo Usage
Git - Team Usage
Javascript
Data Interchange
Continuous Integration
Static Verification
Linting
Individual Project Iteration
(Bonus) Web Front-end
(Bonus) Building an MVP
Iteration 3
Introduction
Use Cases, User Stories
Validation
Package Management
Mutli-file & Importing
Dynamic Verification
Working as a team
Persistence
Iteration 2
Exceptions
Designing for Maintainability
Term Break (Flex Week) ","{'resilience': 15, 'teamwork': 8, 'communication': 15, 'problem solving': 8, 'adaptability': 15, 'critical thinking': 8, 'time management': 8, 'reading': 8, 'social networking': 8, 'mobile device abilities': 8}","{'coverage code': 5, 'cycle life': 5, 'practices software': 5, 'elicit requirements': 5, 'design build': 5, 'validate': 5, 'end front': 5, 'methodologies development': 5, 'model data': 5, 'design systems': 5, 'methodologies software': 5, 'git': 5, 'software agile': 5, 'software system': 5, 'servers http': 5, 'user story': 5, 'development software': 5, 'javascript': 5, 'model conceptual': 5}","['Advanced Functions', 'Git  Solo Usage', 'Software Complexity', 'Package Management', 'Bonus Building an MVP', 'Exceptions', 'Continuous Integration', 'Validation', 'Git  Team Usage', 'Static Verification', 'Javascript', 'Dynamic Verification', 'Persistence', 'Designing for Maintainability', 'Linting', 'Use Cases User Stories', 'Conceptual Modelling', 'Auth', 'Data Interchange', 'Deployment', 'Bonus Web Frontend', 'Mutlifile  Importing', 'Git  Undo', 'Code Coverage', 'HTTP Servers']"
COMP2511,Object-Oriented Design and Programming,undergraduate,"COMP2511 builds on the foundation of first-year CSE courses, and begins to answer the questions: ""What does good software look like?"" and ""How do you build software that is flexible, reusable and maintainable"". The course introduces students to the Object-Oriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and real-world problems. The course also teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software in mind.","This course aims to introduce students to the foundational principles of designing software that is flexible, reusable and maintainable. Students are exposed to the Object-Oriented Programming paradigm and explore how OOP attempts to solve the problem of good software design, while learning of other paradigms such as the functional paradigm. Students explore fundamental Design Patterns in writing and testing of software and their role in architecture of software, applying these solutions to both theoretical and real-world problems. The course teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software systems in mind.
The course comes at a mid-point in the program, after foundational programming courses and before applying design principles to build large software systems.","Course Learning Outcomes
CLO1 : Develop an appreciation for elegantly written software, and how to create and maintain well-designed systems
Course Learning Outcomes
CLO2 : Understand different design paradigms and methodologies, their background and application
Course Learning Outcomes
CLO3 : Apply the principles of Object-Oriented Design to solve problems
Course Learning Outcomes
CLO4 : Apply widely used Design Patterns to create extensible designs
Course Learning Outcomes
CLO5 : Create medium-scale systems from scratch, and work on existing systems as part of the Software Development Life Cycle
Course Learning Outcomes
CLO6 : Work with an enterprise programming language and IDE
Course Learning Outcomes
CLO7 : Explore the human factors at play in Software Design and Engineering; including ambiguity, the unknown, and trade-offs","Course Introduction
Introduction to Java
The Object-Oriented Paradigm
Creational Patterns
Generic Programming
Decorator Pattern
Encapsulation
Inheritance & Polymorphism
Abstract Classes & Interfaces
Domain Modelling
Design by Contract
Event Driven Design
Iterator Pattern
Template Pattern
Adapter Pattern
Builder Pattern
Exceptions
Generics & Collections
JUnit Testing
Design Principles
Flexibility Week
Guest Lecture
Introduction to Microservice Architecture
Course Wrap-Up
Observer Pattern
Refactoring
Composite Pattern
Test Design
Refactoring
The Functional Paradigm
Introduction to Design Patterns
Strategy Pattern
State Pattern
Visitor Pattern
Risk Engineering
Design Patterns Summary",,2023.0,T3,2023-10-23 23:11:57,"COMP2511 builds on the foundation of first-year CSE courses, and begins to answer the questions: ""What does good software look like?"" and ""How do you build software that is flexible, reusable and maintainable"". The course introduces students to the Object-Oriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and real-world problems. The course also teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software in mind. This course aims to introduce students to the foundational principles of designing software that is flexible, reusable and maintainable. Students are exposed to the Object-Oriented Programming paradigm and explore how OOP attempts to solve the problem of good software design, while learning of other paradigms such as the functional paradigm. Students explore fundamental Design Patterns in writing and testing of software and their role in architecture of software, applying these solutions to both theoretical and real-world problems. The course teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software systems in mind.
The course comes at a mid-point in the program, after foundational programming courses and before applying design principles to build large software systems. Course Learning Outcomes
CLO1 : Develop an appreciation for elegantly written software, and how to create and maintain well-designed systems
Course Learning Outcomes
CLO2 : Understand different design paradigms and methodologies, their background and application
Course Learning Outcomes
CLO3 : Apply the principles of Object-Oriented Design to solve problems
Course Learning Outcomes
CLO4 : Apply widely used Design Patterns to create extensible designs
Course Learning Outcomes
CLO5 : Create medium-scale systems from scratch, and work on existing systems as part of the Software Development Life Cycle
Course Learning Outcomes
CLO6 : Work with an enterprise programming language and IDE
Course Learning Outcomes
CLO7 : Explore the human factors at play in Software Design and Engineering; including ambiguity, the unknown, and trade-offs Course Introduction
Introduction to Java
The Object-Oriented Paradigm
Creational Patterns
Generic Programming
Decorator Pattern
Encapsulation
Inheritance & Polymorphism
Abstract Classes & Interfaces
Domain Modelling
Design by Contract
Event Driven Design
Iterator Pattern
Template Pattern
Adapter Pattern
Builder Pattern
Exceptions
Generics & Collections
JUnit Testing
Design Principles
Flexibility Week
Guest Lecture
Introduction to Microservice Architecture
Course Wrap-Up
Observer Pattern
Refactoring
Composite Pattern
Test Design
Refactoring
The Functional Paradigm
Introduction to Design Patterns
Strategy Pattern
State Pattern
Visitor Pattern
Risk Engineering
Design Patterns Summary ","{'problem solving': 29, 'critical thinking': 43, 'communication': 14, 'adaptability': 14}","{'polymorphism': 4, 'pattern composite': 4, 'orient programming object': 4, 'design software': 4, 'programming language': 4, 'design iterator': 4, 'pattern observer': 4, 'java': 4, 'model domain': 4, 'OOP': 4, 'oriented object': 4, 'pattern iterator': 4, 'IDE': 4, 'builder pattern': 4, 'maintainable': 4, 'pattern visitor': 4, 'microservice': 4, 'software system': 4, 'generic programming': 4, 'class abstract': 4, 'cycle development software life': 4, 'junit': 4, 'development software': 4, 'orient design object': 4, 'event driven': 4, 'designed systems': 4}","['Builder Pattern', 'Exceptions', 'Risk Engineering', 'Decorator Pattern', 'Template Pattern', 'Refactoring', 'Design by Contract', 'Design Principles', 'Design Patterns Summary', 'Observer Pattern', 'State Pattern', 'Generic Programming', 'Inheritance  Polymorphism', 'Composite Pattern', 'JUnit Testing', 'Domain Modelling', 'Creational Patterns', 'Adapter Pattern', 'Abstract Classes  Interfaces', 'Iterator Pattern', 'Guest', 'Visitor Pattern', 'Encapsulation', 'Strategy Pattern', 'Test Design', 'The Functional Paradigm', 'Event Driven Design', 'The ObjectOriented Paradigm', 'Generics  Collections']"
COMP2521,Data Structures and Algorithms,undergraduate,"The aim of this course is to get you to think like a computer scientist . This certainly sounds like a noble goal... but what does it really mean? How does a scientist , let alone a computer scientist, actually think?
What many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.
Computer scientists don't, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also, unlike other scientists, computer scientists frequently build the objects that they study.
The goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.
Topics
This course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:
Recursion
Analysis of algorithms
Abstract data types
Binary search trees
Balanced search trees
Graphs
Sorting algorithms
Heaps
Hashing
Tries","During this course, we'll be looking at ways of creating, analysing and understanding software. Ultimately, you should be able to answer the question, ""is this piece of software any good?"" and be able to provide sound reasons to justify your answer.
This course follows on from introductory C programming courses: COMP1511, COMP1917, or COMP1921. We cover additional aspects of the C programming language that were not covered in those courses, and also look at some programming tools which were not covered (in detail) earlier. However, this course is not simply a second C programming course: the focus is on the ideas and abstractions behind the data structures and algorithms that are used.
COMP2521 is a critical course in the study of computing at UNSW, since it deals with many concepts that are central to future studies in the area. Whether you are studying Computer Science, Software Engineering, Bioinformatics, Computer Engineering, or even a discipline outside the realm of computing, understanding a range of algorithms and data structures and how to use them will make you a much more effective computing problem solver in the future.","Course Learning Outcomes
CLO1 : Describe and analyse fundamental data structures and algorithms
Course Learning Outcomes
CLO2 : Analyse the performance characteristics of algorithms
Course Learning Outcomes
CLO3 : Measure the performance behaviour of programs
Course Learning Outcomes
CLO4 : Choose/develop an appropriate data structure for a given problem
Course Learning Outcomes
CLO5 : Choose/develop appropriate algorithms to manipulate chosen data structures
Course Learning Outcomes
CLO6 : Reason about the effectiveness of data structures and algorithms for solving a given problem
Course Learning Outcomes
CLO7 : Package a set of data structures and algorithms as an abstract data type
Course Learning Outcomes
CLO8 : Develop and maintain software systems in C that contain thousands of lines of code","Abstract data types, binary search trees
Arrays and linked list revision
Binary search trees
Binary search trees (continued), graph basics
Course introduction, recursion, analysis of algorithms
Dijkstra's algorithm, minimum spanning trees
Directed/weighted graphs, Dijkstra's algorithm, minimum spanning trees
Graph basics
Graph traversal
Graph traversal, graph problems
Hash tables
Hash tables, priority queues and heaps
Minimum spanning trees
No content
Pointers and linked list revision
Quiz 1: Course outline
Quiz 2: Recursion, analysis of algorithms
Quiz 3: Sorting algorithms
Quiz 4: Abstract data types, binary search trees
Quiz 5: Binary search trees, graph basics
Quiz 6: Graph traversal, graph problems
Quiz 7: Directed/weighted graphs, Dijkstra's algorithm, minimum spanning trees
Quiz 8: Hash tables, priority queues and heaps, tries
Read the course outline
Recursion
Sorting algorithms
Tries, problem solving with data structures and algorithms",,2023.0,T3,2023-10-23 23:15:48,"The aim of this course is to get you to think like a computer scientist . This certainly sounds like a noble goal... but what does it really mean? How does a scientist , let alone a computer scientist, actually think?
What many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.
Computer scientists don't, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also, unlike other scientists, computer scientists frequently build the objects that they study.
The goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.
Topics
This course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:
Recursion
Analysis of algorithms
Abstract data types
Binary search trees
Balanced search trees
Graphs
Sorting algorithms
Heaps
Hashing
Tries During this course, we'll be looking at ways of creating, analysing and understanding software. Ultimately, you should be able to answer the question, ""is this piece of software any good?"" and be able to provide sound reasons to justify your answer.
This course follows on from introductory C programming courses: COMP1511, COMP1917, or COMP1921. We cover additional aspects of the C programming language that were not covered in those courses, and also look at some programming tools which were not covered (in detail) earlier. However, this course is not simply a second C programming course: the focus is on the ideas and abstractions behind the data structures and algorithms that are used.
COMP2521 is a critical course in the study of computing at UNSW, since it deals with many concepts that are central to future studies in the area. Whether you are studying Computer Science, Software Engineering, Bioinformatics, Computer Engineering, or even a discipline outside the realm of computing, understanding a range of algorithms and data structures and how to use them will make you a much more effective computing problem solver in the future. Course Learning Outcomes
CLO1 : Describe and analyse fundamental data structures and algorithms
Course Learning Outcomes
CLO2 : Analyse the performance characteristics of algorithms
Course Learning Outcomes
CLO3 : Measure the performance behaviour of programs
Course Learning Outcomes
CLO4 : Choose/develop an appropriate data structure for a given problem
Course Learning Outcomes
CLO5 : Choose/develop appropriate algorithms to manipulate chosen data structures
Course Learning Outcomes
CLO6 : Reason about the effectiveness of data structures and algorithms for solving a given problem
Course Learning Outcomes
CLO7 : Package a set of data structures and algorithms as an abstract data type
Course Learning Outcomes
CLO8 : Develop and maintain software systems in C that contain thousands of lines of code Abstract data types, binary search trees
Arrays and linked list revision
Binary search trees
Binary search trees (continued), graph basics
Course introduction, recursion, analysis of algorithms
Dijkstra's algorithm, minimum spanning trees
Directed/weighted graphs, Dijkstra's algorithm, minimum spanning trees
Graph basics
Graph traversal
Graph traversal, graph problems
Hash tables
Hash tables, priority queues and heaps
Minimum spanning trees
No content
Pointers and linked list revision
Quiz 1: Course outline
Quiz 2: Recursion, analysis of algorithms
Quiz 3: Sorting algorithms
Quiz 4: Abstract data types, binary search trees
Quiz 5: Binary search trees, graph basics
Quiz 6: Graph traversal, graph problems
Quiz 7: Directed/weighted graphs, Dijkstra's algorithm, minimum spanning trees
Quiz 8: Hash tables, priority queues and heaps, tries
Read the course outline
Recursion
Sorting algorithms
Tries, problem solving with data structures and algorithms ","{'problem solving': 25, 'operate': 12, 'communication': 12, 'adaptability': 12, 'resilience': 25, 'social networking': 12}","{'future study': 7, 'bioinformatics': 7, 'binary search tree': 7, 'programming tool': 7, 'type abstract': 7, 'queue priority': 7, 'graphs': 7, 'programming language': 7, 'algorithms': 7, 'sorting algorithms': 7, 'software system': 7, 'list link': 7, 'graph d': 7, 'computer engineering': 7}","['Tries problem solving with data structures and algorithms', 'Binary search trees', 'Abstract data types binary search trees', 'Sorting algorithms', 'Graph traversal graph problems', 'Graph traversal', 'Arrays and linked list revision', 'Binary search trees continued graph basics', 'Minimum spanning trees', 'Directedweighted graphs Dijkstras algorithm minimum spanning trees', 'Dijkstras algorithm minimum spanning trees', 'Graph basics', 'Hash tables', 'Pointers and linked list revision', 'Hash tables priority queues and heaps', 'Recursion']"
COMP3121,Algorithms and Programming Techniques,undergraduate,"Students will learn a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc). This will include famous algorithms using these ideas in graph problems, string matching, etc, but more importantly how to apply these ideas to develop correct and efficient algorithms to solve new problems. Students will develop their abilities in problem solving and analysis of algorithms, as well as in written communication as they express and argue for their ideas.
There is also an extended Algorithms course COMP3821/9801 which runs only in T1 each year. We recommend that top students take the extended course instead of this one. Extended Algorithms moves at a faster pace and covers more topics and some topics in more depth. It assumes higher autonomy from students and offers a few different perspectives on problem solving.",,"Course Learning Outcomes
CLO1 : Design new algorithms for solving new problems, using various design techniques (greedy, dynamic programming, divide and conquer, etc)
Course Learning Outcomes
CLO2 : Estimate efficiency of algorithms and justify their correctness
Course Learning Outcomes
CLO3 : Demonstrate improved problem solving skills",,"General Schedule Information
Week 1: introduction, preliminaries
Week 2: divide and conquer
Week 3: the greedy method
Week 4: the greedy method
Week 5: flow networks
Week 6: --- flexi week---
Week 7: dynamic programming
Week 8: dynamic programming
Week 9: string matching, linear programming
Week 10: intractability",2023.0,T3,2023-10-23 23:20:18,"Students will learn a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc). This will include famous algorithms using these ideas in graph problems, string matching, etc, but more importantly how to apply these ideas to develop correct and efficient algorithms to solve new problems. Students will develop their abilities in problem solving and analysis of algorithms, as well as in written communication as they express and argue for their ideas.
There is also an extended Algorithms course COMP3821/9801 which runs only in T1 each year. We recommend that top students take the extended course instead of this one. Extended Algorithms moves at a faster pace and covers more topics and some topics in more depth. It assumes higher autonomy from students and offers a few different perspectives on problem solving.  Course Learning Outcomes
CLO1 : Design new algorithms for solving new problems, using various design techniques (greedy, dynamic programming, divide and conquer, etc)
Course Learning Outcomes
CLO2 : Estimate efficiency of algorithms and justify their correctness
Course Learning Outcomes
CLO3 : Demonstrate improved problem solving skills  General Schedule Information
Week 1: introduction, preliminaries
Week 2: divide and conquer
Week 3: the greedy method
Week 4: the greedy method
Week 5: flow networks
Week 6: --- flexi week---
Week 7: dynamic programming
Week 8: dynamic programming
Week 9: string matching, linear programming
Week 10: intractability","{'problem solving': 33, 'communication': 33, 'social networking': 33}","{'dynamic programming': 17, 'graph': 17, 'linear programming': 17, 'algorithms': 17, 'conquer divide': 17, 'design algorithm': 17}","['flow networks', 'divide and conquer', 'the greedy method', 'intractability', 'dynamic programming', 'string matching linear programming']"
COMP3161,Concepts of Programming Languages,undergraduate,"This course discusses and relates a range of programming language concepts and paradigms, including imperative, object-oriented, functional, concurrent & parallel programming. It covers the theoretical foundations (syntax, operational, axiomatic and denotational semantics) as well as practical development and implementation aspects (dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency). Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed.","This course aims to impart the core concepts and principles of programming language design. The course will improve students' appreciation of why programming languages are the way they are, how programming language features can be designed to guarantee desirable properties, and how programming languages are defined mathematically and implemented practically. The practical and theoretical skills in this course can deepen your understanding of what you're doing as a programmer, and make current trends in programming language design intelligible; it also provides essential skills for anyone looking to develop their own programming language, or get into programming language research.","Course Learning Outcomes
CLO1 : Distinguish superficial (i.e., syntactic) from fundamental (i.e., semantic) differences of programming languages
Course Learning Outcomes
CLO2 : Read, write and reason about programs in various programming language paradigms, including imperative, object-oriented, functional and concurrent programming
Course Learning Outcomes
CLO3 : Use the basic tools of language design and analysis, including formal languages and formal descriptions of static and dynamic semantics
Course Learning Outcomes
CLO4 : Use modern language features, such as dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency features","Abstract Data Types, Overloading and Subtyping
Abstract Machines, Environments
Concurrency, Revision
Flexibility Week
Imperative Programming, MinHS
Intro, Haskell, Induction
Natural Deduction, Rule Induction, Syntax
Nothing
Operational Semantics, Lambda Calculus
Polymorphism, Type Inference
Properties, Type safety, Type theory","General Schedule Information
This schedule is tentative and may evolve as the course progresses.",2023.0,T3,2023-10-23 23:24:08,"This course discusses and relates a range of programming language concepts and paradigms, including imperative, object-oriented, functional, concurrent & parallel programming. It covers the theoretical foundations (syntax, operational, axiomatic and denotational semantics) as well as practical development and implementation aspects (dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency). Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed. This course aims to impart the core concepts and principles of programming language design. The course will improve students' appreciation of why programming languages are the way they are, how programming language features can be designed to guarantee desirable properties, and how programming languages are defined mathematically and implemented practically. The practical and theoretical skills in this course can deepen your understanding of what you're doing as a programmer, and make current trends in programming language design intelligible; it also provides essential skills for anyone looking to develop their own programming language, or get into programming language research. Course Learning Outcomes
CLO1 : Distinguish superficial (i.e., syntactic) from fundamental (i.e., semantic) differences of programming languages
Course Learning Outcomes
CLO2 : Read, write and reason about programs in various programming language paradigms, including imperative, object-oriented, functional and concurrent programming
Course Learning Outcomes
CLO3 : Use the basic tools of language design and analysis, including formal languages and formal descriptions of static and dynamic semantics
Course Learning Outcomes
CLO4 : Use modern language features, such as dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency features Abstract Data Types, Overloading and Subtyping
Abstract Machines, Environments
Concurrency, Revision
Flexibility Week
Imperative Programming, MinHS
Intro, Haskell, Induction
Natural Deduction, Rule Induction, Syntax
Nothing
Operational Semantics, Lambda Calculus
Polymorphism, Type Inference
Properties, Type safety, Type theory General Schedule Information
This schedule is tentative and may evolve as the course progresses.","{'resilience': 33, 'reading': 33, 'critical thinking': 11, 'problem solving': 11, 'time management': 11}","{'polymorphism': 12, 'programming language': 12, 'oriented object': 12, 'lambda calculus': 12, 'semantics': 12, 'haskell': 12, 'axiomatic': 12, 'formal language': 12}","['Natural Deduction Rule Induction Syntax', 'Abstract Machines Environments', 'Operational Semantics Lambda Calculus', 'Polymorphism Type Inference', 'Imperative Programming MinHS', 'Intro Haskell Induction', 'Properties Type safety Type theory', 'Abstract Data Types Overloading and Subtyping']"
COMP3222,Digital Circuits and Systems,undergraduate,"This course teaches students the fundamentals of digital design.
The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.
 ","This course aims to provide students with a knowledge of designing and implementing simple digital logic circuits & systems. The basic building blocks of combinational and sequential circuits are introduced to enable students to develop circuit solutions to problems and to understand the design and operation of hardware models of digital systems. Students are introduced to the VHDL hardware description language as a means of describing circuits. Computer-aided design tools are used to specify, simulate and implement a variety of simple digital systems. Students learn how to implement and test their designs using Field-Programmmable Gate Arrays.
As an introductory course, a principal aim is to prepare students for more advanced study in follow-on courses.","Course Learning Outcomes
CLO1 : Design and implement combinational and synchronous sequential logic circuits
Course Learning Outcomes
CLO2 : Analyse combinational and sequential digital logic circuits
Course Learning Outcomes
CLO3 : Describe hardware functions using a hardware description language
Course Learning Outcomes
CLO4 : Make use of CAD tools to specify, simulate and synthesize circuit designs
Course Learning Outcomes
CLO5 : Perform the steps involved in digital circuit implementation using Field-Programmable Gate Arrays","Blackjack player 
Implementation technology; Ch 3
Combinational circuit blocks; Ch 6
Counters
Course wrap-up
Digital system design (continued); Ch 10
Digital system design; Ch 10
Finite State Machines
Finite State Machines (continued)
Flexibility week
Flip-flops, Registers & Counters; Ch 7.1-7.16
Fortnightly quiz on material of Weeks 1 & 2
Fortnightly quiz on material of Weeks 1 - 4
Fortnightly quiz on material of Weeks 1 - 5
Fortnightly quiz on material of Weeks 1 - 8
Implementing Algorithms in Hardware
Implementing Algorithms in Hardware (continued)
Introduction & simplifying circuits; Ch 1 & 2
Optimizing logic functions; Ch 4.1-4.7 & 4.12
Introduction to Quartus II v13.0
Latches, Flip-flops, and Registers
Number representation & arithmetic circuits; Ch 5.1-5.5
Numbers and Displays
Simple Processor
Switches, Lights, and Multiplexers
Synchronous sequential circuits; Ch 8.1-8.9","General Schedule Information
Students are encouraged to attend lectures and expected to attend labs each week to seek assistance with their lab work.
Like most courses at UNSW, your results in the course will reflect the amount of effort you invest in your learning. As a guide, an allocation of 15 total hours of attendance and private study per week for a 6 UoC course such as COMP3222 should see you doing well. You will need to adjust this general advice to meet your own objectives and needs.
Please consult the lecturer or the lab demonstrators if you would like advice on the course.",2023.0,T3,2023-10-23 23:27:58,"This course teaches students the fundamentals of digital design.
The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.
  This course aims to provide students with a knowledge of designing and implementing simple digital logic circuits & systems. The basic building blocks of combinational and sequential circuits are introduced to enable students to develop circuit solutions to problems and to understand the design and operation of hardware models of digital systems. Students are introduced to the VHDL hardware description language as a means of describing circuits. Computer-aided design tools are used to specify, simulate and implement a variety of simple digital systems. Students learn how to implement and test their designs using Field-Programmmable Gate Arrays.
As an introductory course, a principal aim is to prepare students for more advanced study in follow-on courses. Course Learning Outcomes
CLO1 : Design and implement combinational and synchronous sequential logic circuits
Course Learning Outcomes
CLO2 : Analyse combinational and sequential digital logic circuits
Course Learning Outcomes
CLO3 : Describe hardware functions using a hardware description language
Course Learning Outcomes
CLO4 : Make use of CAD tools to specify, simulate and synthesize circuit designs
Course Learning Outcomes
CLO5 : Perform the steps involved in digital circuit implementation using Field-Programmable Gate Arrays Blackjack player 
Implementation technology; Ch 3
Combinational circuit blocks; Ch 6
Counters
Course wrap-up
Digital system design (continued); Ch 10
Digital system design; Ch 10
Finite State Machines
Finite State Machines (continued)
Flexibility week
Flip-flops, Registers & Counters; Ch 7.1-7.16
Fortnightly quiz on material of Weeks 1 & 2
Fortnightly quiz on material of Weeks 1 - 4
Fortnightly quiz on material of Weeks 1 - 5
Fortnightly quiz on material of Weeks 1 - 8
Implementing Algorithms in Hardware
Implementing Algorithms in Hardware (continued)
Introduction & simplifying circuits; Ch 1 & 2
Optimizing logic functions; Ch 4.1-4.7 & 4.12
Introduction to Quartus II v13.0
Latches, Flip-flops, and Registers
Number representation & arithmetic circuits; Ch 5.1-5.5
Numbers and Displays
Simple Processor
Switches, Lights, and Multiplexers
Synchronous sequential circuits; Ch 8.1-8.9 General Schedule Information
Students are encouraged to attend lectures and expected to attend labs each week to seek assistance with their lab work.
Like most courses at UNSW, your results in the course will reflect the amount of effort you invest in your learning. As a guide, an allocation of 15 total hours of attendance and private study per week for a 6 UoC course such as COMP3222 should see you doing well. You will need to adjust this general advice to meet your own objectives and needs.
Please consult the lecturer or the lab demonstrators if you would like advice on the course.","{'numbers': 14, 'communication': 14, 'problem solving': 14, 'critical thinking': 29, 'time management': 14, 'reading': 14}","{'tool design': 7, 'design circuit': 7, 'arithmetic': 7, 'digital logic': 7, 'multiplexers': 7, 'aid design computer': 7, 'algorithms': 7, 'counters': 7, 'FPGA': 7, 'array gate programmable field': 7, 'VHDL': 7, 'digital system': 7, 'simulate': 7, 'courses course': 7, 'gate array': 7}","['Finite State Machines continued', 'Implementing Algorithms in Hardware', 'Latches Flipflops and Registers', 'Finite State Machines', 'Implementing Algorithms in Hardware continued', 'Blackjack player', 'Simple Processor', 'Switches Lights and Multiplexers', 'Numbers and Displays', 'Counters']"
COMP3311,Database Systems,undergraduate,"This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.
Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such as COMP9312 Graph Data Analytics, and COMP9315 Database Systems Implementation. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.
By the end of this course, we want you to be capable of building high-quality (correct and efficient) applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally.","This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research.","Course Learning Outcomes
CLO1 : develop accurate, non-redundant data models
Course Learning Outcomes
CLO2 : realise data models as relational database schemas
Course Learning Outcomes
CLO3 : Formulate queries via the full range of SQL constructs
Course Learning Outcomes
CLO4 : Write stored procedures and triggers to extend DBMS capabilities
Course Learning Outcomes
CLO5 : Write applications in Python that interact effectively with databases
Course Learning Outcomes
CLO6 : Analyse performance issues in relational database applications
Course Learning Outcomes
CLO7 : Understand the overall architecture of relational DBMSs
Course Learning Outcomes
CLO8 : Understand the concepts behind transactions and concurrency control;",,"General Schedule Information
Lecture: Course intro, Data Modelling, ER diagrams 
Tutorial: none
Prac Work: Set up PostgreSQL server, SQLite
Lecture: Relational Model, SQL DDL, Mapping ER to SQL
Tutorial: Data modelling, ER
Prac Work: Defining a database
Quiz #1
Lecture: SQL queries
Tutorial: ER -> SQL
Prac Work: SQL queries
Assignments: Ass1 released
Quiz #2
Lecture: PLpgSQL
Tutorial: SQL
Prac Work: Stored functions
Quiz #3
Lecture: Triggers, Aggregates
Tutorial: Stored functions
Prac Work: Aggregates
Assignments: Ass1 due (fri)
Flexibility Week ... no lectures, no tutorials
Lecture: DB/PL interaction, Python, Psycopg2
Tutorial: Triggers
Prac Work: Python meets SQL
Assignments: Ass 2 released
Quiz #4
Lecture: Functional dependencies, normalization
Tutorial: Psycopg2
Quiz #5
Lecture: Relational Algebra, Query Execution
Tutorial: Normalization
Assignments: Ass 2 due (fri)
Transactions, Concurrency, Database Futures, Course Review
Tutorial: Relational Algebra
Prac work: Sample exam
Quiz #6",2023.0,T3,2023-10-23 23:31:47,"This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.
Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such as COMP9312 Graph Data Analytics, and COMP9315 Database Systems Implementation. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.
By the end of this course, we want you to be capable of building high-quality (correct and efficient) applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally. This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research. Course Learning Outcomes
CLO1 : develop accurate, non-redundant data models
Course Learning Outcomes
CLO2 : realise data models as relational database schemas
Course Learning Outcomes
CLO3 : Formulate queries via the full range of SQL constructs
Course Learning Outcomes
CLO4 : Write stored procedures and triggers to extend DBMS capabilities
Course Learning Outcomes
CLO5 : Write applications in Python that interact effectively with databases
Course Learning Outcomes
CLO6 : Analyse performance issues in relational database applications
Course Learning Outcomes
CLO7 : Understand the overall architecture of relational DBMSs
Course Learning Outcomes
CLO8 : Understand the concepts behind transactions and concurrency control;  General Schedule Information
Lecture: Course intro, Data Modelling, ER diagrams 
Tutorial: none
Prac Work: Set up PostgreSQL server, SQLite
Lecture: Relational Model, SQL DDL, Mapping ER to SQL
Tutorial: Data modelling, ER
Prac Work: Defining a database
Quiz #1
Lecture: SQL queries
Tutorial: ER -> SQL
Prac Work: SQL queries
Assignments: Ass1 released
Quiz #2
Lecture: PLpgSQL
Tutorial: SQL
Prac Work: Stored functions
Quiz #3
Lecture: Triggers, Aggregates
Tutorial: Stored functions
Prac Work: Aggregates
Assignments: Ass1 due (fri)
Flexibility Week ... no lectures, no tutorials
Lecture: DB/PL interaction, Python, Psycopg2
Tutorial: Triggers
Prac Work: Python meets SQL
Assignments: Ass 2 released
Quiz #4
Lecture: Functional dependencies, normalization
Tutorial: Psycopg2
Quiz #5
Lecture: Relational Algebra, Query Execution
Tutorial: Normalization
Assignments: Ass 2 due (fri)
Transactions, Concurrency, Database Futures, Course Review
Tutorial: Relational Algebra
Prac work: Sample exam
Quiz #6","{'resilience': 14, 'time management': 29, 'critical thinking': 14, 'communication': 29, 'teamwork': 14}","{'python': 7, 'data compression': 7, 'procedure store': 7, 'analytics': 7, 'database system': 7, 'database developing': 7, 'database application': 7, 'redundant data': 7, 'graph': 7, 'control concurrency': 7, 'functional dependency': 7, 'information retrieval': 7, 'diagram er': 7, 'web search': 7, 'models data': 7}","['SQL queries', 'Relational Algebra Query Execution', 'DBPL interaction Python Psycopg2', 'Triggers Aggregates', 'Aggregates', 'Relational Model SQL DDL Mapping ER to SQL', 'Functional dependencies normalization', 'Set up PostgreSQL server SQLite', 'Stored functions', 'Defining a database', 'PLpgSQL', 'Transactions Concurrency Database Futures Course Review', 'Python meets SQL']"
COMP3331,Computer Networks and Applications,undergraduate,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course.","To provide an in-depth introduction to the key topics in the field of computer networks, including the Internet.
To get a hands-on understanding of the working of network protocols.
To gain expertise in network programming, designing and implementing network protocols, evaluating network performance and problem-solving skills.
To build the necessary foundational knowledge required in subsequent networking courses (COMP4335-4337, COMP6733, COMP9332-9337).","Course Learning Outcomes
CLO1 : Understand the current architecture of the Internet and the entities involved in its operations
Course Learning Outcomes
CLO2 : Demonstrate soundness of, or identify potential flaws in, proposed protocols
Course Learning Outcomes
CLO3 : Design networked applications and protocols, and implement them in C, Java or Python
Course Learning Outcomes
CLO4 : Analyse and evaluate the performance of computer networks
Course Learning Outcomes
CLO5 : Capture and analyse network traffic
Course Learning Outcomes
CLO6 : Understand and explain security and ethical issues in computer networking","Application Layer:
Content Distribution Networks
Socket Programming
Transport Layer: 
Transport services
Multiplexing & Demultiplexing
UDP
Application Layer:
Principles of networked applications
The Web & HTTP
Email
Domain Name Service (DNS)
Peer-to-Peer Networks and DHT
Assignment Due: 10 Nov
Assignment Specs Released (Expected)
Course Logistics 
Introduction:
What is the Internet?
Network edge and core
Performance of networks
Introduction:
Layering and Encapsulation
Course prepration (Optional)
Lab 1
Lab 1 submission deadline: 10:00 Monday 25 September
Lab 2
Lab 2 submission deadline: 10:00 Monday 2 October
Lab 3 
Lab 3 submission deadline: 10:00 Monday 09 October
Lab 4
Lab 4 submission deadline: 10:00 Monday 30 Oct
Lab 5 
Lab 5 submission deadline: 10:00 Monday 6 November
Lab 6 
Lab 6 submission deadline: 10:00 Monday 13 November
Link Layer:
Multiple Access Protocols
Link-Layer Addressing and ARP
Ethernet
Switches
Wireless Networks
Wireless Characteristics
802.11
CSMA/CA
A day in the life of a web request 

Network Security
Basic Cryptography
Message integrity & Digital signatures
Authentication
Mid-term exam will take place on the 23 Oct, hence no in-person lecture on that day 
Mid-term exam will be using the Inspera online platform, which you will get access to from a link in the course Moodle site. The exam times will be announced well in advance. The mid-term exam will be on-line, un-invigilated, and you can sit for the exam from a place of your choice. More information for students about Inspera can be found here:https://unsw.sharepoint.com/sites/Assessment-Platform-Pilot .
Network Layer, Control Plane:
Link State and Distance Vector
Hierarchical routing
ICMP
Link Layer:
Error detection
Network Layer, Data Plane:
NAT
IPv6
Network Layer, Control Plane:
Routing algorithms
Network Layer, Data Plane:
Overview
IP
IP Addressing
No lecture, No Lab, No Submission
Self-Study of Lab resources and tools 
(no submission and no marks)
Transport Layer:
Connection management & flow control
Congestion control
Fairness
Transport Layer:
Principles of reliable data delivery
Pipelined Protocols
TCP
Tutorial 1
Tutorial 2","General Schedule Information
The following table lists the tentative weekly schedule. Students will be informed of any changes during the lecture and by announcements on the notices page. 
 ",2023.0,T3,2023-10-23 23:36:16,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course. To provide an in-depth introduction to the key topics in the field of computer networks, including the Internet.
To get a hands-on understanding of the working of network protocols.
To gain expertise in network programming, designing and implementing network protocols, evaluating network performance and problem-solving skills.
To build the necessary foundational knowledge required in subsequent networking courses (COMP4335-4337, COMP6733, COMP9332-9337). Course Learning Outcomes
CLO1 : Understand the current architecture of the Internet and the entities involved in its operations
Course Learning Outcomes
CLO2 : Demonstrate soundness of, or identify potential flaws in, proposed protocols
Course Learning Outcomes
CLO3 : Design networked applications and protocols, and implement them in C, Java or Python
Course Learning Outcomes
CLO4 : Analyse and evaluate the performance of computer networks
Course Learning Outcomes
CLO5 : Capture and analyse network traffic
Course Learning Outcomes
CLO6 : Understand and explain security and ethical issues in computer networking Application Layer:
Content Distribution Networks
Socket Programming
Transport Layer: 
Transport services
Multiplexing & Demultiplexing
UDP
Application Layer:
Principles of networked applications
The Web & HTTP
Email
Domain Name Service (DNS)
Peer-to-Peer Networks and DHT
Assignment Due: 10 Nov
Assignment Specs Released (Expected)
Course Logistics 
Introduction:
What is the Internet?
Network edge and core
Performance of networks
Introduction:
Layering and Encapsulation
Course prepration (Optional)
Lab 1
Lab 1 submission deadline: 10:00 Monday 25 September
Lab 2
Lab 2 submission deadline: 10:00 Monday 2 October
Lab 3 
Lab 3 submission deadline: 10:00 Monday 09 October
Lab 4
Lab 4 submission deadline: 10:00 Monday 30 Oct
Lab 5 
Lab 5 submission deadline: 10:00 Monday 6 November
Lab 6 
Lab 6 submission deadline: 10:00 Monday 13 November
Link Layer:
Multiple Access Protocols
Link-Layer Addressing and ARP
Ethernet
Switches
Wireless Networks
Wireless Characteristics
802.11
CSMA/CA
A day in the life of a web request 

Network Security
Basic Cryptography
Message integrity & Digital signatures
Authentication
Mid-term exam will take place on the 23 Oct, hence no in-person lecture on that day 
Mid-term exam will be using the Inspera online platform, which you will get access to from a link in the course Moodle site. The exam times will be announced well in advance. The mid-term exam will be on-line, un-invigilated, and you can sit for the exam from a place of your choice. More information for students about Inspera can be found here:https://unsw.sharepoint.com/sites/Assessment-Platform-Pilot .
Network Layer, Control Plane:
Link State and Distance Vector
Hierarchical routing
ICMP
Link Layer:
Error detection
Network Layer, Data Plane:
NAT
IPv6
Network Layer, Control Plane:
Routing algorithms
Network Layer, Data Plane:
Overview
IP
IP Addressing
No lecture, No Lab, No Submission
Self-Study of Lab resources and tools 
(no submission and no marks)
Transport Layer:
Connection management & flow control
Congestion control
Fairness
Transport Layer:
Principles of reliable data delivery
Pipelined Protocols
TCP
Tutorial 1
Tutorial 2 General Schedule Information
The following table lists the tentative weekly schedule. Students will be informed of any changes during the lecture and by announcements on the notices page. 
 ","{'problem solving': 9, 'communication': 9, 'teamwork': 9, 'leadership': 9, 'adaptability': 18, 'critical thinking': 9, 'time management': 9, 'resilience': 9, 'reading': 9, 'social networking': 9}","{'delivery content': 4, 'network layer': 4, 'python': 4, 'pipeline delivery': 4, 'service transport': 4, 'udp': 4, 'transport layer': 4, 'DNS': 4, 'ICMP': 4, 'flow control': 4, 'cryptography': 4, 'person': 4, 'ip tcp': 4, 'TCP': 4, 'java': 4, 'com': 4, 'logistics': 4, 'transmission': 4, 'algorithms': 4, 'present data': 4, 'application layer': 4, 'digital signature': 4, 'multiple protocols': 4, 'access control': 4, 'peer to': 4}","['Fairness', 'Transport Layer', 'Pipelined Protocols', 'Multiple Access Protocols', 'Congestion control', 'Wireless Networks', 'IP', 'Link State and Distance Vector', 'Layering and Encapsulation', 'TCP', 'The Web  HTTP', 'PeertoPeer Networks and DHT', 'Socket Programming', 'LinkLayer Addressing and ARP', 'Error detection', 'Switches', 'Link Layer', 'Application Layer', 'Message integrity  Digital signatures', 'Hierarchical routing', 'Basic Cryptography', 'Domain Name Service DNS', 'NAT', 'CSMACA', 'Performance of networks', 'Network Security', 'Ethernet', 'Network Layer Data Plane', 'Principles of reliable data delivery', 'A day in the life of a web request', 'Network Layer Control Plane', 'Routing algorithms', 'Authentication', 'Wireless Characteristics', 'Multiplexing  Demultiplexing', 'ICMP', 'Transport services', 'Connection management  flow control', 'Network edge and core', 'UDP', 'Principles of networked applications', 'IP Addressing', 'What is the Internet']"
COMP3421,Computer Graphics,undergraduate,"In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Reality-based graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.
The objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry.","To teach you how to develop and manipulate 2D and 3D objects, including transformations and object control.
To instruct you in scripting languages used in game engines.
To familiarize you with the development of materials, and the incorporation of reflection and shadows.
To acquaint you with static meshes, collision detection, and physics in 3D.
To familiarize you with lighting techniques and shadows.
To introduce the use of cameras for creating different perspectives, such as first-person and third-person views.
To instruct you on collision detection and the application of physics in both 2D and 3D.
To familiarize you with the process of converting a standard 3D environment into a virtual reality-based environment.
To teach you how to define interactions in virtual reality and create an environment that is as realistic as possible.","Course Learning Outcomes
CLO1 : Understand how game engines work.
Course Learning Outcomes
CLO2 : Comprehend computer graphics concepts, such as graphical objects, the hierarchical model of objects, lighting, shadow, reflection, surface, texture maps, and their practical implementation.
Course Learning Outcomes
CLO3 : Be able to design 2D, 3D and virtual reality-based graphical environments and objects including lines, curves, surfaces, geometrical shapes, etc.
Course Learning Outcomes
CLO4 : Be able to apply physics and collisions in 2D and 3D environments
Course Learning Outcomes
CLO5 : Be able to render scenes on a range of platforms and hardware devices","2D Objects and transform
Player pawn 2D
Introduction to C# programming
Mapping controllers in 2D
Prefab objects and projectiles in 2D
Creating projectile in 3D
Importing prebuilt graphical elements (FBX files)
Applying damage to the player pawn
Creating conditional trigger box
Introduction to landscape brushes
Texture layers
Advanced concepts in landscape brushes
Creating Visual Effects (The Niagara VFX System)
Grabbing and moving objects in VR
Movement in VR
Snap turn in VR
Teleportation Movement in VR
Introduction to collision detection and physics in 3D
Introduction to the trigger box 3D
Introduction to rendering
Advanced concepts in geometry brushes in 3D
Introduction to lights and shadows
Introduction to blueprint classes
Introduction to computer graphics
Player pawn and transform tools in 3D
Introduction to Blueprints coding
Introduction to virtual reality
Rendering VR scenes
Mapping virtual reality controllers
Creating VR player pawn
Developing VR hand
Mapping controllers to move objects in 3D
Introduction to material concept
Introduction to geometry brushes in 3D
Introduction to static meshes
Physics and collision detection 2D
Introduction to trigger box 2D
Applying damaging and destroying objects 2D
Spawn manager
Adding user interface elements
Animating objects in 2D
Rendering 2D sprites
Player pawn class and camera
Mapping controllers to rotate objects in 3D
Advanced concepts of camera
Advanced material design
Advanced collision detection and physics in 3D
Animating objects
Blueprint functions
Blueprint macros
Term Break (Flex Week)","General Schedule Information
Monday 6-8pm (Rex Vowels Theatre (K-F17-LG3))
Thursday 6-8pm (Physics Theatre (K-K14-19))",2023.0,T3,2023-10-23 23:40:48,"In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Reality-based graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.
The objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry. To teach you how to develop and manipulate 2D and 3D objects, including transformations and object control.
To instruct you in scripting languages used in game engines.
To familiarize you with the development of materials, and the incorporation of reflection and shadows.
To acquaint you with static meshes, collision detection, and physics in 3D.
To familiarize you with lighting techniques and shadows.
To introduce the use of cameras for creating different perspectives, such as first-person and third-person views.
To instruct you on collision detection and the application of physics in both 2D and 3D.
To familiarize you with the process of converting a standard 3D environment into a virtual reality-based environment.
To teach you how to define interactions in virtual reality and create an environment that is as realistic as possible. Course Learning Outcomes
CLO1 : Understand how game engines work.
Course Learning Outcomes
CLO2 : Comprehend computer graphics concepts, such as graphical objects, the hierarchical model of objects, lighting, shadow, reflection, surface, texture maps, and their practical implementation.
Course Learning Outcomes
CLO3 : Be able to design 2D, 3D and virtual reality-based graphical environments and objects including lines, curves, surfaces, geometrical shapes, etc.
Course Learning Outcomes
CLO4 : Be able to apply physics and collisions in 2D and 3D environments
Course Learning Outcomes
CLO5 : Be able to render scenes on a range of platforms and hardware devices 2D Objects and transform
Player pawn 2D
Introduction to C# programming
Mapping controllers in 2D
Prefab objects and projectiles in 2D
Creating projectile in 3D
Importing prebuilt graphical elements (FBX files)
Applying damage to the player pawn
Creating conditional trigger box
Introduction to landscape brushes
Texture layers
Advanced concepts in landscape brushes
Creating Visual Effects (The Niagara VFX System)
Grabbing and moving objects in VR
Movement in VR
Snap turn in VR
Teleportation Movement in VR
Introduction to collision detection and physics in 3D
Introduction to the trigger box 3D
Introduction to rendering
Advanced concepts in geometry brushes in 3D
Introduction to lights and shadows
Introduction to blueprint classes
Introduction to computer graphics
Player pawn and transform tools in 3D
Introduction to Blueprints coding
Introduction to virtual reality
Rendering VR scenes
Mapping virtual reality controllers
Creating VR player pawn
Developing VR hand
Mapping controllers to move objects in 3D
Introduction to material concept
Introduction to geometry brushes in 3D
Introduction to static meshes
Physics and collision detection 2D
Introduction to trigger box 2D
Applying damaging and destroying objects 2D
Spawn manager
Adding user interface elements
Animating objects in 2D
Rendering 2D sprites
Player pawn class and camera
Mapping controllers to rotate objects in 3D
Advanced concepts of camera
Advanced material design
Advanced collision detection and physics in 3D
Animating objects
Blueprint functions
Blueprint macros
Term Break (Flex Week) General Schedule Information
Monday 6-8pm (Rex Vowels Theatre (K-F17-LG3))
Thursday 6-8pm (Physics Theatre (K-K14-19))","{'reading': 20, 'communication': 10, 'problem solving': 10, 'leadership': 10, 'adaptability': 20, 'critical thinking': 10, 'time management': 10, 'resilience': 10}","{'macros': 5, 'geometry': 5, 'surface': 5, 'effect visual': 5, 'controllers': 5, 'spawn': 5, 'person': 5, 'unreal engine': 5, 'comprehend': 5, 'delve': 5, 'maps': 5, 'fbx': 5, 'physical': 5, 'blueprint': 5, 'snap': 5, 'user interface': 5, 'computer graphic': 5, 'physics apply': 5, 'hierarchical model': 5}","['Animating objects in 2D', 'Advanced material design', 'Rendering 2D sprites', 'Advanced concepts of camera', 'Grabbing and moving objects in VR', 'Developing VR hand', 'Spawn manager', 'Physics and collision detection 2D', 'Creating Visual Effects The Niagara VFX System', 'Mapping controllers to rotate objects in 3D', 'Advanced collision detection and physics in 3D', 'Applying damage to the player pawn', 'Mapping controllers to move objects in 3D', 'Blueprint macros', 'Adding user interface elements', 'Prefab objects and projectiles in 2D', 'Creating conditional trigger box', 'Importing prebuilt graphical elements FBX files', 'Advanced concepts in landscape brushes', 'Snap turn in VR', 'Animating objects', 'Player pawn 2D', 'Texture layers', 'Movement in VR', 'Blueprint functions', 'Rendering VR scenes', 'Mapping controllers in 2D', 'Teleportation Movement in VR', 'Advanced concepts in geometry brushes in 3D', 'Creating projectile in 3D', 'Player pawn and transform tools in 3D', 'Creating VR player pawn', 'Applying damaging and destroying objects 2D', 'Player pawn class and camera', 'Mapping virtual reality controllers', '2D Objects and transform']"
COMP3900,Computer Science Project,undergraduate,"This is a software project capstone course. Students work in teams of ideally five (5) members to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.",This course aims to produce students who can apply their computing knowledge and skills to work effectively as IT professionals.,"Course Learning Outcomes
CLO1 : work from a set of requirements, elaborate them, and produce a specification
Course Learning Outcomes
CLO2 : design and build a correct, efficient and robust software system from specification
Course Learning Outcomes
CLO3 : use software development and software project management tools
Course Learning Outcomes
CLO4 : validate the correctness and robustness of software
Course Learning Outcomes
CLO5 : work effectively in a project team, and lead when required
Course Learning Outcomes
CLO6 : manage time effectively, and make reasoned trade-offs over competing demands
Course Learning Outcomes
CLO7 : communicate technical information clearly, both verbally and in writing",,"General Schedule Information
The following table outlines a provisional schedule for this course. The contents of the lectures are described roughly and are subject to adjustments.
_____________________________________________________________________________________________________________________________________________
Week   Lectures                                                                               Labs                                                                          Assignments     
_____________________________________________________________________________________________________________________________________________
1         Course Introduction, Assessment Tasks Overview       Group formation, project brainstorming                  ---     
_____________________________________________________________________________________________________________________________________________
2         Scrum Agile Methodology                                               Work on the project proposal,                                    ---
                                                                                                   progress report
_____________________________________________________________________________________________________________________________________________
3         Interface Design Principles, Git and GitHub,                Work on the project proposal,                                  Proposal due Friday @ 9pm
           Project Proposal                                                            progress report
_____________________________________________________________________________________________________________________________________________
4         Introduction to Project Management                            Work on the project, progress report                        ---  
           Progressive Demo A, Retrospective A
_____________________________________________________________________________________________________________________________________________
5         Project Scope Management,                                         Work on the project,                                                 Progressive Demo A conducted in lab
           Project Time Management                                             Progressive Demo A                                               Retrospective A Report due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________     
6         Flexibility Week                                                               ---                                                                                 ---
_____________________________________________________________________________________________________________________________________________
7         Project Cost Management                                           Work on the project, progress report                        ---     
           Progressive Demo B, Retrospective B
_____________________________________________________________________________________________________________________________________________
8         Teamwork, Managing Project Conflict                         Work on the project,                                                 Progressive Demo B conducted in lab
                                                                                                   Progressive Demo B                                               Retrospective B Report due Saturday @ 9pm  
_____________________________________________________________________________________________________________________________________________   
9         Project Change Management,                                    Work on the project, progress report                         ---     
           Final Project Demo
_____________________________________________________________________________________________________________________________________________
10       Remaining Assessment Items, Wrap-up                    Project Final Demo                                                  Final Demo conducted in lab
                                                                                                                                                                                      Project Report due Friday @ 9pm
                                                                                                                                                                                     Software Quality due Friday @ 9pm
                                                                                                                                                                                     Peer Assessment due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________",2023.0,T3,2023-10-23 23:44:48,"This is a software project capstone course. Students work in teams of ideally five (5) members to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project. This course aims to produce students who can apply their computing knowledge and skills to work effectively as IT professionals. Course Learning Outcomes
CLO1 : work from a set of requirements, elaborate them, and produce a specification
Course Learning Outcomes
CLO2 : design and build a correct, efficient and robust software system from specification
Course Learning Outcomes
CLO3 : use software development and software project management tools
Course Learning Outcomes
CLO4 : validate the correctness and robustness of software
Course Learning Outcomes
CLO5 : work effectively in a project team, and lead when required
Course Learning Outcomes
CLO6 : manage time effectively, and make reasoned trade-offs over competing demands
Course Learning Outcomes
CLO7 : communicate technical information clearly, both verbally and in writing  General Schedule Information
The following table outlines a provisional schedule for this course. The contents of the lectures are described roughly and are subject to adjustments.
_____________________________________________________________________________________________________________________________________________
Week   Lectures                                                                               Labs                                                                          Assignments     
_____________________________________________________________________________________________________________________________________________
1         Course Introduction, Assessment Tasks Overview       Group formation, project brainstorming                  ---     
_____________________________________________________________________________________________________________________________________________
2         Scrum Agile Methodology                                               Work on the project proposal,                                    ---
                                                                                                   progress report
_____________________________________________________________________________________________________________________________________________
3         Interface Design Principles, Git and GitHub,                Work on the project proposal,                                  Proposal due Friday @ 9pm
           Project Proposal                                                            progress report
_____________________________________________________________________________________________________________________________________________
4         Introduction to Project Management                            Work on the project, progress report                        ---  
           Progressive Demo A, Retrospective A
_____________________________________________________________________________________________________________________________________________
5         Project Scope Management,                                         Work on the project,                                                 Progressive Demo A conducted in lab
           Project Time Management                                             Progressive Demo A                                               Retrospective A Report due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________     
6         Flexibility Week                                                               ---                                                                                 ---
_____________________________________________________________________________________________________________________________________________
7         Project Cost Management                                           Work on the project, progress report                        ---     
           Progressive Demo B, Retrospective B
_____________________________________________________________________________________________________________________________________________
8         Teamwork, Managing Project Conflict                         Work on the project,                                                 Progressive Demo B conducted in lab
                                                                                                   Progressive Demo B                                               Retrospective B Report due Saturday @ 9pm  
_____________________________________________________________________________________________________________________________________________   
9         Project Change Management,                                    Work on the project, progress report                         ---     
           Final Project Demo
_____________________________________________________________________________________________________________________________________________
10       Remaining Assessment Items, Wrap-up                    Project Final Demo                                                  Final Demo conducted in lab
                                                                                                                                                                                      Project Report due Friday @ 9pm
                                                                                                                                                                                     Software Quality due Friday @ 9pm
                                                                                                                                                                                     Peer Assessment due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________","{'teamwork': 14, 'time management': 29, 'critical thinking': 29, 'problem solving': 14, 'social networking': 14}","{'git': 9, 'validate': 9, 'github': 9, 'report progress': 9, 'development software': 9, 'proposal project': 9, 'assessment project': 9, 'project software': 9, 'scrum': 9, 'software system': 9, 'quality software': 9}",No Information about Topics
COMP3901,Special Project A,undergraduate,"Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.","The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved.","Course Learning Outcomes
CLO1 : Work under supervision on a research or development project
Course Learning Outcomes
CLO2 : Communicate the results of a project in both written and verbal form",,"General Schedule Information
Weekly/fornightly meetings with your supervisor.",2023.0,T3,2023-10-23 23:48:37,"Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project. The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved. Course Learning Outcomes
CLO1 : Work under supervision on a research or development project
Course Learning Outcomes
CLO2 : Communicate the results of a project in both written and verbal form  General Schedule Information
Weekly/fornightly meetings with your supervisor.","{'resilience': 25, 'communication': 25, 'supervision': 25, 'critical thinking': 25}",{'development course': 100},No Information about Topics
COMP3902,Special Project B,undergraduate,"Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.","The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved.","Course Learning Outcomes
CLO1 : Work under supervision on a research or development project
Course Learning Outcomes
CLO2 : Communicate the results of a project in both written and verbal form",,"General Schedule Information
Weekly/fornightly meetings with your supervisor.",2023.0,T3,2023-10-23 23:52:26,"Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project. The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved. Course Learning Outcomes
CLO1 : Work under supervision on a research or development project
Course Learning Outcomes
CLO2 : Communicate the results of a project in both written and verbal form  General Schedule Information
Weekly/fornightly meetings with your supervisor.","{'resilience': 25, 'communication': 25, 'supervision': 25, 'critical thinking': 25}",{'development course': 100},No Information about Topics
COMP4121,Advanced Algorithms,undergraduate,"This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skip-lists, order statistics and Karger's randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121/3821/9101/9801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https://www.cs.cornell.edu/jeh/book.pdf.",The aims of the course are,"Course Learning Outcomes
CLO1 : Understand more advanced algorithms employed by modern industry, especially those used in Data Science and Machine Learning
Course Learning Outcomes
CLO2 : Apply randomisation to real life problems
Course Learning Outcomes
CLO3 : Employ numerical algorithms such as Singular Value Decomposition and Fast Fourier transform
Course Learning Outcomes
CLO4 : Acquiring necessary skills and use them for advanced algorithms design
Course Learning Outcomes
CLO5 : Improved problem solving skills","Gaussian Annulus, random projections and Johnson Lindenstrauss lemma
Google PageRank algorithm and Markov chains
Hidden Markov models and the Viterbi algorithm
Karger's Min Cut algorithm; universal and perfect hashing
Order statistic, skip lists and randomised database access.
Recommender systems; clustering algorithms
Review of the material
The Discrete Fourier Transform, the Fast Fourier Transform and convolution
The Singular Values Decomposition and applications
Transmit power control in celular networks; review of the material
probability and statistics refresher",,2023.0,T3,2023-10-23 23:56:13,"This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skip-lists, order statistics and Karger's randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121/3821/9101/9801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https://www.cs.cornell.edu/jeh/book.pdf. The aims of the course are Course Learning Outcomes
CLO1 : Understand more advanced algorithms employed by modern industry, especially those used in Data Science and Machine Learning
Course Learning Outcomes
CLO2 : Apply randomisation to real life problems
Course Learning Outcomes
CLO3 : Employ numerical algorithms such as Singular Value Decomposition and Fast Fourier transform
Course Learning Outcomes
CLO4 : Acquiring necessary skills and use them for advanced algorithms design
Course Learning Outcomes
CLO5 : Improved problem solving skills Gaussian Annulus, random projections and Johnson Lindenstrauss lemma
Google PageRank algorithm and Markov chains
Hidden Markov models and the Viterbi algorithm
Karger's Min Cut algorithm; universal and perfect hashing
Order statistic, skip lists and randomised database access.
Recommender systems; clustering algorithms
Review of the material
The Discrete Fourier Transform, the Fast Fourier Transform and convolution
The Singular Values Decomposition and applications
Transmit power control in celular networks; review of the material
probability and statistics refresher ","{'problem solving': 17, 'resilience': 33, 'communication': 17, 'adaptability': 17, 'critical thinking': 17}","{'model hide markov': 14, 'algorithms': 14, 'transform fast fourier': 14, 'database access': 14, 'pagerank': 14, 'recommender system': 14, 'design algorithm': 14}","['Google PageRank algorithm and Markov chains', 'Recommender systems clustering algorithms', 'The Discrete Fourier Transform the Fast Fourier Transform and convolution', 'Order statistic skip lists and randomised database access', 'Kargers Min Cut algorithm universal and perfect hashing', 'Hidden Markov models and the Viterbi algorithm', 'Gaussian Annulus random projections and Johnson Lindenstrauss lemma', 'probability and statistics refresher', 'The Singular Values Decomposition and applications']"
COMP4128,Programming Challenges,undergraduate, ,"It is common for computing professionals to be faced with challenging problems that require both algorithmic thinking and skillful programming to solve. The aim of this course is to train students in the implementation of solutions of such problems, focusing on accuracy, efficiency and speed.","Course Learning Outcomes
CLO1 : Design and implement solutions to unfamiliar problems
Course Learning Outcomes
CLO2 : Demonstrate an understanding of the practical aspects of the material covered in the course
Course Learning Outcomes
CLO3 : Complete all phases of solving a problem (identifying, combining and implementing approaches) under tight time constraints","Contest 1
Contest 2
Contest 3
Data Structures I
Data Structures II
Dynamic Programming
Getting Started
Graphs
ICPC Preliminary Contest (3rd September)
Mathematics
Network Flow
Problem Set 1 released
Problem Set 2 released
Problem Set 3 released
Problem Set 4 released
Problem Set 5 released
Problem Set 6 released
Problem Set 7 released
Problem Set 8 released
Problem-Solving Paradigms
Thursday: Data Structures I
Thursday: Dynamic Programming
Thursday: Exam Revision
Thursday: Getting Started
Thursday: Graphs
Thursday: Mathematics
Thursday: Network Flow
Thursday: Shortest Paths
Thursday: TBA
Tuesday: Data Structures I (continued)
Tuesday: Data Structures II (continued)
Tuesday: Dynamic Programming (continued)
Tuesday: Graphs (continued)
Tuesday: Introduction
Tuesday: Mathematics (continued)
Tuesday: Network Flow
Tuesday: Problem-Solving Paradigms
Tuesday: TBA","General Schedule Information
The full schedule can be found on Moodle, where it is conveniently formatted in a table.",2023.0,T3,2023-10-24 00:00:07,"  It is common for computing professionals to be faced with challenging problems that require both algorithmic thinking and skillful programming to solve. The aim of this course is to train students in the implementation of solutions of such problems, focusing on accuracy, efficiency and speed. Course Learning Outcomes
CLO1 : Design and implement solutions to unfamiliar problems
Course Learning Outcomes
CLO2 : Demonstrate an understanding of the practical aspects of the material covered in the course
Course Learning Outcomes
CLO3 : Complete all phases of solving a problem (identifying, combining and implementing approaches) under tight time constraints Contest 1
Contest 2
Contest 3
Data Structures I
Data Structures II
Dynamic Programming
Getting Started
Graphs
ICPC Preliminary Contest (3rd September)
Mathematics
Network Flow
Problem Set 1 released
Problem Set 2 released
Problem Set 3 released
Problem Set 4 released
Problem Set 5 released
Problem Set 6 released
Problem Set 7 released
Problem Set 8 released
Problem-Solving Paradigms
Thursday: Data Structures I
Thursday: Dynamic Programming
Thursday: Exam Revision
Thursday: Getting Started
Thursday: Graphs
Thursday: Mathematics
Thursday: Network Flow
Thursday: Shortest Paths
Thursday: TBA
Tuesday: Data Structures I (continued)
Tuesday: Data Structures II (continued)
Tuesday: Dynamic Programming (continued)
Tuesday: Graphs (continued)
Tuesday: Introduction
Tuesday: Mathematics (continued)
Tuesday: Network Flow
Tuesday: Problem-Solving Paradigms
Tuesday: TBA General Schedule Information
The full schedule can be found on Moodle, where it is conveniently formatted in a table.","{'problem solving': 50, 'time management': 25, 'teamwork': 25}","{'graphs': 25, 'algorithmic': 25, 'dynamic programming': 25, 'paths': 25}","['Data Structures I', 'Data Structures II', 'Mathematics continued', 'Dynamic Programming', 'Mathematics', 'Network Flow', 'Dynamic Programming continued', 'Shortest Paths', 'Data Structures II continued', 'Graphs', 'Graphs continued', 'ProblemSolving Paradigms', 'Data Structures I continued']"
COMP4336,Mobile Data Networking,undergraduate,"This is a first course in wireless and mobile networking examining the fundamental theories as well as the latest advances in wireless data and mobile communication networks. Topics include fundamental concepts in wireless coding, modulation, and signal propagation, WiFi and wireless local area networks, cellular networks, Bluetooth, and Internet of Things networks. The course will also overview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Hands-on experiments with mobile devices will be part of the learning exercise, which involves wireless packet capture, analysis, and programming.","The course aims to produce who are expert in the area of wireless network technologies and can contribute to solutions in this space.
The course is a discipline elective in the Computer Networks major in the undergraduate computer science program and in the Internetworking majors in the masters program.","Course Learning Outcomes
CLO1 : master the fundamental theories and the basic science and mathematics behind popular wireless networking technologies
Course Learning Outcomes
CLO2 : analyse the algorithms and protocols used by popular wireless and mobile networking technologies
Course Learning Outcomes
CLO3 : gain insight to some of the emerging wireless and mobile networking concepts and technologies
Course Learning Outcomes
CLO4 : experiment with mobile devices",,"General Schedule Information
Here is a tentative schedule, which may be subject to minor adjustments during the term.
Week 1: Wireless fundamentals I, Complete Lab-1
Week 2: Wireless Fundamentals II, Mid-lecture Quiz, Complete Lab-2
Week 3: WiFi I, Mid-lecture Quiz, Complete Lab-3
Week 4: Public Holiday (No lecture or lab sesions, but WiFi II lecture video released and affected labs, i.e. Lab 4, rescheduled)
Week 5: Bluetooth, Mid-lecture Quiz, Complete Lab-5
Week 6: Term Recess (No lecture, no lab)
Week 7: Cellular Networks,  Mid-lecture Quiz, Complete Lab-6
Week 8: Internet of Things Networks,  Mid-lecture Quiz, Complete Lab-7
Week 9: Wireless Sensing, Mid-lecture Quiz, Complete Lab-8
Week 10: Non-terrestrial Networks,  Mid-lecture Quiz, Complete Lab-9",2023.0,T3,2023-10-24 00:04:00,"This is a first course in wireless and mobile networking examining the fundamental theories as well as the latest advances in wireless data and mobile communication networks. Topics include fundamental concepts in wireless coding, modulation, and signal propagation, WiFi and wireless local area networks, cellular networks, Bluetooth, and Internet of Things networks. The course will also overview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Hands-on experiments with mobile devices will be part of the learning exercise, which involves wireless packet capture, analysis, and programming. The course aims to produce who are expert in the area of wireless network technologies and can contribute to solutions in this space.
The course is a discipline elective in the Computer Networks major in the undergraduate computer science program and in the Internetworking majors in the masters program. Course Learning Outcomes
CLO1 : master the fundamental theories and the basic science and mathematics behind popular wireless networking technologies
Course Learning Outcomes
CLO2 : analyse the algorithms and protocols used by popular wireless and mobile networking technologies
Course Learning Outcomes
CLO3 : gain insight to some of the emerging wireless and mobile networking concepts and technologies
Course Learning Outcomes
CLO4 : experiment with mobile devices  General Schedule Information
Here is a tentative schedule, which may be subject to minor adjustments during the term.
Week 1: Wireless fundamentals I, Complete Lab-1
Week 2: Wireless Fundamentals II, Mid-lecture Quiz, Complete Lab-2
Week 3: WiFi I, Mid-lecture Quiz, Complete Lab-3
Week 4: Public Holiday (No lecture or lab sesions, but WiFi II lecture video released and affected labs, i.e. Lab 4, rescheduled)
Week 5: Bluetooth, Mid-lecture Quiz, Complete Lab-5
Week 6: Term Recess (No lecture, no lab)
Week 7: Cellular Networks,  Mid-lecture Quiz, Complete Lab-6
Week 8: Internet of Things Networks,  Mid-lecture Quiz, Complete Lab-7
Week 9: Wireless Sensing, Mid-lecture Quiz, Complete Lab-8
Week 10: Non-terrestrial Networks,  Mid-lecture Quiz, Complete Lab-9","{'mobile device abilities': 17, 'communication': 17, 'teamwork': 17, 'problem solving': 17, 'resilience': 17, 'social networking': 17}","{'thing internet of': 17, 'bluetooth': 17, 'mobile': 17, 'algorithms': 17, 'video released': 17, 'network local area': 17}",No Information about Topics
COMP4418,Knowledge Representation and Reasoning,undergraduate,"How can you timetable classes to fit everyone’s schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?
Knowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, so-called combinatorial problems. To do so, I will teach you “modeling”, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification.","This course provides an introduction to the important approach to symbolic Artificial Intelligence (AI) known is Knowledge Representation and Reasoning (KRR). KRR has a long and distinguished history of research in AI with a broad range of approaches. In this course we concentrate on formal approaches to KRR, in particular logic based approaches – propositional logic, first-order logic, non-monotonic logic – and how they can be used to solve difficult computational problems.
This course can be a starting point for further exploration of artificial intelligence. Further courses include COMP3431/COMP9431: Robotic Software Architecture, COMP9417: Machine Learning and Data Mining, COMP9444: Neural Networks and COMP9844: Extended Neural Networks.","Course Learning Outcomes
CLO1 : Identify when a given situation can be formulated with a Knowledge Representation and Reasoning (KRR) approach
Course Learning Outcomes
CLO2 : Implement a problem model in a KRR language and use existing KRR tools to identify a solution
Course Learning Outcomes
CLO3 : Break down a task into its domain vocabulary and its combinatorial dimension
Course Learning Outcomes
CLO4 : Solve new combinatorial problems using declarative programming","Cooperative Game Theory
Formal Logic and Reasoning, First-order Logic
Implementing Formal Reasoning, Commonsense Reasoning
Introduction to Answer Set Programming
Introduction to KRR, Modelling, Propositional Logic
Multi-agent Resource Allocation
Reasoning about Actions
Social Choice
Solving problems with Answer Set Programming
Term Break (Flex Week)",,2023.0,T3,2023-10-24 00:07:50,"How can you timetable classes to fit everyone’s schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?
Knowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, so-called combinatorial problems. To do so, I will teach you “modeling”, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification. This course provides an introduction to the important approach to symbolic Artificial Intelligence (AI) known is Knowledge Representation and Reasoning (KRR). KRR has a long and distinguished history of research in AI with a broad range of approaches. In this course we concentrate on formal approaches to KRR, in particular logic based approaches – propositional logic, first-order logic, non-monotonic logic – and how they can be used to solve difficult computational problems.
This course can be a starting point for further exploration of artificial intelligence. Further courses include COMP3431/COMP9431: Robotic Software Architecture, COMP9417: Machine Learning and Data Mining, COMP9444: Neural Networks and COMP9844: Extended Neural Networks. Course Learning Outcomes
CLO1 : Identify when a given situation can be formulated with a Knowledge Representation and Reasoning (KRR) approach
Course Learning Outcomes
CLO2 : Implement a problem model in a KRR language and use existing KRR tools to identify a solution
Course Learning Outcomes
CLO3 : Break down a task into its domain vocabulary and its combinatorial dimension
Course Learning Outcomes
CLO4 : Solve new combinatorial problems using declarative programming Cooperative Game Theory
Formal Logic and Reasoning, First-order Logic
Implementing Formal Reasoning, Commonsense Reasoning
Introduction to Answer Set Programming
Introduction to KRR, Modelling, Propositional Logic
Multi-agent Resource Allocation
Reasoning about Actions
Social Choice
Solving problems with Answer Set Programming
Term Break (Flex Week) ","{'problem solving': 17, 'resilience': 17, 'critical thinking': 17, 'adaptability': 17, 'reading': 8, 'communication': 8, 'time management': 8, 'social networking': 8}","{'theory game': 14, 'limited': 14, 'vocabulary': 14, 'programming language': 14, 'architecture software': 14, 'program computer': 14, 'minesweeper': 14}","['Formal Logic and Reasoning Firstorder Logic', 'Solving problems with Answer Set Programming', 'Multiagent Resource Allocation', 'Cooperative Game Theory', 'Social Choice', 'Reasoning about Actions', 'Implementing Formal Reasoning Commonsense Reasoning']"
COMP4431,Game Design Workshop,undergraduate,"Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?
This course will explore the three basic elements of game design - mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on the design of play , not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry.","This course aims to provide students with the skills and knowledge to design games that are engaging, playable and fun, and to analyse games in terms of these characteristics. This is an upper-year elective course.","Course Learning Outcomes
CLO1 : Define a game through the lenses of mechanics, aesthetics, story, and technology.
Course Learning Outcomes
CLO2 : Analyse games in terms of their core mechanics, gameplay dynamics, and aesthetic components.
Course Learning Outcomes
CLO3 : Apply the iterative experience-based design methodology to design, prototype, playtest, and evaluate a board game.
Course Learning Outcomes
CLO4 : Develop the ability to document your game designs to best communicate your ideas.
Course Learning Outcomes
CLO5 : Explain the role of ethics and accessibility in game design.","Aesthetics of games
Balance
Inclusivity and Accessibility of Games
Brainstorming and ideation
Induction to Maker Space Equipment
Continuing the ideation process
Induction to Maker Space Equipment
Design Documentation
Ethics of games
Game Community
GUEST LECTURE: Gender and identity in gaming and ethics of games
Evaluating your game
  In class guest lecture: An interview with Phil Walker-Harding
(Phil is a board and card game designer living and working on Gadigal land (Sydney, Australia). He makes games that are easy to learn and socially engaging to play. He hopes that his designs can bring people of all ages and backgrounds together at the table for meaningful experiences. His best-known game is Sushi Go! which has been published around the world in over 20 languages, selling over 1 million copies.)
Housekeeping and welcome
What is game design?
What is a game?
Ideation and Aesthetics Deliverable due
Let's start getting hands dirty with some prototyping :) 
Which leads right into playtesting and balancing
Mechanics and First prototype due
No Lectures - Flex week
No labs - Flex week
Playtesting all the games :)
Preparing for your final deliverable and playtesting
Prototyping
Playtesting
Guest appearance of our very own Gabo from the Maker Space rapid prototyping and rebuilding Catan 
THIS WEEK IS A PUBLIC HOLIDAY WEEK, SO THERE IS NO CLASS ON MONDAY
Prototyping, Playtesting and Balancing
Starting to play with mechanics
Beginning the tightrope of balance
The MDA Framework
Core Mechanics
The game pitch
In class guest lecture: An interview with Travis McGeathy
(Travis is a veteran game design leader with a career spanning more than 2 decades and 35 titles. He has chased a consistent passion: designing games that bring people together. As the Lead Designer on EverQuest, Travis brought this to life over 9 expansions while helping it win an Emmy Award and Walk of Game induction. At 38 Studios, he was the Design Director on the Kingdoms of Amalur MMO. At Blizzard he led the design for Heroes of the Storm, guided design teams for the classic Diablo, WarCraft, and StarCraft franchises, and formed an incubation team to create a new game set in an iconic Blizzard IP. Travis along with his partner are the founders of Seeker Games: https://www.seekergames.com/)","General Schedule Information
We are flipping the classroom! The concept of a flipped classroom revolves around the notion that traditional lectures or direct instruction are not the most effective ways to utilize class time. Instead, students are exposed to the learning materials before the class, allowing the in-class time to be devoted to activities that engage higher-order thinking. And this gives us the best opportunity to discuss, play games and build up our own community of learning! Games are best learned through play and practice, and we want to make sure that we have lots of time for discussion, so our structure will be a bit different from your regular course :) I expect you to have watched the lecture videos, and there will be a variety of optional resources and extra reading provided if you are interested in learning more about certain topics. Then in class, we will play games, and discuss that week's concepts and how they relate to the games that we play - so a bit of theory followed by a bit of practice and discussion - our very own games community :) From Week 4 onwards, we will have playtesting tables set up in every lab to get the first feel of your games ideas and to iron out any issues.",2023.0,T3,2023-10-24 00:11:41,"Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?
This course will explore the three basic elements of game design - mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on the design of play , not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry. This course aims to provide students with the skills and knowledge to design games that are engaging, playable and fun, and to analyse games in terms of these characteristics. This is an upper-year elective course. Course Learning Outcomes
CLO1 : Define a game through the lenses of mechanics, aesthetics, story, and technology.
Course Learning Outcomes
CLO2 : Analyse games in terms of their core mechanics, gameplay dynamics, and aesthetic components.
Course Learning Outcomes
CLO3 : Apply the iterative experience-based design methodology to design, prototype, playtest, and evaluate a board game.
Course Learning Outcomes
CLO4 : Develop the ability to document your game designs to best communicate your ideas.
Course Learning Outcomes
CLO5 : Explain the role of ethics and accessibility in game design. Aesthetics of games
Balance
Inclusivity and Accessibility of Games
Brainstorming and ideation
Induction to Maker Space Equipment
Continuing the ideation process
Induction to Maker Space Equipment
Design Documentation
Ethics of games
Game Community
GUEST LECTURE: Gender and identity in gaming and ethics of games
Evaluating your game
  In class guest lecture: An interview with Phil Walker-Harding
(Phil is a board and card game designer living and working on Gadigal land (Sydney, Australia). He makes games that are easy to learn and socially engaging to play. He hopes that his designs can bring people of all ages and backgrounds together at the table for meaningful experiences. His best-known game is Sushi Go! which has been published around the world in over 20 languages, selling over 1 million copies.)
Housekeeping and welcome
What is game design?
What is a game?
Ideation and Aesthetics Deliverable due
Let's start getting hands dirty with some prototyping :) 
Which leads right into playtesting and balancing
Mechanics and First prototype due
No Lectures - Flex week
No labs - Flex week
Playtesting all the games :)
Preparing for your final deliverable and playtesting
Prototyping
Playtesting
Guest appearance of our very own Gabo from the Maker Space rapid prototyping and rebuilding Catan 
THIS WEEK IS A PUBLIC HOLIDAY WEEK, SO THERE IS NO CLASS ON MONDAY
Prototyping, Playtesting and Balancing
Starting to play with mechanics
Beginning the tightrope of balance
The MDA Framework
Core Mechanics
The game pitch
In class guest lecture: An interview with Travis McGeathy
(Travis is a veteran game design leader with a career spanning more than 2 decades and 35 titles. He has chased a consistent passion: designing games that bring people together. As the Lead Designer on EverQuest, Travis brought this to life over 9 expansions while helping it win an Emmy Award and Walk of Game induction. At 38 Studios, he was the Design Director on the Kingdoms of Amalur MMO. At Blizzard he led the design for Heroes of the Storm, guided design teams for the classic Diablo, WarCraft, and StarCraft franchises, and formed an incubation team to create a new game set in an iconic Blizzard IP. Travis along with his partner are the founders of Seeker Games: https://www.seekergames.com/) General Schedule Information
We are flipping the classroom! The concept of a flipped classroom revolves around the notion that traditional lectures or direct instruction are not the most effective ways to utilize class time. Instead, students are exposed to the learning materials before the class, allowing the in-class time to be devoted to activities that engage higher-order thinking. And this gives us the best opportunity to discuss, play games and build up our own community of learning! Games are best learned through play and practice, and we want to make sure that we have lots of time for discussion, so our structure will be a bit different from your regular course :) I expect you to have watched the lecture videos, and there will be a variety of optional resources and extra reading provided if you are interested in learning more about certain topics. Then in class, we will play games, and discuss that week's concepts and how they relate to the games that we play - so a bit of theory followed by a bit of practice and discussion - our very own games community :) From Week 4 onwards, we will have playtesting tables set up in every lab to get the first feel of your games ideas and to iron out any issues.","{'communication': 12, 'leadership': 12, 'problem solving': 12, 'adaptability': 25, 'critical thinking': 12, 'resilience': 25}","{'prototype': 14, 'mechanics': 14, 'flipped classroom': 14, 'prototypes rapid': 14, 'order higher': 14, 'franchises': 14, 'com': 14}","['Continuing the ideation process', 'Beginning the tightrope of balance', 'The MDA Framework', 'Playtesting', 'Induction to Maker Space Equipment', 'GUEST LECTURE Gender and identity in gaming and ethics of games', 'The game pitch', 'Ethics of games', 'What is a game', 'Prototyping', 'Core Mechanics', 'Brainstorming and ideation', 'Inclusivity and Accessibility of Games', 'Lets start getting hands dirty with some prototyping', 'Starting to play with mechanics', 'Balance', 'Which leads right into playtesting and balancing', 'Preparing for your final deliverable and playtesting', 'Game Community', 'Evaluating your game', 'What is game design', 'Aesthetics of games', 'Prototyping Playtesting and Balancing', 'Playtesting all the games', 'Design Documentation']"
COMP4511,User Interface Design and Construction,undergraduate,"COMP4511 is a hands-on project-based course designed to build and solidify the basic skills you acquired in COMP3511/9511. Students will be required to build their interface at least three times (remember the process is iterative!), once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.
The process doesn't start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?
As you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the object-oriented design. You will build the code implementation iterating through both your object-oriented design and your user interface design.
The real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect - not what you as a programmer expect. That's the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.
We teach a process that is relevant to industry. Preparing students for the real-world challenges of user interface design. And face it, user interfaces are everywhere.
The process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?
COMP3511 Human Computer Interaction is a pre-requisite and you need a mark of 70 or better (you are expected to start design, prototyping and designing usability tests in the first week). You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher.","This course aims to develop your skills in designing and creating a basic user interface.  UI design that meets the users needs is an important part of the Design process and will equip you with skills to create more usable interfaces in industry. More specifically, the course aims to:
• to develop your skills in the area of user-centred design, with a focus on mobile design
• to develop and implement techniques/heuristics necessary to evaluate systems for their usability
• to develop further your capability of executing a user-centred design process
• to give you experience in using paper-based design techniques, including software systems designed for paper-based prototyping techniques
• to give you experience in using electronic-based prototyping techniques, including software systems designed for electronic prototyping techniques
• to give you a basic grounding and understanding of React Nativ to develop applications
• to give you experience in the formal evaluation of user interfaces
• to ensure that your design work includes user needs analysis
• to give you experience of user centred design tools, methods, and techniques
• above all, maintain a real-world perspective to applying this knowledge in industry","Course Learning Outcomes
CLO1 : Construct a project plan that is based on user-centred design principles that can be used to carry out activities to design, evaluate and refine user interaction, based on iteration
Course Learning Outcomes
CLO2 : Create user interface evaluation reports (written and oral) that critique user interfaces
Course Learning Outcomes
CLO3 : Develop design skills, primarily using paper for rapid solutions, to consolidate individual designs that demonstrate an understanding of the importance of design decisions and the selection process
Course Learning Outcomes
CLO4 : Develop design skills, to construct high-fidelity prototypes based on previous paper-based design activities
Course Learning Outcomes
CLO5 : Prepare and carry out usability walkthroughs to evaluate both paper and electronic based designs for their usability, used to then create structured reports that quantify the issues discovered from the evaluation activities
Course Learning Outcomes
CLO6 : Develop skills with React Native to implement a prototype into a functioning beta version of an app
Course Learning Outcomes
CLO7 : Critically evaluate current research in the UX domain and apply it to projects
Course Learning Outcomes
CLO8 : Develop an awareness of user-centred design tools, methods, and techniques and maintain a real-world perspective in order to be able to apply this knowledge in industry","Lecture Recording in lieu of live lecture due to Monday public holiday: Information Architecture in Mobile App Design
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Introducing Atomic Design, Creating a Design System
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Mobile Design Principles
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Multi Generational Design and Inclusive Design 
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Personas and Scenarios, User Stories for Requirements, User Story Mapping
Wednesday via Blackboard collaborate: Introduction to React Nativ
Monday live lecture: Prototyping with Figma, Usability Testing and Evaluation recap
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Visual Design in Apps & Colour Theory in Apps
Wednesday via Blackboard collaborate: React Nativ
Recharge week so no lectures.
The course lecture schedule is subject to minor updates.
Monday live lecture: Introduction and Logistics & Introduction to Design Thinking
Wednesday via Blackboard collaborate: Design Thinking continued
The course schedule is subjec to minor variations.  Please check Moodle for final details.
Monday live lectures (12 to 2pm) are in Ainsworth G02 and you are all encouraged to attend the lectures in person.
Wednesday live lectures (11am to 1pm) are online via Blackboard collaborate and are designed for you to interact in real-time with our industry expert.
This time will be used for demos and project work.","General Schedule Information
Tutorial attendance is mandatory for assignment grading purposes.  There are multiple weeks in which assignment content will be graded.  Please refer to the course schedule and assignment specs available in Moodle for more details.
Lectures begin in week1 and tutorials begin in week2.  Please ensure you attend your enrolled tutorial.  Most tutorials are Face to Face but there is one online class, for which we will be using Blackboard collaborate. ",2023.0,T3,2023-10-24 00:15:33,"COMP4511 is a hands-on project-based course designed to build and solidify the basic skills you acquired in COMP3511/9511. Students will be required to build their interface at least three times (remember the process is iterative!), once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.
The process doesn't start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?
As you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the object-oriented design. You will build the code implementation iterating through both your object-oriented design and your user interface design.
The real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect - not what you as a programmer expect. That's the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.
We teach a process that is relevant to industry. Preparing students for the real-world challenges of user interface design. And face it, user interfaces are everywhere.
The process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?
COMP3511 Human Computer Interaction is a pre-requisite and you need a mark of 70 or better (you are expected to start design, prototyping and designing usability tests in the first week). You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher. This course aims to develop your skills in designing and creating a basic user interface.  UI design that meets the users needs is an important part of the Design process and will equip you with skills to create more usable interfaces in industry. More specifically, the course aims to:
• to develop your skills in the area of user-centred design, with a focus on mobile design
• to develop and implement techniques/heuristics necessary to evaluate systems for their usability
• to develop further your capability of executing a user-centred design process
• to give you experience in using paper-based design techniques, including software systems designed for paper-based prototyping techniques
• to give you experience in using electronic-based prototyping techniques, including software systems designed for electronic prototyping techniques
• to give you a basic grounding and understanding of React Nativ to develop applications
• to give you experience in the formal evaluation of user interfaces
• to ensure that your design work includes user needs analysis
• to give you experience of user centred design tools, methods, and techniques
• above all, maintain a real-world perspective to applying this knowledge in industry Course Learning Outcomes
CLO1 : Construct a project plan that is based on user-centred design principles that can be used to carry out activities to design, evaluate and refine user interaction, based on iteration
Course Learning Outcomes
CLO2 : Create user interface evaluation reports (written and oral) that critique user interfaces
Course Learning Outcomes
CLO3 : Develop design skills, primarily using paper for rapid solutions, to consolidate individual designs that demonstrate an understanding of the importance of design decisions and the selection process
Course Learning Outcomes
CLO4 : Develop design skills, to construct high-fidelity prototypes based on previous paper-based design activities
Course Learning Outcomes
CLO5 : Prepare and carry out usability walkthroughs to evaluate both paper and electronic based designs for their usability, used to then create structured reports that quantify the issues discovered from the evaluation activities
Course Learning Outcomes
CLO6 : Develop skills with React Native to implement a prototype into a functioning beta version of an app
Course Learning Outcomes
CLO7 : Critically evaluate current research in the UX domain and apply it to projects
Course Learning Outcomes
CLO8 : Develop an awareness of user-centred design tools, methods, and techniques and maintain a real-world perspective in order to be able to apply this knowledge in industry Lecture Recording in lieu of live lecture due to Monday public holiday: Information Architecture in Mobile App Design
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Introducing Atomic Design, Creating a Design System
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Mobile Design Principles
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Multi Generational Design and Inclusive Design 
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Personas and Scenarios, User Stories for Requirements, User Story Mapping
Wednesday via Blackboard collaborate: Introduction to React Nativ
Monday live lecture: Prototyping with Figma, Usability Testing and Evaluation recap
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Visual Design in Apps & Colour Theory in Apps
Wednesday via Blackboard collaborate: React Nativ
Recharge week so no lectures.
The course lecture schedule is subject to minor updates.
Monday live lecture: Introduction and Logistics & Introduction to Design Thinking
Wednesday via Blackboard collaborate: Design Thinking continued
The course schedule is subjec to minor variations.  Please check Moodle for final details.
Monday live lectures (12 to 2pm) are in Ainsworth G02 and you are all encouraged to attend the lectures in person.
Wednesday live lectures (11am to 1pm) are online via Blackboard collaborate and are designed for you to interact in real-time with our industry expert.
This time will be used for demos and project work. General Schedule Information
Tutorial attendance is mandatory for assignment grading purposes.  There are multiple weeks in which assignment content will be graded.  Please refer to the course schedule and assignment specs available in Moodle for more details.
Lectures begin in week1 and tutorials begin in week2.  Please ensure you attend your enrolled tutorial.  Most tutorials are Face to Face but there is one online class, for which we will be using Blackboard collaborate. ","{'resilience': 18, 'basic skills': 6, 'critical thinking': 24, 'communication': 18, 'reading': 6, 'problem solving': 6, 'leadership': 6, 'adaptability': 12, 'mobile device abilities': 6}","{'surface': 5, 'tool design': 5, 'information architecture': 5, 'multi generational': 5, 'prototype': 5, 'user graphical interface': 5, 'person': 5, 'project plan': 5, 'logistics': 5, 'analysis need': 5, 'audience target': 5, 'software system': 5, 'development process': 5, 'user story': 5, 'user interface': 5, 'designing graphical': 5, 'mobile': 5, 'app mobile': 5, 'orient design object': 5, 'workflows': 5}","['Prototyping with Figma Usability Testing and Evaluation recap', 'Multi Generational Design and Inclusive Design', 'Introducing Atomic Design Creating a Design System', 'Personas and Scenarios User Stories for Requirements User Story Mapping', 'Visual Design in Apps  Colour Theory in Apps', 'Recharge week so no lectures', 'Mobile Design Principles', 'Blackboard collaborate React Native', 'Blackboard collaborate Design Thinking continued']"
COMP4920,Professional Issues and Ethics in Information Technology,undergraduate,"In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.",To give students an overview of contemporary ethics of computer science,"Course Learning Outcomes
CLO1 : Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts.
Course Learning Outcomes
CLO2 : Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances.
Course Learning Outcomes
CLO3 : Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general.
Course Learning Outcomes
CLO4 : Discuss ethical dilemmas around specific technological case studies.
Course Learning Outcomes
CLO5 : Recognise ethical issues and pitfalls in the professional practice of developing novel technologies, including AI (e.g. fairness, transparency, accountability), and learn about existing efforts to mitigate these issues.",,"General Schedule Information
Week 1 - Introduction, and Meta-ethics - hacking moral ontology
Week 2 - Utilitarian ethics and evidence, deontological ethics and computability
Week 3 - Ethics in Computing and Value Alignment
Week 4 - Trust, Automation, and Value Sensitive Design
Week 5 - Virtue ethics and digital identity
Week 6 - FLEX WEEK
Week 7 - Bias, fairness, and explainability
Week 8 - Ethics Washing
Week 9 - Environment, extractivism, and power
Week 10- Reflections",2023.0,T3,2023-10-24 00:19:21,"In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general. To give students an overview of contemporary ethics of computer science Course Learning Outcomes
CLO1 : Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts.
Course Learning Outcomes
CLO2 : Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances.
Course Learning Outcomes
CLO3 : Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general.
Course Learning Outcomes
CLO4 : Discuss ethical dilemmas around specific technological case studies.
Course Learning Outcomes
CLO5 : Recognise ethical issues and pitfalls in the professional practice of developing novel technologies, including AI (e.g. fairness, transparency, accountability), and learn about existing efforts to mitigate these issues.  General Schedule Information
Week 1 - Introduction, and Meta-ethics - hacking moral ontology
Week 2 - Utilitarian ethics and evidence, deontological ethics and computability
Week 3 - Ethics in Computing and Value Alignment
Week 4 - Trust, Automation, and Value Sensitive Design
Week 5 - Virtue ethics and digital identity
Week 6 - FLEX WEEK
Week 7 - Bias, fairness, and explainability
Week 8 - Ethics Washing
Week 9 - Environment, extractivism, and power
Week 10- Reflections","{'resilience': 25, 'articulate': 12, 'ethical responsibility': 12, 'adaptability': 25, 'critical thinking': 25}","{'ontology': 14, 'research ethics': 14, 'algorithmic': 14, 'transparency': 14, 'claims': 14, 'debates': 14, 'practice professional': 14}","['Trust Automation and Value Sensitive Design', 'Ethics in Computing and Value Alignment', 'Utilitarian ethics and evidence deontological ethics and computability', 'Environment extractivism and power', 'Reflections', 'Virtue ethics and digital identity', 'Ethics Washing', 'Bias fairness and explainability']"
COMP4951,Research Thesis A,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.","Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication",,,2023.0,T3,2023-10-24 00:23:11,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C. This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience. Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication  ","{'innovatively': 12, 'problem solving': 12, 'resilience': 12, 'communication': 12, 'critical thinking': 25, 'adaptability': 12, 'social networking': 12}","{'research development and': 25, 'environment development': 25, 'specific design': 25, 'ended open': 25}",No Information about Topics
COMP4952,Research Thesis B,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience.","Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication",,,2023.0,T3,2023-10-24 00:26:59,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C. This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience. Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication  ","{'innovatively': 12, 'problem solving': 12, 'resilience': 12, 'communication': 12, 'critical thinking': 25, 'adaptability': 12, 'social networking': 12}","{'research development and': 25, 'environment development': 25, 'specific design': 25, 'ended open': 25}",No Information about Topics
COMP4953,Research Thesis C,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.","Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication",,,2023.0,T3,2023-10-24 00:30:48,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C. This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work. Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication  ","{'innovatively': 11, 'problem solving': 11, 'resilience': 11, 'communication': 11, 'critical thinking': 33, 'adaptability': 11, 'social networking': 11}","{'evaluate project': 20, 'research development and': 20, 'environment development': 20, 'specific design': 20, 'ended open': 20}",No Information about Topics
COMP4961,Computer Science Thesis A,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
 ","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.","Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication",,,2023.0,T3,2023-10-24 00:34:37,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
  This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience. Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication  ","{'innovatively': 12, 'problem solving': 12, 'resilience': 12, 'communication': 12, 'critical thinking': 25, 'adaptability': 12, 'social networking': 12}","{'research development and': 25, 'environment development': 25, 'specific design': 25, 'ended open': 25}",No Information about Topics
COMP4962,Computer Science Thesis B,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.",,"Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication",,,2023.0,T3,2023-10-24 00:39:06,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.  Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication  ","{'innovatively': 12, 'problem solving': 12, 'resilience': 12, 'communication': 12, 'critical thinking': 25, 'adaptability': 12, 'social networking': 12}","{'research development and': 25, 'environment development': 25, 'specific design': 25, 'ended open': 25}",No Information about Topics
COMP4963,Computer Science Thesis C,undergraduate,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.","Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication","Seminar on ""How to write a good thesis?"" on Friday 11am,",,2023.0,T3,2023-10-24 00:42:55,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C. This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work. Course Learning Outcomes
CLO1 : Carry out a project following industry and professional engineering standards and methods
Course Learning Outcomes
CLO2 : Critically reflect on a specialist body of knowledge related to a topic
Course Learning Outcomes
CLO3 : Apply scientific and engineering methods to solve an engineering problem
Course Learning Outcomes
CLO4 : Analyse data objectively using quantitative and mathematical methods
Course Learning Outcomes
CLO5 : Demonstrate oral and written communication in professional and lay domains
Course Learning Outcomes
CLO6 : Complete complex tasks through effective planning and communication Seminar on ""How to write a good thesis?"" on Friday 11am, ","{'innovatively': 11, 'problem solving': 11, 'resilience': 11, 'communication': 11, 'critical thinking': 33, 'adaptability': 11, 'social networking': 11}","{'evaluate project': 20, 'research development and': 20, 'environment development': 20, 'specific design': 20, 'ended open': 20}",No Information about Topics
COMP6080,Web Front-End Programming,undergraduate,"COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course.","COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:
Postgraduate students may need to familiarise themselves with GIT, if not already familiar.","Course Learning Outcomes
CLO1 : Able to apply Javascript semantics to design, construct, test and debug programs holistically
Course Learning Outcomes
CLO2 : Construct programs for web-front end with HTML, CSS, and DOM manipulation
Course Learning Outcomes
CLO3 : Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Course Learning Outcomes
CLO4 : Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Course Learning Outcomes
CLO5 : Design and build interfaces that focus on best user experience and accessible design practices","Course Overview
Intro to Git
HTML Fundamentals
Image Types
CSS Rules
More Tags
CSS Formatting
CSS Layouts
Flexbox
SVGs
Pre-processors
zindex
CSS Showcase
Fonts
Demo: Ass2 - Async & Planning
UI Fundamentals
Good & Bad UI 1
Good & Bad UI 2
Perceivability
Operabilitity
Understandability
Robustness
Demo: HTML/CSS Page
Mobile CSS
Using CSS Frameworks
CSS Grids
Dev Tools
Javascript Intro (compared to C)
Javascript Language Features & Syntax
Javascript Advanced Functions
The Javascript Ecosystem
Node Package Manager
NPM Advanced
Demo: Javascript - Browser
Events & Callbacks
Promises
Await / Async
AJAX
XMLHttpRequest (XHR)
Fetch
JSON & Data-interchange formats
Understand HTTP Servers
Demo: Javascript - NodeJS
Introduction
DOM
Events
Javascript Closures
Forms
Local Storage
Demo: ReactJS Further
Introduction
Component Testing
UI Testing
UI Testing (Demo)
Demo: ReactJS in Ass3
Linting
Routing & SPAs
CSS Frameworks
useContext
State management
Class components
Usability testing
Figma & Component Libraries
Pre-rendering
Final Exam Overview
Term Break (Flex Week)
Using Git in pairs
Introduction
Basic ""Global CSS"" Usage
Lifescycle
Transpilation
useState hook
Demo: ReactJS Intro & A11y
useEffect hook
Using Fetch & Hooks
Working with Multiple Files
Components & Props
Before you code",,2023.0,T3,2023-10-24 00:46:45,"COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course. COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:
Postgraduate students may need to familiarise themselves with GIT, if not already familiar. Course Learning Outcomes
CLO1 : Able to apply Javascript semantics to design, construct, test and debug programs holistically
Course Learning Outcomes
CLO2 : Construct programs for web-front end with HTML, CSS, and DOM manipulation
Course Learning Outcomes
CLO3 : Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Course Learning Outcomes
CLO4 : Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Course Learning Outcomes
CLO5 : Design and build interfaces that focus on best user experience and accessible design practices Course Overview
Intro to Git
HTML Fundamentals
Image Types
CSS Rules
More Tags
CSS Formatting
CSS Layouts
Flexbox
SVGs
Pre-processors
zindex
CSS Showcase
Fonts
Demo: Ass2 - Async & Planning
UI Fundamentals
Good & Bad UI 1
Good & Bad UI 2
Perceivability
Operabilitity
Understandability
Robustness
Demo: HTML/CSS Page
Mobile CSS
Using CSS Frameworks
CSS Grids
Dev Tools
Javascript Intro (compared to C)
Javascript Language Features & Syntax
Javascript Advanced Functions
The Javascript Ecosystem
Node Package Manager
NPM Advanced
Demo: Javascript - Browser
Events & Callbacks
Promises
Await / Async
AJAX
XMLHttpRequest (XHR)
Fetch
JSON & Data-interchange formats
Understand HTTP Servers
Demo: Javascript - NodeJS
Introduction
DOM
Events
Javascript Closures
Forms
Local Storage
Demo: ReactJS Further
Introduction
Component Testing
UI Testing
UI Testing (Demo)
Demo: ReactJS in Ass3
Linting
Routing & SPAs
CSS Frameworks
useContext
State management
Class components
Usability testing
Figma & Component Libraries
Pre-rendering
Final Exam Overview
Term Break (Flex Week)
Using Git in pairs
Introduction
Basic ""Global CSS"" Usage
Lifescycle
Transpilation
useState hook
Demo: ReactJS Intro & A11y
useEffect hook
Using Fetch & Hooks
Working with Multiple Files
Components & Props
Before you code ","{'critical thinking': 11, 'time management': 22, 'teamwork': 11, 'problem solving': 11, 'leadership': 11, 'adaptability': 11, 'resilience': 11, 'reading': 11}","{'canva': 5, 'mobile page': 5, 'aggregate': 5, 'accessibility network': 5, 'hook': 5, 'semantics': 5, 'end front': 5, 'flexbox': 5, 'git': 5, 'debug': 5, 'ajax': 5, 'data formats': 5, 'HTML': 5, 'servers http': 5, 'libraries component': 5, 'javascript': 5, 'json': 5, 'level higher': 5, 'xmlhttprequest': 5}","['Understandability', 'CSS Showcase', 'Demo Javascript  Browser', 'useContext', 'DOM', 'Transpilation', 'Working with Multiple Files', 'NPM Advanced', 'useState hook', 'Flexbox', 'CSS Frameworks', 'Using Git in pairs', 'Demo Ass2  Async  Planning', 'CSS Grids', 'Prerendering', 'Demo ReactJS Further', 'Perceivability', 'Operabilitity', 'AJAX', 'Usability testing', 'Demo Javascript  NodeJS', 'Javascript Intro compared to C', 'Before you code', 'CSS Formatting', 'Component Testing', 'UI Testing Demo', 'Linting', 'Components  Props', 'Demo ReactJS in Ass3', 'State management', 'Dev Tools', 'Good  Bad UI 1', 'Using CSS Frameworks', 'Preprocessors', 'Node Package Manager', 'Figma  Component Libraries', 'More Tags', 'Using Fetch  Hooks', 'CSS Layouts', 'SVGs', 'Forms', 'Demo HTMLCSS Page', 'Good  Bad UI 2', 'Robustness', 'Understand HTTP Servers', 'Fetch', 'Javascript Closures', 'Local Storage', 'UI Testing', 'Routing  SPAs', 'useEffect hook', 'Promises', 'UI Fundamentals', 'Fonts', 'HTML Fundamentals', 'CSS Rules', 'Mobile CSS', 'The Javascript Ecosystem', 'Await  Async', 'Javascript Language Features  Syntax', 'Lifescycle', 'Events', 'Class components', 'JSON  Datainterchange formats', 'XMLHttpRequest XHR', 'Javascript Advanced Functions', 'Demo ReactJS Intro  A11y', 'Events  Callbacks', 'Basic Global CSS Usage', 'Image Types', 'zindex']"
COMP6441,Security Engineering and Cyber Security,undergraduate,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background.  We concentrate on analytical skills and the engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Extended"" version of this course (COMP6841) for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling.  CSE students will probably choose to take the extended version but are not required to.  You can transfer between the courses before the census date if you can't make up your mind in advance which is better for you.
The precise topics covered in this introductory course change somewhat from year to year to keep the coverage up-to-date and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.
After completing either of these courses (COMP6441 or COMP6841) you can proceed to the other UNSW Computing Security Courses covering topics in:
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Cloud Security
Professional issues and leadership in security
Web application security
Fun special projects
Masterclass","There are 4 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Crypto literacy
4. Security engineering professional skills","Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this","Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week","General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
Wednesday 6-8pm applied security seminar ",2023.0,T3,2023-10-24 00:50:35,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background.  We concentrate on analytical skills and the engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Extended"" version of this course (COMP6841) for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling.  CSE students will probably choose to take the extended version but are not required to.  You can transfer between the courses before the census date if you can't make up your mind in advance which is better for you.
The precise topics covered in this introductory course change somewhat from year to year to keep the coverage up-to-date and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.
After completing either of these courses (COMP6441 or COMP6841) you can proceed to the other UNSW Computing Security Courses covering topics in:
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Cloud Security
Professional issues and leadership in security
Web application security
Fun special projects
Masterclass There are 4 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Crypto literacy
4. Security engineering professional skills Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
Wednesday 6-8pm applied security seminar ","{'resilience': 12, 'communication': 12, 'leadership': 6, 'critical thinking': 24, 'adaptability': 18, 'teamwork': 12, 'problem solving': 6, 'time management': 6, 'social networking': 6}","{'directed self': 5, 'design security': 5, 'analysis malware': 5, 'engineer security': 5, 'web security application': 5, 'cybercrime': 5, 'strings format': 5, 'security computing': 5, 'digital forensic': 5, 'physical': 5, 'cryptanalysis': 5, 'reverse engineering': 5, 'rootkits': 5, 'analytical': 5, 'cloud security': 5, 'buffer overflow': 5, 'ciphers': 5, 'cross site': 5, 'randomness': 5, 'corruption memory': 5, 'response incident': 5, 'control security': 5}","['Nation States', 'Asymmetric Ciphers', 'Engineering Security', 'Data', 'Communication and Change', 'Command and Control Security by Design', 'Protocols I  Web', 'Privacy', 'International dimensions', 'Integrity', 'Risk + Trust', 'Secrets', 'Surveillance digital identity', 'Cybercrime', 'Measuring Modern Ciphers', 'All Elections', 'The role of law in regulation for cyber security', 'Regulators', 'Humans', 'Cyberfraud', 'Critical infrastructure', 'Legal obligations incl secretkeeping', 'Just Culture Normal Accidents', 'Insiders', 'Planning Authentication']"
COMP6447,System and Software Security Assessment,undergraduate,"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.
Students from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.
The course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.
There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.
Students need a keen, devious and analytical mind.
To get the most from this course you will need to engage in independent study and act as a self-directed learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.
Seek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity.",The course aims to,"Course Learning Outcomes
CLO1 : Have a knowledge of the principle elements of offensive cyber security (such as vulnerability classes, source code auditing, security bugs, memory corruption, numeric overflows, heap exploitation and return oriented programming)
Course Learning Outcomes
CLO2 : Recognise and explain how these elements can be exploited by attackers, their characterising features, weaknesses and countermeasures
Course Learning Outcomes
CLO3 : Given a system, be able to identify vulnerabilities and design and implement reliable exploits
Course Learning Outcomes
CLO4 : Given a system, be able to identify vulnerabilities and design and implement reliable countermeasures to prevent successful exploitation
Course Learning Outcomes
CLO5 : Have an understanding of the key legal, ethical, and professional issues of offensive-defence; and to be able to apply this understanding to design and conduct professional offensive-defence operations","Buffer Overflows
Stack Canaries
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Format Strings
Format Strings
Countermeasures - ASLR, PIE
Format Strings
How to defeat ASLR, PIE
Hacking in the Real World
Harder Challenges
Harder ROP + Revision
Harder return oriented programming - pivot
Heap Exploitation
How to write shellcode
Advanced Reverse Engineering
Learn Pwntools
Memory Fundamentals
History of Hacking
Return Oriented Programming
Return oriented programming
Review of mid-term exam
Revision
Shellcode
Shellcode
Reverse Engineering
Source Code Auditing
Fuzzers
Source Code Auditing
Harder Binaries
Tooling
Environment Setup","General Schedule Information
Technical security is best learned by practice, and labs, wargames, and the project are critical components of the course. These allow students to practice design and implementation skills, and to develop teamwork skills. The project will also assist in developing your ability to reflect on your own work.
Lectures will be split between discussion of concepts, discussion of practical work (and practical demonstrations), revision work, and extension lectures. Study material will be available in both video and note form before each lecture.",2023.0,T3,2023-10-24 00:54:24,"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.
Students from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.
The course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.
There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.
Students need a keen, devious and analytical mind.
To get the most from this course you will need to engage in independent study and act as a self-directed learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.
Seek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity. The course aims to Course Learning Outcomes
CLO1 : Have a knowledge of the principle elements of offensive cyber security (such as vulnerability classes, source code auditing, security bugs, memory corruption, numeric overflows, heap exploitation and return oriented programming)
Course Learning Outcomes
CLO2 : Recognise and explain how these elements can be exploited by attackers, their characterising features, weaknesses and countermeasures
Course Learning Outcomes
CLO3 : Given a system, be able to identify vulnerabilities and design and implement reliable exploits
Course Learning Outcomes
CLO4 : Given a system, be able to identify vulnerabilities and design and implement reliable countermeasures to prevent successful exploitation
Course Learning Outcomes
CLO5 : Have an understanding of the key legal, ethical, and professional issues of offensive-defence; and to be able to apply this understanding to design and conduct professional offensive-defence operations Buffer Overflows
Stack Canaries
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Format Strings
Format Strings
Countermeasures - ASLR, PIE
Format Strings
How to defeat ASLR, PIE
Hacking in the Real World
Harder Challenges
Harder ROP + Revision
Harder return oriented programming - pivot
Heap Exploitation
How to write shellcode
Advanced Reverse Engineering
Learn Pwntools
Memory Fundamentals
History of Hacking
Return Oriented Programming
Return oriented programming
Review of mid-term exam
Revision
Shellcode
Shellcode
Reverse Engineering
Source Code Auditing
Fuzzers
Source Code Auditing
Harder Binaries
Tooling
Environment Setup General Schedule Information
Technical security is best learned by practice, and labs, wargames, and the project are critical components of the course. These allow students to practice design and implementation skills, and to develop teamwork skills. The project will also assist in developing your ability to reflect on your own work.
Lectures will be split between discussion of concepts, discussion of practical work (and practical demonstrations), revision work, and extension lectures. Study material will be available in both video and note form before each lecture.","{'teamwork': 12, 'critical thinking': 25, 'problem solving': 12, 'adaptability': 25, 'resilience': 12, 'social networking': 12}","{'directed self': 7, 'study independent': 7, 'strings format': 7, 'shellcode': 7, 'software bugs': 7, 'reverse engineering': 7, 'analytical': 7, 'buffer overflow': 7, 'code source': 7, 'security software': 7, 'vulnerabilities': 7, 'act': 7, 'oriented programming': 7, 'corruption memory': 7, 'exploited': 7}","['Buffer overflows', 'Return oriented programming', 'Heap Exploitation', 'Harder Challenges', 'Reverse Engineering', 'Stack Canaries', 'Buffer Overflows', 'Intro to Reverse Engineering', 'Hacking in the Real World', 'Countermeasures  ASLR PIE', 'Fuzzers', 'Stack canaries', 'Harder ROP + Revision', 'Tooling', 'Harder Binaries', 'How to write shellcode', 'Return Oriented Programming', 'Memory Fundamentals', 'Advanced Reverse Engineering', 'Source Code Auditing', 'Harder return oriented programming  pivot', 'How to defeat ASLR PIE', 'Format Strings', 'Learn Pwntools', 'Environment Setup', 'History of Hacking', 'Shellcode']"
COMP6714,Information Retrieval and Web Search,undergraduate,"Information retrieval (IR) is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.
This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:
Information Retrieval:
Web Search:
The lecture materials will be complemented by a non-programming assignment and a programming project.","This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval, including its manifestation as Web Search. At the end of the course students will have a solid understanding of IR, which will give them the capability to conduct better searches in large document collections, or to build systems to do such searching.
The course is an advanced elective for both undergraduate and postgraduate students.","Course Learning Outcomes
CLO1 : Analyze the whole process of information retrieval and search engines
Course Learning Outcomes
CLO2 : Apply various document and retrieval models in information retrieval
Course Learning Outcomes
CLO3 : Use various indexing and query processing techniques and their variants
Course Learning Outcomes
CLO4 : Develop solutions for real problems using existing IR technologies
Course Learning Outcomes
CLO5 : Discuss the past, present and future of information retrieval and search engine technologies","Compression
Crawling
Evaluation
Index Construction
Introduction, Boolean Retrieval
Link Analysis
Optional Topics; Course Revision
Preprocessing
Vector Space Model","General Schedule Information
The course schedule is an approximate guide to the sequence of topics in this course. It is subject to change as the term progresses.",2023.0,T3,2023-10-24 00:58:20,"Information retrieval (IR) is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.
This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:
Information Retrieval:
Web Search:
The lecture materials will be complemented by a non-programming assignment and a programming project. This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval, including its manifestation as Web Search. At the end of the course students will have a solid understanding of IR, which will give them the capability to conduct better searches in large document collections, or to build systems to do such searching.
The course is an advanced elective for both undergraduate and postgraduate students. Course Learning Outcomes
CLO1 : Analyze the whole process of information retrieval and search engines
Course Learning Outcomes
CLO2 : Apply various document and retrieval models in information retrieval
Course Learning Outcomes
CLO3 : Use various indexing and query processing techniques and their variants
Course Learning Outcomes
CLO4 : Develop solutions for real problems using existing IR technologies
Course Learning Outcomes
CLO5 : Discuss the past, present and future of information retrieval and search engine technologies Compression
Crawling
Evaluation
Index Construction
Introduction, Boolean Retrieval
Link Analysis
Optional Topics; Course Revision
Preprocessing
Vector Space Model General Schedule Information
The course schedule is an approximate guide to the sequence of topics in this course. It is subject to change as the term progresses.","{'resilience': 50, 'communication': 25, 'problem solving': 25}","{'web system': 10, 'algorithmic': 10, 'engine search': 10, 'information retrieval': 10, 'link analysis': 10, 'space vector': 10, 'index': 10, 'general model': 10, 'build systems': 10, 'web search': 10}","['Index Construction', 'Vector Space Model', 'Crawling', 'Evaluation', 'Link Analysis', 'Compression', 'Preprocessing']"
COMP6841,Extended Security Engineering and Cyber Security,undergraduate,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security.  We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling.  The course provides an introduction to applied cyber security, as well as analytical skills and taking an engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Core"" version of this course (COMP6441).  CSE students will probably choose to take this Extended course rather than the core course, but are not required to.  You can transfer between these two associated courses before the census date if you can't make up your mind in advance which is better for you.
This extended course is the core course plus additional applied technical material.
After completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:
The precise topics covered in this course will change from year to year to keep the coverage up-to-date and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporary security, a good understanding of the current state of the field, and have begun to think like a security engineer.
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Professional issues and leadership in security
Web application security
Special projects
Masterclass","There are 5 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Cryptographic literacy
4. Applied security technical skills (introductory level)
5. Security engineering professional skills","Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this
Course Learning Outcomes
CLO8 : explain the main classes of memory corruption vulnerabilities and the relative strengths and weaknesses of currently deployed countermeasures
Course Learning Outcomes
CLO9 : successfully attack common vulnerabilities in web based systems and binaries","Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week","General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Seminar (not recorded, attend in person) : Wednesday 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
 ",2023.0,T3,2023-10-24 01:02:13,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security.  We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling.  The course provides an introduction to applied cyber security, as well as analytical skills and taking an engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Core"" version of this course (COMP6441).  CSE students will probably choose to take this Extended course rather than the core course, but are not required to.  You can transfer between these two associated courses before the census date if you can't make up your mind in advance which is better for you.
This extended course is the core course plus additional applied technical material.
After completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:
The precise topics covered in this course will change from year to year to keep the coverage up-to-date and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporary security, a good understanding of the current state of the field, and have begun to think like a security engineer.
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Professional issues and leadership in security
Web application security
Special projects
Masterclass There are 5 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Cryptographic literacy
4. Applied security technical skills (introductory level)
5. Security engineering professional skills Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this
Course Learning Outcomes
CLO8 : explain the main classes of memory corruption vulnerabilities and the relative strengths and weaknesses of currently deployed countermeasures
Course Learning Outcomes
CLO9 : successfully attack common vulnerabilities in web based systems and binaries Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Seminar (not recorded, attend in person) : Wednesday 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
 ","{'resilience': 12, 'communication': 12, 'leadership': 6, 'critical thinking': 25, 'adaptability': 19, 'teamwork': 12, 'time management': 6, 'social networking': 6}","{'directed self': 4, 'design security': 4, 'analysis malware': 4, 'engineer security': 4, 'web security application': 4, 'person': 4, 'cybercrime': 4, 'strings format': 4, 'security computing': 4, 'digital forensic': 4, 'physical': 4, 'cryptanalysis': 4, 'reverse engineering': 4, 'based systems': 4, 'rootkits': 4, 'analytical': 4, 'buffer overflow': 4, 'ciphers': 4, 'cross site': 4, 'vulnerabilities': 4, 'randomness': 4, 'corruption memory': 4, 'response incident': 4, 'control security': 4}","['Nation States', 'Asymmetric Ciphers', 'Engineering Security', 'Data', 'Communication and Change', 'Command and Control Security by Design', 'Protocols I  Web', 'Privacy', 'International dimensions', 'Integrity', 'Risk + Trust', 'Secrets', 'Surveillance digital identity', 'Cybercrime', 'Measuring Modern Ciphers', 'All Elections', 'The role of law in regulation for cyber security', 'Regulators', 'Humans', 'Cyberfraud', 'Critical infrastructure', 'Legal obligations incl secretkeeping', 'Just Culture Normal Accidents', 'Insiders', 'Planning Authentication']"
COMP6991,Solving Modern Programming Problems with Rust,undergraduate,"This course aims to provide commentary and critique on the practice of programming, and the tooling used to program (primarily programming languages themselves). A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, meta-programming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be well-considered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.
While proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.
Per the advice of previous students, COMP6991 is a difficult course with a considerable workload. Please reach out to us either on the course forum or the course email if you're not sure whether COMP6991 is right for you.","To encourage students to explore new perspectives in programming, particularly with respect to program safety, rigour, efficiency and productivity. After this course, students should be able to design and implement good programs in Rust and improve their design and reasoning skills in programming languages other than Rust ","Course Learning Outcomes
CLO1 : Explain Rust's primary goals (safety, efficiency, productivity) and their motivations
Course Learning Outcomes
CLO2 : Develop programming solutions to substantial problems using Rust
Course Learning Outcomes
CLO3 : Produce effective program designs, and write unit tests and documentation tests to validate Rust programs
Course Learning Outcomes
CLO4 : Create well-considered, high performance, low cost abstractions to solve problems
Course Learning Outcomes
CLO5 : Reason about software through static guarantees to create robust interfaces and produce correct behaviour
Course Learning Outcomes
CLO6 : Manage Rust projects using the Rustup toolchain and Cargo package manager","Borrowing, lifetimes
Collections, error handling
Concurrency, parallelism
Course intro, toolchain setup
Documentation, testing, modularity
Flexibility week
Functions, meta-programming
Polymorphism
Rust intro, algebraic types
Unsafe, community crates
Wrap up, exam overview (No exercises)","General Schedule Information
2x 2-hour lectures weeks 1-5,7-10
1x 2-hour workshop weeks 1-5,7-10",2023.0,T3,2023-10-24 01:06:03,"This course aims to provide commentary and critique on the practice of programming, and the tooling used to program (primarily programming languages themselves). A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, meta-programming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be well-considered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.
While proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.
Per the advice of previous students, COMP6991 is a difficult course with a considerable workload. Please reach out to us either on the course forum or the course email if you're not sure whether COMP6991 is right for you. To encourage students to explore new perspectives in programming, particularly with respect to program safety, rigour, efficiency and productivity. After this course, students should be able to design and implement good programs in Rust and improve their design and reasoning skills in programming languages other than Rust  Course Learning Outcomes
CLO1 : Explain Rust's primary goals (safety, efficiency, productivity) and their motivations
Course Learning Outcomes
CLO2 : Develop programming solutions to substantial problems using Rust
Course Learning Outcomes
CLO3 : Produce effective program designs, and write unit tests and documentation tests to validate Rust programs
Course Learning Outcomes
CLO4 : Create well-considered, high performance, low cost abstractions to solve problems
Course Learning Outcomes
CLO5 : Reason about software through static guarantees to create robust interfaces and produce correct behaviour
Course Learning Outcomes
CLO6 : Manage Rust projects using the Rustup toolchain and Cargo package manager Borrowing, lifetimes
Collections, error handling
Concurrency, parallelism
Course intro, toolchain setup
Documentation, testing, modularity
Flexibility week
Functions, meta-programming
Polymorphism
Rust intro, algebraic types
Unsafe, community crates
Wrap up, exam overview (No exercises) General Schedule Information
2x 2-hour lectures weeks 1-5,7-10
1x 2-hour workshop weeks 1-5,7-10","{'problem solving': 20, 'communication': 10, 'critical thinking': 20, 'reading': 30, 'time management': 10, 'resilience': 10}","{'polymorphism': 11, 'modularity': 11, 'programming concept': 11, 'programming languages': 11, 'programming develop': 11, 'program designs': 11, 'algebraic': 11, 'high performance': 11, 'validate': 11}","['Unsafe community crates', 'Documentation testing modularity', 'Rust intro algebraic types', 'Concurrency parallelism', 'Functions metaprogramming', 'Borrowing lifetimes', 'Collections error handling', 'Polymorphism']"
COMP9242,Advanced Operating Systems,undergraduate,"The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.
This course builds upon the basic operating systems course (COMP3231/9201/3891/9283), which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general “systems” space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly sought-after by technology companies and systems researchers.","The course aims to produce future technical leaders in industry and research, it is unapologetically elitist. It develops general “systems skills”, the ability to design, implement and understand a complex software system. It specifically provides a thorough understanding of low-level system software and its interaction with hardware, the trade-offs that determine system performance, techniques to assess performance correctly, and the impact of system design on security.","Course Learning Outcomes
CLO1 : Design and construct low-level operating system code
Course Learning Outcomes
CLO2 : Analyse the performance trade-offs in developing high-performance low-level OS code
Course Learning Outcomes
CLO3 : Understand and be capable of developing OS code inside a variety of OS environments, including monolithic, microkernels, and virtual machines, including device drivers
Course Learning Outcomes
CLO4 : Create benchmarks to evaluate the performance of OSs and application stacks
Course Learning Outcomes
CLO5 : Evaluate research published in the field of operating systems at a level commensurate with their experience",,"General Schedule Information
The authorative lecture schedule (subject to change) is available on the course web site https://www.cse.unsw.edu.au/~cs9242/current/lectures.shtml
An indicative schedule is provided below:
Week 1: Introduction (Microkernels and seL4) , seL4 API and usage
Week 2: Caches (What every OS designer must know), OS Execution Models
Week 3: Why Threads are a Bad Idea (for most purposes), Why Events are a Bad Idea (for high-concurrency servers), Virtual Machines (Introduction and principles)
Week 4: Performance Measurement and Analysis, Real-Time Systems Introduction
Week 5: Unix and Linux Internals, Security Fundamentals
Week 6: – –    Flex week – no lecture    – –    – –
Week 7: Microkernel Design and Implementation (with focus on seL4), Secure Operating Systems Information Leakage (timing channels and speculation)
Week 8: SMP and Locking
Week 9: Multicore Operating Systems
Week 10: Formal verification and seL4, seL4 in the real world, seL4-related research at UNSW, Exam preparation (0.5h)
 ",2023.0,T3,2023-10-24 01:09:50,"The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.
This course builds upon the basic operating systems course (COMP3231/9201/3891/9283), which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general “systems” space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly sought-after by technology companies and systems researchers. The course aims to produce future technical leaders in industry and research, it is unapologetically elitist. It develops general “systems skills”, the ability to design, implement and understand a complex software system. It specifically provides a thorough understanding of low-level system software and its interaction with hardware, the trade-offs that determine system performance, techniques to assess performance correctly, and the impact of system design on security. Course Learning Outcomes
CLO1 : Design and construct low-level operating system code
Course Learning Outcomes
CLO2 : Analyse the performance trade-offs in developing high-performance low-level OS code
Course Learning Outcomes
CLO3 : Understand and be capable of developing OS code inside a variety of OS environments, including monolithic, microkernels, and virtual machines, including device drivers
Course Learning Outcomes
CLO4 : Create benchmarks to evaluate the performance of OSs and application stacks
Course Learning Outcomes
CLO5 : Evaluate research published in the field of operating systems at a level commensurate with their experience  General Schedule Information
The authorative lecture schedule (subject to change) is available on the course web site https://www.cse.unsw.edu.au/~cs9242/current/lectures.shtml
An indicative schedule is provided below:
Week 1: Introduction (Microkernels and seL4) , seL4 API and usage
Week 2: Caches (What every OS designer must know), OS Execution Models
Week 3: Why Threads are a Bad Idea (for most purposes), Why Events are a Bad Idea (for high-concurrency servers), Virtual Machines (Introduction and principles)
Week 4: Performance Measurement and Analysis, Real-Time Systems Introduction
Week 5: Unix and Linux Internals, Security Fundamentals
Week 6: – –    Flex week – no lecture    – –    – –
Week 7: Microkernel Design and Implementation (with focus on seL4), Secure Operating Systems Information Leakage (timing channels and speculation)
Week 8: SMP and Locking
Week 9: Multicore Operating Systems
Week 10: Formal verification and seL4, seL4 in the real world, seL4-related research at UNSW, Exam preparation (0.5h)
 ","{'resilience': 25, 'communication': 12, 'critical thinking': 25, 'time management': 12, 'social networking': 12, 'mobile device abilities': 12}","{'developing systems': 6, 'API': 6, 'SMP': 6, 'unix': 6, 'virtual machine': 6, 'virtual servers': 6, 'techniques performance': 6, 'linux': 6, 'oss': 6, 'benchmarks': 6, 'software system': 6, 'operating system': 6, 'embedded systems': 6, 'performance system': 6, 'high performance': 6, 'monolithic': 6}","['An indicative schedule is provided below', 'Multicore Operating Systems', 'SMP and Locking', 'Unix and Linux Internals Security Fundamentals', 'Caches What every OS designer must know OS Execution Models']"
COMP9301,Cyber Security Project,undergraduate,Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate,This security engineering research project course allows the student to undertake original research in security engineering with guidance from a member of academic staff. The research project is typically undertaken in the second year of your postgraduate degree or final year of undergraduate study. The course will provide students with experience in independently tackling a challenging problem in cyber security.,"Course Learning Outcomes
CLO1 : Graduates will acquire enquiry-based techniques and practice through the completion of a complex cyber security research-based project.
Course Learning Outcomes
CLO2 : Graduates will develop their ability to define, investigate and analyse security engineering problems and develop creative and innovative solutions to these problems.
Course Learning Outcomes
CLO3 : Graduates will develop advanced theory-based knowledge and techniques of cyber security research
Course Learning Outcomes
CLO4 : Graduates will be able to proficiently apply security engineering methods to complex cyber security problem solving.",,"General Schedule Information
Weekly/fornightly meetings with your supervisor.",2023.0,T3,2023-10-24 01:13:40,"Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate This security engineering research project course allows the student to undertake original research in security engineering with guidance from a member of academic staff. The research project is typically undertaken in the second year of your postgraduate degree or final year of undergraduate study. The course will provide students with experience in independently tackling a challenging problem in cyber security. Course Learning Outcomes
CLO1 : Graduates will acquire enquiry-based techniques and practice through the completion of a complex cyber security research-based project.
Course Learning Outcomes
CLO2 : Graduates will develop their ability to define, investigate and analyse security engineering problems and develop creative and innovative solutions to these problems.
Course Learning Outcomes
CLO3 : Graduates will develop advanced theory-based knowledge and techniques of cyber security research
Course Learning Outcomes
CLO4 : Graduates will be able to proficiently apply security engineering methods to complex cyber security problem solving.  General Schedule Information
Weekly/fornightly meetings with your supervisor.","{'supervision': 14, 'problem solving': 14, 'resilience': 14, 'adaptability': 29, 'innovative': 14, 'social networking': 14}","{'research security': 50, 'research engineering': 50}",No Information about Topics
COMP9313,Big Data Management,undergraduate,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items.","This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management.","Course Learning Outcomes
CLO1 : Describe the important characteristics of Big Data
Course Learning Outcomes
CLO2 : Develop an appropriate storage structure for a Big Data repository
Course Learning Outcomes
CLO3 : Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Course Learning Outcomes
CLO4 : Use a high-level query language to manipulate Big Data
Course Learning Outcomes
CLO5 : Develop efficient solutions for analytical problems involving Big Data",,"General Schedule Information
Week 1    Course information + introduction to big data
Week 2    Hadoop MapReduce 1
Week 3    Hadoop MapReduce 2
Week 4    Spark 1 (proj1 due)
Week 5    Spark 2
Week 6    Recess Week
Week 7    Finding Similar Items (proj2 due)
Week 8    Mining Data Streams
Week 9    Graph Data Management
Week 10    NoSQL, HBase, and Hive/Revision and exam preparation (proj3 due)",2023.0,T3,2023-10-24 01:17:38,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items. This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management. Course Learning Outcomes
CLO1 : Describe the important characteristics of Big Data
Course Learning Outcomes
CLO2 : Develop an appropriate storage structure for a Big Data repository
Course Learning Outcomes
CLO3 : Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Course Learning Outcomes
CLO4 : Use a high-level query language to manipulate Big Data
Course Learning Outcomes
CLO5 : Develop efficient solutions for analytical problems involving Big Data  General Schedule Information
Week 1    Course information + introduction to big data
Week 2    Hadoop MapReduce 1
Week 3    Hadoop MapReduce 2
Week 4    Spark 1 (proj1 due)
Week 5    Spark 2
Week 6    Recess Week
Week 7    Finding Similar Items (proj2 due)
Week 8    Mining Data Streams
Week 9    Graph Data Management
Week 10    NoSQL, HBase, and Hive/Revision and exam preparation (proj3 due)","{'time management': 33, 'teamwork': 17, 'problem solving': 17, 'adaptability': 17, 'resilience': 17}","{'analytics': 9, 'datum big': 9, 'level high': 9, 'yarn': 9, 'query language': 9, 'data stream': 9, 'graph': 9, 'mapreduce': 9, 'nosql': 9, 'hive': 9, 'design algorithm': 9}","['Spark 2', 'Hadoop MapReduce 2', 'Hadoop MapReduce 1', 'Mining Data Streams', 'Graph Data Management']"
COMP9418,Advanced Topics in Statistical Machine Learning,undergraduate,"This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others.","Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.
 ","Course Learning Outcomes
CLO1 : Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Course Learning Outcomes
CLO2 : Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm
Course Learning Outcomes
CLO3 : Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Course Learning Outcomes
CLO4 : Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Course Learning Outcomes
CLO5 : Understand and apply basic methods for structured prediction","Assessment 1 description released
Assignment 1 due
Assignment 2 description released
Assignment 2 due
Bayesian networks
Bayesian networks representation and semantics [Chs. 4 and 5]
Belief propagation [Ch. 14]. Approximate inference by Sampling [Ch. 15]
Belief propagation and sampling
Course overview [Ch. 1], propositional logic [Ch. 2] and probability calculus [Ch. 3]
Exact inference [Ch. 6]. Bayesian networks as classifiers
Factor elimination and jointrees
Flexibility Week
Gaussian Bayesian Networks [Koller Ch. 7, 14.1 & 14.2]
Gaussian Bayesian networks
Graph representation, traversal and common algorithms
Learning parameters and graph structure [Ch. 17]
MAP inference [Ch. 10]. Markov networks
Markov chains and hidden Markov models
Markov networks
Probability calculus and factor implementation
Quiz 1 is due
Quiz 2 is due
Quiz 3 is due
Quiz 4 is due
Quiz 5 is due
Quiz 7 is due
Quiz 8 is due
The jointree algorithm [Chs. 7 and 9]
Variable elimination","General Schedule Information
  Please note this is a tentative schedule. All dates are only indicative and subject to change.
We will post new content to WebCMS every Monday morning (before the lecture starts). We will email all students on Monday mornings, informing them of the new content and due dates for the week.
For every week in which an assessment item is due (quiz or assignment), the due date is Sunday at 6 p.m.
 ",2023.0,T3,2023-10-24 01:21:26,"This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others. Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.
  Course Learning Outcomes
CLO1 : Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Course Learning Outcomes
CLO2 : Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm
Course Learning Outcomes
CLO3 : Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Course Learning Outcomes
CLO4 : Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Course Learning Outcomes
CLO5 : Understand and apply basic methods for structured prediction Assessment 1 description released
Assignment 1 due
Assignment 2 description released
Assignment 2 due
Bayesian networks
Bayesian networks representation and semantics [Chs. 4 and 5]
Belief propagation [Ch. 14]. Approximate inference by Sampling [Ch. 15]
Belief propagation and sampling
Course overview [Ch. 1], propositional logic [Ch. 2] and probability calculus [Ch. 3]
Exact inference [Ch. 6]. Bayesian networks as classifiers
Factor elimination and jointrees
Flexibility Week
Gaussian Bayesian Networks [Koller Ch. 7, 14.1 & 14.2]
Gaussian Bayesian networks
Graph representation, traversal and common algorithms
Learning parameters and graph structure [Ch. 17]
MAP inference [Ch. 10]. Markov networks
Markov chains and hidden Markov models
Markov networks
Probability calculus and factor implementation
Quiz 1 is due
Quiz 2 is due
Quiz 3 is due
Quiz 4 is due
Quiz 5 is due
Quiz 7 is due
Quiz 8 is due
The jointree algorithm [Chs. 7 and 9]
Variable elimination General Schedule Information
  Please note this is a tentative schedule. All dates are only indicative and subject to change.
We will post new content to WebCMS every Monday morning (before the lecture starts). We will email all students on Monday mornings, informing them of the new content and due dates for the week.
For every week in which an assessment item is due (quiz or assignment), the due date is Sunday at 6 p.m.
 ","{'resilience': 36, 'communication': 9, 'teamwork': 9, 'leadership': 9, 'adaptability': 9, 'critical thinking': 27}","{'automated reasoning': 7, 'model hide markov': 7, 'parameters': 7, 'semantics': 7, 'maximum likelihood': 7, 'graph': 7, 'algorithms': 7, 'filter kalman': 7, 'monte carlo': 7, 'calculus': 7, 'adopt': 7, 'empirical analysis': 7, 'limits': 7, 'inference statistical': 7}","['Exact inference  Bayesian networks as classifiers', 'Bayesian networks representation and semantics', 'Belief propagation and sampling', 'Gaussian Bayesian Networks', 'Graph representation traversal and common algorithms', 'Factor elimination and jointrees', 'Belief propagation  Approximate inference by Sampling', 'Gaussian Bayesian networks', 'Bayesian networks', 'Probability calculus and factor implementation', 'MAP inference  Markov networks', 'Variable elimination', 'Markov networks', 'Learning parameters and graph structure', 'The jointree algorithm', 'Markov chains and hidden Markov models']"
COMP9444,Neural Networks and Deep Learning,undergraduate,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning.","This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate.","Course Learning Outcomes
CLO1 : Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Course Learning Outcomes
CLO2 : Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Course Learning Outcomes
CLO3 : Analyse a problem and devise a suitable neural network solution
Course Learning Outcomes
CLO4 : Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning","Backprop Variations, Hidden Unit Dynamics
Cross Entropy, Softmax and Weight Decay
Hidden Unit Dynamics
Tutorial
Probability and Backprop
Convolution and Image Processing
Convolution
Image Processing
Tutorial
Softmax, Hidden Unit Dynamics
Flexibility Week: No Lectures in this week
Project Mentoring
Attend respective mentoring session as a team
Generative AI
Generative Artificial Intelligence
Recent Advances in Deep Learning
Project Demonstrations
Demonstration of project work
Introduction to the course
Python Refresher
Numpy Refresher
Matplotlib Refresher
Google Colab Refresher
Perceptrons and Backpropagation
Neuroanatomy and Perceptrons
Multi-Layer Networks and Backpropagation
Tutorial:
No tutorials in Week 1
Probability, Generalization and Overfitting
Probability, Generalization and Overfitting
PyTorch
Tutorial
Perceptrons
Recurrent Networks and LSTM
Recurrent Neural Networks
Long Short-Term Memory
Tutorial
Convolutional Neural Networks
Reinforcement Learning
Reinforcement Learning
TD-Learning and Q-Learning
Policy Learning and Deep RL
Project Mentoring
Attend respective mentoring session as a team
Unsupervised and Multimodal Learning
Autoencoders and Adversarial Training
Generative Adversarial Networks
Vision and Language Learning
Project Mentoring
Attend respective mentoring session as a team
Word Vectors and Language Processing
Word Vectors
Natural Language Processing
Project Mentoring
Attend respective mentoring session as a team",,2023.0,T3,2023-10-24 01:25:17,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning. This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate. Course Learning Outcomes
CLO1 : Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Course Learning Outcomes
CLO2 : Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Course Learning Outcomes
CLO3 : Analyse a problem and devise a suitable neural network solution
Course Learning Outcomes
CLO4 : Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning Backprop Variations, Hidden Unit Dynamics
Cross Entropy, Softmax and Weight Decay
Hidden Unit Dynamics
Tutorial
Probability and Backprop
Convolution and Image Processing
Convolution
Image Processing
Tutorial
Softmax, Hidden Unit Dynamics
Flexibility Week: No Lectures in this week
Project Mentoring
Attend respective mentoring session as a team
Generative AI
Generative Artificial Intelligence
Recent Advances in Deep Learning
Project Demonstrations
Demonstration of project work
Introduction to the course
Python Refresher
Numpy Refresher
Matplotlib Refresher
Google Colab Refresher
Perceptrons and Backpropagation
Neuroanatomy and Perceptrons
Multi-Layer Networks and Backpropagation
Tutorial:
No tutorials in Week 1
Probability, Generalization and Overfitting
Probability, Generalization and Overfitting
PyTorch
Tutorial
Perceptrons
Recurrent Networks and LSTM
Recurrent Neural Networks
Long Short-Term Memory
Tutorial
Convolutional Neural Networks
Reinforcement Learning
Reinforcement Learning
TD-Learning and Q-Learning
Policy Learning and Deep RL
Project Mentoring
Attend respective mentoring session as a team
Unsupervised and Multimodal Learning
Autoencoders and Adversarial Training
Generative Adversarial Networks
Vision and Language Learning
Project Mentoring
Attend respective mentoring session as a team
Word Vectors and Language Processing
Word Vectors
Natural Language Processing
Project Mentoring
Attend respective mentoring session as a team ","{'problem solving': 20, 'resilience': 20, 'adaptability': 20, 'communication': 10, 'critical thinking': 10, 'time management': 10, 'social networking': 10}","{'numpy': 8, 'python': 8, 'matplotlib': 8, 'autoencoders': 8, 'LSTM': 8, 'neural network recurrent': 8, 'networks convolutional': 8, 'softmax': 8, 'model network': 8, 'memory short long term': 8, 'neuroanatomy': 8, 'processing natural language': 8, 'pytorch': 8}","['Hidden Unit Dynamics', 'Word Vectors and Language Processing', 'Reinforcement Learning', 'Softmax Hidden Unit Dynamics', 'Convolutional Neural Networks', 'Policy Learning and Deep RL', 'Long ShortTerm Memory', 'Generative Adversarial Networks', 'Python Refresher', 'PyTorch', 'Google Colab Refresher', 'Probability and Backprop', 'Natural Language Processing', 'Generative AI', 'Image Processing', 'Attend respective mentoring session as a team', 'Matplotlib Refresher', 'Word Vectors', 'Backprop Variations Hidden Unit Dynamics', 'Cross Entropy Softmax and Weight Decay', 'Convolution', 'Numpy Refresher', 'Generative Artificial Intelligence', 'Perceptrons', 'Vision and Language Learning', 'Convolution and Image Processing', 'MultiLayer Networks and Backpropagation', 'TDLearning and QLearning', 'Recurrent Networks and LSTM', 'Recurrent Neural Networks', 'Probability Generalization and Overfitting', 'Recent Advances in Deep Learning', 'Unsupervised and Multimodal Learning', 'Perceptrons and Backpropagation', 'Autoencoders and Adversarial Training', 'Neuroanatomy and Perceptrons']"
COMP9517,Computer Vision,undergraduate,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision.","The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad, interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures.","Course Learning Outcomes
CLO1 : Explain basic scientific, statistical, and engineering approaches to computer vision
Course Learning Outcomes
CLO2 : Implement and test computer vision algorithms using existing software platforms
Course Learning Outcomes
CLO3 : Build larger computer vision applications by integrating software modules","Consultation Session
Deep Learning I
Deep Learning II
Feature Representation
Flexibility Week (No Lectures)
Group Project
Guest Lectures on Advanced Applications of Computer Vision
Image Processing
Image Segmentation
Introduction & Image Formation
Lab 1
Lab 2
Lab 3
Lab 4
Motion Tracking
Pattern Recognition","General Schedule Information
The course schedule includes 2 x 2-hour lectures per week during all weeks of term except flexibility week. In addition, a 1-hour consultation session is scheduled per week starting in the second week of term, where tutors are available to explain the labs (in the first weeks of the course) and the project (in later weeks) and answer any questions about these.",2023.0,T3,2023-10-24 01:29:13,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision. The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad, interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures. Course Learning Outcomes
CLO1 : Explain basic scientific, statistical, and engineering approaches to computer vision
Course Learning Outcomes
CLO2 : Implement and test computer vision algorithms using existing software platforms
Course Learning Outcomes
CLO3 : Build larger computer vision applications by integrating software modules Consultation Session
Deep Learning I
Deep Learning II
Feature Representation
Flexibility Week (No Lectures)
Group Project
Guest Lectures on Advanced Applications of Computer Vision
Image Processing
Image Segmentation
Introduction & Image Formation
Lab 1
Lab 2
Lab 3
Lab 4
Motion Tracking
Pattern Recognition General Schedule Information
The course schedule includes 2 x 2-hour lectures per week during all weeks of term except flexibility week. In addition, a 1-hour consultation session is scheduled per week starting in the second week of term, where tutors are available to explain the labs (in the first weeks of the course) and the project (in later weeks) and answer any questions about these.","{'reading': 17, 'communication': 33, 'problem solving': 17, 'critical thinking': 17, 'resilience': 17}","{'physics': 8, 'object detection': 8, 'level high': 8, 'model building': 8, 'algorithms': 8, 'system visual': 8, 'character recognition optical': 8, 'feature extraction': 8, 'module software': 8, 'models statistical': 8, 'medical imaging': 8, 'computer engineering': 8, 'biometrics': 8}","['Deep Learning I', 'Image Segmentation', 'Guest s on Advanced Applications of Computer Vision', 'Feature Representation', 'Image Processing', 'Motion Tracking', 'Pattern Recognition', 'Deep Learning II']"
COMP9727,Recommender Systems,undergraduate,"Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by e-commerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems.","This course aims to introduce the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques needed to support recommender systems. Emphasis will be placed on understanding the strengths and weaknesses of different approaches, user interface design for recommender systems, and evaluation of recommender systems using a variety of metrics and user evaluation styles.","Course Learning Outcomes
CLO1 : Understand the basic types of recommender system and the main recommendation algorithms
Course Learning Outcomes
CLO2 : Design a suitable recommender system for a specific application
Course Learning Outcomes
CLO3 : Implement a prototype recommender system that addresses a realistic problem
Course Learning Outcomes
CLO4 : Evaluate a recommender system from multiple perspectives using appropriate metrics","Flexibility Week: No classes
Lecture: Collaborative Filtering
Tutorial: Collaborative Filtering
Lecture: Content-Based Recommender Systems
Tutorial: Topic Classification
Lecture: Context-Aware Recommender Systems
Tutorial: Project Feedback
Lecture: Industry Guest Lecture
Tutorial: Project Feedback
Assessment: Project Due
Lecture: Introduction to Recommender Systems
Tutorial: Evaluation of Recommender Systems
Lecture: Knowledge-Based Recommender Systems
Tutorial: Association Rule Mining
Assessment: Assignment Due
Lecture: Sequential Recommender Systems
Tutorial: Project Feedback
Lecture: Social Network Analysis
Tutorial: Link Prediction
Assessment: Project Design Due
Lecture: Social Recommender Systems
Tutorial: Project Feedback
Review linear algebra (matrices and vectors)",,2023.0,T3,2023-10-24 01:33:01,"Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by e-commerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems. This course aims to introduce the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques needed to support recommender systems. Emphasis will be placed on understanding the strengths and weaknesses of different approaches, user interface design for recommender systems, and evaluation of recommender systems using a variety of metrics and user evaluation styles. Course Learning Outcomes
CLO1 : Understand the basic types of recommender system and the main recommendation algorithms
Course Learning Outcomes
CLO2 : Design a suitable recommender system for a specific application
Course Learning Outcomes
CLO3 : Implement a prototype recommender system that addresses a realistic problem
Course Learning Outcomes
CLO4 : Evaluate a recommender system from multiple perspectives using appropriate metrics Flexibility Week: No classes
Lecture: Collaborative Filtering
Tutorial: Collaborative Filtering
Lecture: Content-Based Recommender Systems
Tutorial: Topic Classification
Lecture: Context-Aware Recommender Systems
Tutorial: Project Feedback
Lecture: Industry Guest Lecture
Tutorial: Project Feedback
Assessment: Project Due
Lecture: Introduction to Recommender Systems
Tutorial: Evaluation of Recommender Systems
Lecture: Knowledge-Based Recommender Systems
Tutorial: Association Rule Mining
Assessment: Assignment Due
Lecture: Sequential Recommender Systems
Tutorial: Project Feedback
Lecture: Social Network Analysis
Tutorial: Link Prediction
Assessment: Project Design Due
Lecture: Social Recommender Systems
Tutorial: Project Feedback
Review linear algebra (matrices and vectors) ","{'social networking': 25, 'critical thinking': 50, 'communication': 25}","{'association rule': 8, 'prototype': 8, 'user interface': 8, 'commerce e': 8, 'linear algebra': 8, 'algorithms': 8, 'network analysis': 8, 'processing natural language': 8, 'application specific': 8, 'personalized': 8, 'project assessment': 8, 'recommender system': 8}","['KnowledgeBased Recommender Systems', 'Review linear algebra matrices and vectors', 'ContentBased Recommender Systems', 'Social Recommender Systems', 'Industry Guest', 'Social Network Analysis', 'Sequential Recommender Systems', 'ContextAware Recommender Systems', 'Collaborative Filtering']"
COMP4121,Advanced Algorithms,postgraduate,"This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skip-lists, order statistics and Karger's randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121/3821/9101/9801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https://www.cs.cornell.edu/jeh/book.pdf.",The aims of the course are,"Course Learning Outcomes
CLO1 : Understand more advanced algorithms employed by modern industry, especially those used in Data Science and Machine Learning
Course Learning Outcomes
CLO2 : Apply randomisation to real life problems
Course Learning Outcomes
CLO3 : Employ numerical algorithms such as Singular Value Decomposition and Fast Fourier transform
Course Learning Outcomes
CLO4 : Acquiring necessary skills and use them for advanced algorithms design
Course Learning Outcomes
CLO5 : Improved problem solving skills","Gaussian Annulus, random projections and Johnson Lindenstrauss lemma
Google PageRank algorithm and Markov chains
Hidden Markov models and the Viterbi algorithm
Karger's Min Cut algorithm; universal and perfect hashing
Order statistic, skip lists and randomised database access.
Recommender systems; clustering algorithms
Review of the material
The Discrete Fourier Transform, the Fast Fourier Transform and convolution
The Singular Values Decomposition and applications
Transmit power control in celular networks; review of the material
probability and statistics refresher",,2023.0,T3,2023-10-24 01:36:51,"This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skip-lists, order statistics and Karger's randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121/3821/9101/9801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https://www.cs.cornell.edu/jeh/book.pdf. The aims of the course are Course Learning Outcomes
CLO1 : Understand more advanced algorithms employed by modern industry, especially those used in Data Science and Machine Learning
Course Learning Outcomes
CLO2 : Apply randomisation to real life problems
Course Learning Outcomes
CLO3 : Employ numerical algorithms such as Singular Value Decomposition and Fast Fourier transform
Course Learning Outcomes
CLO4 : Acquiring necessary skills and use them for advanced algorithms design
Course Learning Outcomes
CLO5 : Improved problem solving skills Gaussian Annulus, random projections and Johnson Lindenstrauss lemma
Google PageRank algorithm and Markov chains
Hidden Markov models and the Viterbi algorithm
Karger's Min Cut algorithm; universal and perfect hashing
Order statistic, skip lists and randomised database access.
Recommender systems; clustering algorithms
Review of the material
The Discrete Fourier Transform, the Fast Fourier Transform and convolution
The Singular Values Decomposition and applications
Transmit power control in celular networks; review of the material
probability and statistics refresher ","{'problem solving': 17, 'resilience': 33, 'communication': 17, 'adaptability': 17, 'critical thinking': 17}","{'model hide markov': 14, 'algorithms': 14, 'transform fast fourier': 14, 'database access': 14, 'pagerank': 14, 'recommender system': 14, 'design algorithm': 14}","['Google PageRank algorithm and Markov chains', 'Recommender systems clustering algorithms', 'The Discrete Fourier Transform the Fast Fourier Transform and convolution', 'Order statistic skip lists and randomised database access', 'Kargers Min Cut algorithm universal and perfect hashing', 'Hidden Markov models and the Viterbi algorithm', 'Gaussian Annulus random projections and Johnson Lindenstrauss lemma', 'probability and statistics refresher', 'The Singular Values Decomposition and applications']"
COMP4418,Knowledge Representation and Reasoning,postgraduate,"How can you timetable classes to fit everyone’s schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?
Knowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, so-called combinatorial problems. To do so, I will teach you “modeling”, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification.","This course provides an introduction to the important approach to symbolic Artificial Intelligence (AI) known is Knowledge Representation and Reasoning (KRR). KRR has a long and distinguished history of research in AI with a broad range of approaches. In this course we concentrate on formal approaches to KRR, in particular logic based approaches – propositional logic, first-order logic, non-monotonic logic – and how they can be used to solve difficult computational problems.
This course can be a starting point for further exploration of artificial intelligence. Further courses include COMP3431/COMP9431: Robotic Software Architecture, COMP9417: Machine Learning and Data Mining, COMP9444: Neural Networks and COMP9844: Extended Neural Networks.","Course Learning Outcomes
CLO1 : Identify when a given situation can be formulated with a Knowledge Representation and Reasoning (KRR) approach
Course Learning Outcomes
CLO2 : Implement a problem model in a KRR language and use existing KRR tools to identify a solution
Course Learning Outcomes
CLO3 : Break down a task into its domain vocabulary and its combinatorial dimension
Course Learning Outcomes
CLO4 : Solve new combinatorial problems using declarative programming","Cooperative Game Theory
Formal Logic and Reasoning, First-order Logic
Implementing Formal Reasoning, Commonsense Reasoning
Introduction to Answer Set Programming
Introduction to KRR, Modelling, Propositional Logic
Multi-agent Resource Allocation
Reasoning about Actions
Social Choice
Solving problems with Answer Set Programming
Term Break (Flex Week)",,2023.0,T3,2023-10-24 01:40:47,"How can you timetable classes to fit everyone’s schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?
Knowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, so-called combinatorial problems. To do so, I will teach you “modeling”, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification. This course provides an introduction to the important approach to symbolic Artificial Intelligence (AI) known is Knowledge Representation and Reasoning (KRR). KRR has a long and distinguished history of research in AI with a broad range of approaches. In this course we concentrate on formal approaches to KRR, in particular logic based approaches – propositional logic, first-order logic, non-monotonic logic – and how they can be used to solve difficult computational problems.
This course can be a starting point for further exploration of artificial intelligence. Further courses include COMP3431/COMP9431: Robotic Software Architecture, COMP9417: Machine Learning and Data Mining, COMP9444: Neural Networks and COMP9844: Extended Neural Networks. Course Learning Outcomes
CLO1 : Identify when a given situation can be formulated with a Knowledge Representation and Reasoning (KRR) approach
Course Learning Outcomes
CLO2 : Implement a problem model in a KRR language and use existing KRR tools to identify a solution
Course Learning Outcomes
CLO3 : Break down a task into its domain vocabulary and its combinatorial dimension
Course Learning Outcomes
CLO4 : Solve new combinatorial problems using declarative programming Cooperative Game Theory
Formal Logic and Reasoning, First-order Logic
Implementing Formal Reasoning, Commonsense Reasoning
Introduction to Answer Set Programming
Introduction to KRR, Modelling, Propositional Logic
Multi-agent Resource Allocation
Reasoning about Actions
Social Choice
Solving problems with Answer Set Programming
Term Break (Flex Week) ","{'problem solving': 17, 'resilience': 17, 'critical thinking': 17, 'adaptability': 17, 'reading': 8, 'communication': 8, 'time management': 8, 'social networking': 8}","{'theory game': 14, 'limited': 14, 'vocabulary': 14, 'programming language': 14, 'architecture software': 14, 'program computer': 14, 'minesweeper': 14}","['Formal Logic and Reasoning Firstorder Logic', 'Solving problems with Answer Set Programming', 'Multiagent Resource Allocation', 'Cooperative Game Theory', 'Social Choice', 'Reasoning about Actions', 'Implementing Formal Reasoning Commonsense Reasoning']"
COMP4431,Game Design Workshop,postgraduate,"Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?
This course will explore the three basic elements of game design - mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on the design of play , not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry.","This course aims to provide students with the skills and knowledge to design games that are engaging, playable and fun, and to analyse games in terms of these characteristics. This is an upper-year elective course.","Course Learning Outcomes
CLO1 : Define a game through the lenses of mechanics, aesthetics, story, and technology.
Course Learning Outcomes
CLO2 : Analyse games in terms of their core mechanics, gameplay dynamics, and aesthetic components.
Course Learning Outcomes
CLO3 : Apply the iterative experience-based design methodology to design, prototype, playtest, and evaluate a board game.
Course Learning Outcomes
CLO4 : Develop the ability to document your game designs to best communicate your ideas.
Course Learning Outcomes
CLO5 : Explain the role of ethics and accessibility in game design.","Aesthetics of games
Balance
Inclusivity and Accessibility of Games
Brainstorming and ideation
Induction to Maker Space Equipment
Continuing the ideation process
Induction to Maker Space Equipment
Design Documentation
Ethics of games
Game Community
GUEST LECTURE: Gender and identity in gaming and ethics of games
Evaluating your game
  In class guest lecture: An interview with Phil Walker-Harding
(Phil is a board and card game designer living and working on Gadigal land (Sydney, Australia). He makes games that are easy to learn and socially engaging to play. He hopes that his designs can bring people of all ages and backgrounds together at the table for meaningful experiences. His best-known game is Sushi Go! which has been published around the world in over 20 languages, selling over 1 million copies.)
Housekeeping and welcome
What is game design?
What is a game?
Ideation and Aesthetics Deliverable due
Let's start getting hands dirty with some prototyping :) 
Which leads right into playtesting and balancing
Mechanics and First prototype due
No Lectures - Flex week
No labs - Flex week
Playtesting all the games :)
Preparing for your final deliverable and playtesting
Prototyping
Playtesting
Guest appearance of our very own Gabo from the Maker Space rapid prototyping and rebuilding Catan 
THIS WEEK IS A PUBLIC HOLIDAY WEEK, SO THERE IS NO CLASS ON MONDAY
Prototyping, Playtesting and Balancing
Starting to play with mechanics
Beginning the tightrope of balance
The MDA Framework
Core Mechanics
The game pitch
In class guest lecture: An interview with Travis McGeathy
(Travis is a veteran game design leader with a career spanning more than 2 decades and 35 titles. He has chased a consistent passion: designing games that bring people together. As the Lead Designer on EverQuest, Travis brought this to life over 9 expansions while helping it win an Emmy Award and Walk of Game induction. At 38 Studios, he was the Design Director on the Kingdoms of Amalur MMO. At Blizzard he led the design for Heroes of the Storm, guided design teams for the classic Diablo, WarCraft, and StarCraft franchises, and formed an incubation team to create a new game set in an iconic Blizzard IP. Travis along with his partner are the founders of Seeker Games: https://www.seekergames.com/)","General Schedule Information
We are flipping the classroom! The concept of a flipped classroom revolves around the notion that traditional lectures or direct instruction are not the most effective ways to utilize class time. Instead, students are exposed to the learning materials before the class, allowing the in-class time to be devoted to activities that engage higher-order thinking. And this gives us the best opportunity to discuss, play games and build up our own community of learning! Games are best learned through play and practice, and we want to make sure that we have lots of time for discussion, so our structure will be a bit different from your regular course :) I expect you to have watched the lecture videos, and there will be a variety of optional resources and extra reading provided if you are interested in learning more about certain topics. Then in class, we will play games, and discuss that week's concepts and how they relate to the games that we play - so a bit of theory followed by a bit of practice and discussion - our very own games community :) From Week 4 onwards, we will have playtesting tables set up in every lab to get the first feel of your games ideas and to iron out any issues.",2023.0,T3,2023-10-24 01:44:38,"Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?
This course will explore the three basic elements of game design - mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on the design of play , not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry. This course aims to provide students with the skills and knowledge to design games that are engaging, playable and fun, and to analyse games in terms of these characteristics. This is an upper-year elective course. Course Learning Outcomes
CLO1 : Define a game through the lenses of mechanics, aesthetics, story, and technology.
Course Learning Outcomes
CLO2 : Analyse games in terms of their core mechanics, gameplay dynamics, and aesthetic components.
Course Learning Outcomes
CLO3 : Apply the iterative experience-based design methodology to design, prototype, playtest, and evaluate a board game.
Course Learning Outcomes
CLO4 : Develop the ability to document your game designs to best communicate your ideas.
Course Learning Outcomes
CLO5 : Explain the role of ethics and accessibility in game design. Aesthetics of games
Balance
Inclusivity and Accessibility of Games
Brainstorming and ideation
Induction to Maker Space Equipment
Continuing the ideation process
Induction to Maker Space Equipment
Design Documentation
Ethics of games
Game Community
GUEST LECTURE: Gender and identity in gaming and ethics of games
Evaluating your game
  In class guest lecture: An interview with Phil Walker-Harding
(Phil is a board and card game designer living and working on Gadigal land (Sydney, Australia). He makes games that are easy to learn and socially engaging to play. He hopes that his designs can bring people of all ages and backgrounds together at the table for meaningful experiences. His best-known game is Sushi Go! which has been published around the world in over 20 languages, selling over 1 million copies.)
Housekeeping and welcome
What is game design?
What is a game?
Ideation and Aesthetics Deliverable due
Let's start getting hands dirty with some prototyping :) 
Which leads right into playtesting and balancing
Mechanics and First prototype due
No Lectures - Flex week
No labs - Flex week
Playtesting all the games :)
Preparing for your final deliverable and playtesting
Prototyping
Playtesting
Guest appearance of our very own Gabo from the Maker Space rapid prototyping and rebuilding Catan 
THIS WEEK IS A PUBLIC HOLIDAY WEEK, SO THERE IS NO CLASS ON MONDAY
Prototyping, Playtesting and Balancing
Starting to play with mechanics
Beginning the tightrope of balance
The MDA Framework
Core Mechanics
The game pitch
In class guest lecture: An interview with Travis McGeathy
(Travis is a veteran game design leader with a career spanning more than 2 decades and 35 titles. He has chased a consistent passion: designing games that bring people together. As the Lead Designer on EverQuest, Travis brought this to life over 9 expansions while helping it win an Emmy Award and Walk of Game induction. At 38 Studios, he was the Design Director on the Kingdoms of Amalur MMO. At Blizzard he led the design for Heroes of the Storm, guided design teams for the classic Diablo, WarCraft, and StarCraft franchises, and formed an incubation team to create a new game set in an iconic Blizzard IP. Travis along with his partner are the founders of Seeker Games: https://www.seekergames.com/) General Schedule Information
We are flipping the classroom! The concept of a flipped classroom revolves around the notion that traditional lectures or direct instruction are not the most effective ways to utilize class time. Instead, students are exposed to the learning materials before the class, allowing the in-class time to be devoted to activities that engage higher-order thinking. And this gives us the best opportunity to discuss, play games and build up our own community of learning! Games are best learned through play and practice, and we want to make sure that we have lots of time for discussion, so our structure will be a bit different from your regular course :) I expect you to have watched the lecture videos, and there will be a variety of optional resources and extra reading provided if you are interested in learning more about certain topics. Then in class, we will play games, and discuss that week's concepts and how they relate to the games that we play - so a bit of theory followed by a bit of practice and discussion - our very own games community :) From Week 4 onwards, we will have playtesting tables set up in every lab to get the first feel of your games ideas and to iron out any issues.","{'communication': 12, 'leadership': 12, 'problem solving': 12, 'adaptability': 25, 'critical thinking': 12, 'resilience': 25}","{'prototype': 14, 'mechanics': 14, 'flipped classroom': 14, 'prototypes rapid': 14, 'order higher': 14, 'franchises': 14, 'com': 14}","['Continuing the ideation process', 'Beginning the tightrope of balance', 'The MDA Framework', 'Playtesting', 'Induction to Maker Space Equipment', 'GUEST LECTURE Gender and identity in gaming and ethics of games', 'The game pitch', 'Ethics of games', 'What is a game', 'Prototyping', 'Core Mechanics', 'Brainstorming and ideation', 'Inclusivity and Accessibility of Games', 'Lets start getting hands dirty with some prototyping', 'Starting to play with mechanics', 'Balance', 'Which leads right into playtesting and balancing', 'Preparing for your final deliverable and playtesting', 'Game Community', 'Evaluating your game', 'What is game design', 'Aesthetics of games', 'Prototyping Playtesting and Balancing', 'Playtesting all the games', 'Design Documentation']"
COMP4511,User Interface Design and Construction,postgraduate,"COMP4511 is a hands-on project-based course designed to build and solidify the basic skills you acquired in COMP3511/9511. Students will be required to build their interface at least three times (remember the process is iterative!), once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.
The process doesn't start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?
As you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the object-oriented design. You will build the code implementation iterating through both your object-oriented design and your user interface design.
The real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect - not what you as a programmer expect. That's the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.
We teach a process that is relevant to industry. Preparing students for the real-world challenges of user interface design. And face it, user interfaces are everywhere.
The process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?
COMP3511 Human Computer Interaction is a pre-requisite and you need a mark of 70 or better (you are expected to start design, prototyping and designing usability tests in the first week). You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher.","This course aims to develop your skills in designing and creating a basic user interface.  UI design that meets the users needs is an important part of the Design process and will equip you with skills to create more usable interfaces in industry. More specifically, the course aims to:
• to develop your skills in the area of user-centred design, with a focus on mobile design
• to develop and implement techniques/heuristics necessary to evaluate systems for their usability
• to develop further your capability of executing a user-centred design process
• to give you experience in using paper-based design techniques, including software systems designed for paper-based prototyping techniques
• to give you experience in using electronic-based prototyping techniques, including software systems designed for electronic prototyping techniques
• to give you a basic grounding and understanding of React Nativ to develop applications
• to give you experience in the formal evaluation of user interfaces
• to ensure that your design work includes user needs analysis
• to give you experience of user centred design tools, methods, and techniques
• above all, maintain a real-world perspective to applying this knowledge in industry","Course Learning Outcomes
CLO1 : Construct a project plan that is based on user-centred design principles that can be used to carry out activities to design, evaluate and refine user interaction, based on iteration
Course Learning Outcomes
CLO2 : Create user interface evaluation reports (written and oral) that critique user interfaces
Course Learning Outcomes
CLO3 : Develop design skills, primarily using paper for rapid solutions, to consolidate individual designs that demonstrate an understanding of the importance of design decisions and the selection process
Course Learning Outcomes
CLO4 : Develop design skills, to construct high-fidelity prototypes based on previous paper-based design activities
Course Learning Outcomes
CLO5 : Prepare and carry out usability walkthroughs to evaluate both paper and electronic based designs for their usability, used to then create structured reports that quantify the issues discovered from the evaluation activities
Course Learning Outcomes
CLO6 : Develop skills with React Native to implement a prototype into a functioning beta version of an app
Course Learning Outcomes
CLO7 : Critically evaluate current research in the UX domain and apply it to projects
Course Learning Outcomes
CLO8 : Develop an awareness of user-centred design tools, methods, and techniques and maintain a real-world perspective in order to be able to apply this knowledge in industry","Lecture Recording in lieu of live lecture due to Monday public holiday: Information Architecture in Mobile App Design
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Introducing Atomic Design, Creating a Design System
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Mobile Design Principles
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Multi Generational Design and Inclusive Design 
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Personas and Scenarios, User Stories for Requirements, User Story Mapping
Wednesday via Blackboard collaborate: Introduction to React Nativ
Monday live lecture: Prototyping with Figma, Usability Testing and Evaluation recap
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Visual Design in Apps & Colour Theory in Apps
Wednesday via Blackboard collaborate: React Nativ
Recharge week so no lectures.
The course lecture schedule is subject to minor updates.
Monday live lecture: Introduction and Logistics & Introduction to Design Thinking
Wednesday via Blackboard collaborate: Design Thinking continued
The course schedule is subjec to minor variations.  Please check Moodle for final details.
Monday live lectures (12 to 2pm) are in Ainsworth G02 and you are all encouraged to attend the lectures in person.
Wednesday live lectures (11am to 1pm) are online via Blackboard collaborate and are designed for you to interact in real-time with our industry expert.
This time will be used for demos and project work.","General Schedule Information
Tutorial attendance is mandatory for assignment grading purposes.  There are multiple weeks in which assignment content will be graded.  Please refer to the course schedule and assignment specs available in Moodle for more details.
Lectures begin in week1 and tutorials begin in week2.  Please ensure you attend your enrolled tutorial.  Most tutorials are Face to Face but there is one online class, for which we will be using Blackboard collaborate. ",2023.0,T3,2023-10-24 01:48:31,"COMP4511 is a hands-on project-based course designed to build and solidify the basic skills you acquired in COMP3511/9511. Students will be required to build their interface at least three times (remember the process is iterative!), once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.
The process doesn't start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?
As you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the object-oriented design. You will build the code implementation iterating through both your object-oriented design and your user interface design.
The real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect - not what you as a programmer expect. That's the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.
We teach a process that is relevant to industry. Preparing students for the real-world challenges of user interface design. And face it, user interfaces are everywhere.
The process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?
COMP3511 Human Computer Interaction is a pre-requisite and you need a mark of 70 or better (you are expected to start design, prototyping and designing usability tests in the first week). You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher. This course aims to develop your skills in designing and creating a basic user interface.  UI design that meets the users needs is an important part of the Design process and will equip you with skills to create more usable interfaces in industry. More specifically, the course aims to:
• to develop your skills in the area of user-centred design, with a focus on mobile design
• to develop and implement techniques/heuristics necessary to evaluate systems for their usability
• to develop further your capability of executing a user-centred design process
• to give you experience in using paper-based design techniques, including software systems designed for paper-based prototyping techniques
• to give you experience in using electronic-based prototyping techniques, including software systems designed for electronic prototyping techniques
• to give you a basic grounding and understanding of React Nativ to develop applications
• to give you experience in the formal evaluation of user interfaces
• to ensure that your design work includes user needs analysis
• to give you experience of user centred design tools, methods, and techniques
• above all, maintain a real-world perspective to applying this knowledge in industry Course Learning Outcomes
CLO1 : Construct a project plan that is based on user-centred design principles that can be used to carry out activities to design, evaluate and refine user interaction, based on iteration
Course Learning Outcomes
CLO2 : Create user interface evaluation reports (written and oral) that critique user interfaces
Course Learning Outcomes
CLO3 : Develop design skills, primarily using paper for rapid solutions, to consolidate individual designs that demonstrate an understanding of the importance of design decisions and the selection process
Course Learning Outcomes
CLO4 : Develop design skills, to construct high-fidelity prototypes based on previous paper-based design activities
Course Learning Outcomes
CLO5 : Prepare and carry out usability walkthroughs to evaluate both paper and electronic based designs for their usability, used to then create structured reports that quantify the issues discovered from the evaluation activities
Course Learning Outcomes
CLO6 : Develop skills with React Native to implement a prototype into a functioning beta version of an app
Course Learning Outcomes
CLO7 : Critically evaluate current research in the UX domain and apply it to projects
Course Learning Outcomes
CLO8 : Develop an awareness of user-centred design tools, methods, and techniques and maintain a real-world perspective in order to be able to apply this knowledge in industry Lecture Recording in lieu of live lecture due to Monday public holiday: Information Architecture in Mobile App Design
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Introducing Atomic Design, Creating a Design System
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Mobile Design Principles
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Multi Generational Design and Inclusive Design 
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Personas and Scenarios, User Stories for Requirements, User Story Mapping
Wednesday via Blackboard collaborate: Introduction to React Nativ
Monday live lecture: Prototyping with Figma, Usability Testing and Evaluation recap
Wednesday via Blackboard collaborate: React Nativ
Monday live lecture: Visual Design in Apps & Colour Theory in Apps
Wednesday via Blackboard collaborate: React Nativ
Recharge week so no lectures.
The course lecture schedule is subject to minor updates.
Monday live lecture: Introduction and Logistics & Introduction to Design Thinking
Wednesday via Blackboard collaborate: Design Thinking continued
The course schedule is subjec to minor variations.  Please check Moodle for final details.
Monday live lectures (12 to 2pm) are in Ainsworth G02 and you are all encouraged to attend the lectures in person.
Wednesday live lectures (11am to 1pm) are online via Blackboard collaborate and are designed for you to interact in real-time with our industry expert.
This time will be used for demos and project work. General Schedule Information
Tutorial attendance is mandatory for assignment grading purposes.  There are multiple weeks in which assignment content will be graded.  Please refer to the course schedule and assignment specs available in Moodle for more details.
Lectures begin in week1 and tutorials begin in week2.  Please ensure you attend your enrolled tutorial.  Most tutorials are Face to Face but there is one online class, for which we will be using Blackboard collaborate. ","{'resilience': 18, 'basic skills': 6, 'critical thinking': 24, 'communication': 18, 'reading': 6, 'problem solving': 6, 'leadership': 6, 'adaptability': 12, 'mobile device abilities': 6}","{'surface': 5, 'tool design': 5, 'information architecture': 5, 'multi generational': 5, 'prototype': 5, 'user graphical interface': 5, 'person': 5, 'project plan': 5, 'logistics': 5, 'analysis need': 5, 'audience target': 5, 'software system': 5, 'development process': 5, 'user story': 5, 'user interface': 5, 'designing graphical': 5, 'mobile': 5, 'app mobile': 5, 'orient design object': 5, 'workflows': 5}","['Prototyping with Figma Usability Testing and Evaluation recap', 'Multi Generational Design and Inclusive Design', 'Introducing Atomic Design Creating a Design System', 'Personas and Scenarios User Stories for Requirements User Story Mapping', 'Visual Design in Apps  Colour Theory in Apps', 'Recharge week so no lectures', 'Mobile Design Principles', 'Blackboard collaborate React Native', 'Blackboard collaborate Design Thinking continued']"
COMP6080,Web Front-End Programming,postgraduate,"COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course.","COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:
Postgraduate students may need to familiarise themselves with GIT, if not already familiar.","Course Learning Outcomes
CLO1 : Able to apply Javascript semantics to design, construct, test and debug programs holistically
Course Learning Outcomes
CLO2 : Construct programs for web-front end with HTML, CSS, and DOM manipulation
Course Learning Outcomes
CLO3 : Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Course Learning Outcomes
CLO4 : Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Course Learning Outcomes
CLO5 : Design and build interfaces that focus on best user experience and accessible design practices","Course Overview
Intro to Git
HTML Fundamentals
Image Types
CSS Rules
More Tags
CSS Formatting
CSS Layouts
Flexbox
SVGs
Pre-processors
zindex
CSS Showcase
Fonts
Demo: Ass2 - Async & Planning
UI Fundamentals
Good & Bad UI 1
Good & Bad UI 2
Perceivability
Operabilitity
Understandability
Robustness
Demo: HTML/CSS Page
Mobile CSS
Using CSS Frameworks
CSS Grids
Dev Tools
Javascript Intro (compared to C)
Javascript Language Features & Syntax
Javascript Advanced Functions
The Javascript Ecosystem
Node Package Manager
NPM Advanced
Demo: Javascript - Browser
Events & Callbacks
Promises
Await / Async
AJAX
XMLHttpRequest (XHR)
Fetch
JSON & Data-interchange formats
Understand HTTP Servers
Demo: Javascript - NodeJS
Introduction
DOM
Events
Javascript Closures
Forms
Local Storage
Demo: ReactJS Further
Introduction
Component Testing
UI Testing
UI Testing (Demo)
Demo: ReactJS in Ass3
Linting
Routing & SPAs
CSS Frameworks
useContext
State management
Class components
Usability testing
Figma & Component Libraries
Pre-rendering
Final Exam Overview
Term Break (Flex Week)
Using Git in pairs
Introduction
Basic ""Global CSS"" Usage
Lifescycle
Transpilation
useState hook
Demo: ReactJS Intro & A11y
useEffect hook
Using Fetch & Hooks
Working with Multiple Files
Components & Props
Before you code",,2023.0,T3,2023-10-24 01:52:20,"COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course. COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:
Postgraduate students may need to familiarise themselves with GIT, if not already familiar. Course Learning Outcomes
CLO1 : Able to apply Javascript semantics to design, construct, test and debug programs holistically
Course Learning Outcomes
CLO2 : Construct programs for web-front end with HTML, CSS, and DOM manipulation
Course Learning Outcomes
CLO3 : Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Course Learning Outcomes
CLO4 : Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Course Learning Outcomes
CLO5 : Design and build interfaces that focus on best user experience and accessible design practices Course Overview
Intro to Git
HTML Fundamentals
Image Types
CSS Rules
More Tags
CSS Formatting
CSS Layouts
Flexbox
SVGs
Pre-processors
zindex
CSS Showcase
Fonts
Demo: Ass2 - Async & Planning
UI Fundamentals
Good & Bad UI 1
Good & Bad UI 2
Perceivability
Operabilitity
Understandability
Robustness
Demo: HTML/CSS Page
Mobile CSS
Using CSS Frameworks
CSS Grids
Dev Tools
Javascript Intro (compared to C)
Javascript Language Features & Syntax
Javascript Advanced Functions
The Javascript Ecosystem
Node Package Manager
NPM Advanced
Demo: Javascript - Browser
Events & Callbacks
Promises
Await / Async
AJAX
XMLHttpRequest (XHR)
Fetch
JSON & Data-interchange formats
Understand HTTP Servers
Demo: Javascript - NodeJS
Introduction
DOM
Events
Javascript Closures
Forms
Local Storage
Demo: ReactJS Further
Introduction
Component Testing
UI Testing
UI Testing (Demo)
Demo: ReactJS in Ass3
Linting
Routing & SPAs
CSS Frameworks
useContext
State management
Class components
Usability testing
Figma & Component Libraries
Pre-rendering
Final Exam Overview
Term Break (Flex Week)
Using Git in pairs
Introduction
Basic ""Global CSS"" Usage
Lifescycle
Transpilation
useState hook
Demo: ReactJS Intro & A11y
useEffect hook
Using Fetch & Hooks
Working with Multiple Files
Components & Props
Before you code ","{'critical thinking': 11, 'time management': 22, 'teamwork': 11, 'problem solving': 11, 'leadership': 11, 'adaptability': 11, 'resilience': 11, 'reading': 11}","{'canva': 5, 'mobile page': 5, 'aggregate': 5, 'accessibility network': 5, 'hook': 5, 'semantics': 5, 'end front': 5, 'flexbox': 5, 'git': 5, 'debug': 5, 'ajax': 5, 'data formats': 5, 'HTML': 5, 'servers http': 5, 'libraries component': 5, 'javascript': 5, 'json': 5, 'level higher': 5, 'xmlhttprequest': 5}","['Understandability', 'CSS Showcase', 'Demo Javascript  Browser', 'useContext', 'DOM', 'Transpilation', 'Working with Multiple Files', 'NPM Advanced', 'useState hook', 'Flexbox', 'CSS Frameworks', 'Using Git in pairs', 'Demo Ass2  Async  Planning', 'CSS Grids', 'Prerendering', 'Demo ReactJS Further', 'Perceivability', 'Operabilitity', 'AJAX', 'Usability testing', 'Demo Javascript  NodeJS', 'Javascript Intro compared to C', 'Before you code', 'CSS Formatting', 'Component Testing', 'UI Testing Demo', 'Linting', 'Components  Props', 'Demo ReactJS in Ass3', 'State management', 'Dev Tools', 'Good  Bad UI 1', 'Using CSS Frameworks', 'Preprocessors', 'Node Package Manager', 'Figma  Component Libraries', 'More Tags', 'Using Fetch  Hooks', 'CSS Layouts', 'SVGs', 'Forms', 'Demo HTMLCSS Page', 'Good  Bad UI 2', 'Robustness', 'Understand HTTP Servers', 'Fetch', 'Javascript Closures', 'Local Storage', 'UI Testing', 'Routing  SPAs', 'useEffect hook', 'Promises', 'UI Fundamentals', 'Fonts', 'HTML Fundamentals', 'CSS Rules', 'Mobile CSS', 'The Javascript Ecosystem', 'Await  Async', 'Javascript Language Features  Syntax', 'Lifescycle', 'Events', 'Class components', 'JSON  Datainterchange formats', 'XMLHttpRequest XHR', 'Javascript Advanced Functions', 'Demo ReactJS Intro  A11y', 'Events  Callbacks', 'Basic Global CSS Usage', 'Image Types', 'zindex']"
COMP6441,Security Engineering and Cyber Security,postgraduate,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background.  We concentrate on analytical skills and the engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Extended"" version of this course (COMP6841) for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling.  CSE students will probably choose to take the extended version but are not required to.  You can transfer between the courses before the census date if you can't make up your mind in advance which is better for you.
The precise topics covered in this introductory course change somewhat from year to year to keep the coverage up-to-date and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.
After completing either of these courses (COMP6441 or COMP6841) you can proceed to the other UNSW Computing Security Courses covering topics in:
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Cloud Security
Professional issues and leadership in security
Web application security
Fun special projects
Masterclass","There are 4 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Crypto literacy
4. Security engineering professional skills","Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this","Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week","General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
Wednesday 6-8pm applied security seminar ",2023.0,T3,2023-10-24 01:56:11,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background.  We concentrate on analytical skills and the engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Extended"" version of this course (COMP6841) for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling.  CSE students will probably choose to take the extended version but are not required to.  You can transfer between the courses before the census date if you can't make up your mind in advance which is better for you.
The precise topics covered in this introductory course change somewhat from year to year to keep the coverage up-to-date and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.
After completing either of these courses (COMP6441 or COMP6841) you can proceed to the other UNSW Computing Security Courses covering topics in:
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Cloud Security
Professional issues and leadership in security
Web application security
Fun special projects
Masterclass There are 4 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Crypto literacy
4. Security engineering professional skills Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
Wednesday 6-8pm applied security seminar ","{'resilience': 12, 'communication': 12, 'leadership': 6, 'critical thinking': 24, 'adaptability': 18, 'teamwork': 12, 'problem solving': 6, 'time management': 6, 'social networking': 6}","{'directed self': 5, 'design security': 5, 'analysis malware': 5, 'engineer security': 5, 'web security application': 5, 'cybercrime': 5, 'strings format': 5, 'security computing': 5, 'digital forensic': 5, 'physical': 5, 'cryptanalysis': 5, 'reverse engineering': 5, 'rootkits': 5, 'analytical': 5, 'cloud security': 5, 'buffer overflow': 5, 'ciphers': 5, 'cross site': 5, 'randomness': 5, 'corruption memory': 5, 'response incident': 5, 'control security': 5}","['Nation States', 'Asymmetric Ciphers', 'Engineering Security', 'Data', 'Communication and Change', 'Command and Control Security by Design', 'Protocols I  Web', 'Privacy', 'International dimensions', 'Integrity', 'Risk + Trust', 'Secrets', 'Surveillance digital identity', 'Cybercrime', 'Measuring Modern Ciphers', 'All Elections', 'The role of law in regulation for cyber security', 'Regulators', 'Humans', 'Cyberfraud', 'Critical infrastructure', 'Legal obligations incl secretkeeping', 'Just Culture Normal Accidents', 'Insiders', 'Planning Authentication']"
COMP6447,System and Software Security Assessment,postgraduate,"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.
Students from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.
The course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.
There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.
Students need a keen, devious and analytical mind.
To get the most from this course you will need to engage in independent study and act as a self-directed learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.
Seek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity.",The course aims to,"Course Learning Outcomes
CLO1 : Have a knowledge of the principle elements of offensive cyber security (such as vulnerability classes, source code auditing, security bugs, memory corruption, numeric overflows, heap exploitation and return oriented programming)
Course Learning Outcomes
CLO2 : Recognise and explain how these elements can be exploited by attackers, their characterising features, weaknesses and countermeasures
Course Learning Outcomes
CLO3 : Given a system, be able to identify vulnerabilities and design and implement reliable exploits
Course Learning Outcomes
CLO4 : Given a system, be able to identify vulnerabilities and design and implement reliable countermeasures to prevent successful exploitation
Course Learning Outcomes
CLO5 : Have an understanding of the key legal, ethical, and professional issues of offensive-defence; and to be able to apply this understanding to design and conduct professional offensive-defence operations","Buffer Overflows
Stack Canaries
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Format Strings
Format Strings
Countermeasures - ASLR, PIE
Format Strings
How to defeat ASLR, PIE
Hacking in the Real World
Harder Challenges
Harder ROP + Revision
Harder return oriented programming - pivot
Heap Exploitation
How to write shellcode
Advanced Reverse Engineering
Learn Pwntools
Memory Fundamentals
History of Hacking
Return Oriented Programming
Return oriented programming
Review of mid-term exam
Revision
Shellcode
Shellcode
Reverse Engineering
Source Code Auditing
Fuzzers
Source Code Auditing
Harder Binaries
Tooling
Environment Setup","General Schedule Information
Technical security is best learned by practice, and labs, wargames, and the project are critical components of the course. These allow students to practice design and implementation skills, and to develop teamwork skills. The project will also assist in developing your ability to reflect on your own work.
Lectures will be split between discussion of concepts, discussion of practical work (and practical demonstrations), revision work, and extension lectures. Study material will be available in both video and note form before each lecture.",2023.0,T3,2023-10-24 01:59:59,"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.
Students from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.
The course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.
There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.
Students need a keen, devious and analytical mind.
To get the most from this course you will need to engage in independent study and act as a self-directed learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.
Seek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity. The course aims to Course Learning Outcomes
CLO1 : Have a knowledge of the principle elements of offensive cyber security (such as vulnerability classes, source code auditing, security bugs, memory corruption, numeric overflows, heap exploitation and return oriented programming)
Course Learning Outcomes
CLO2 : Recognise and explain how these elements can be exploited by attackers, their characterising features, weaknesses and countermeasures
Course Learning Outcomes
CLO3 : Given a system, be able to identify vulnerabilities and design and implement reliable exploits
Course Learning Outcomes
CLO4 : Given a system, be able to identify vulnerabilities and design and implement reliable countermeasures to prevent successful exploitation
Course Learning Outcomes
CLO5 : Have an understanding of the key legal, ethical, and professional issues of offensive-defence; and to be able to apply this understanding to design and conduct professional offensive-defence operations Buffer Overflows
Stack Canaries
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Buffer overflows
Stack canaries
Intro to Reverse Engineering
Format Strings
Format Strings
Countermeasures - ASLR, PIE
Format Strings
How to defeat ASLR, PIE
Hacking in the Real World
Harder Challenges
Harder ROP + Revision
Harder return oriented programming - pivot
Heap Exploitation
How to write shellcode
Advanced Reverse Engineering
Learn Pwntools
Memory Fundamentals
History of Hacking
Return Oriented Programming
Return oriented programming
Review of mid-term exam
Revision
Shellcode
Shellcode
Reverse Engineering
Source Code Auditing
Fuzzers
Source Code Auditing
Harder Binaries
Tooling
Environment Setup General Schedule Information
Technical security is best learned by practice, and labs, wargames, and the project are critical components of the course. These allow students to practice design and implementation skills, and to develop teamwork skills. The project will also assist in developing your ability to reflect on your own work.
Lectures will be split between discussion of concepts, discussion of practical work (and practical demonstrations), revision work, and extension lectures. Study material will be available in both video and note form before each lecture.","{'teamwork': 12, 'critical thinking': 25, 'problem solving': 12, 'adaptability': 25, 'resilience': 12, 'social networking': 12}","{'directed self': 7, 'study independent': 7, 'strings format': 7, 'shellcode': 7, 'software bugs': 7, 'reverse engineering': 7, 'analytical': 7, 'buffer overflow': 7, 'code source': 7, 'security software': 7, 'vulnerabilities': 7, 'act': 7, 'oriented programming': 7, 'corruption memory': 7, 'exploited': 7}","['Buffer overflows', 'Return oriented programming', 'Heap Exploitation', 'Harder Challenges', 'Reverse Engineering', 'Stack Canaries', 'Buffer Overflows', 'Intro to Reverse Engineering', 'Hacking in the Real World', 'Countermeasures  ASLR PIE', 'Fuzzers', 'Stack canaries', 'Harder ROP + Revision', 'Tooling', 'Harder Binaries', 'How to write shellcode', 'Return Oriented Programming', 'Memory Fundamentals', 'Advanced Reverse Engineering', 'Source Code Auditing', 'Harder return oriented programming  pivot', 'How to defeat ASLR PIE', 'Format Strings', 'Learn Pwntools', 'Environment Setup', 'History of Hacking', 'Shellcode']"
COMP6714,Information Retrieval and Web Search,postgraduate,"Information retrieval (IR) is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.
This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:
Information Retrieval:
Web Search:
The lecture materials will be complemented by a non-programming assignment and a programming project.","This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval, including its manifestation as Web Search. At the end of the course students will have a solid understanding of IR, which will give them the capability to conduct better searches in large document collections, or to build systems to do such searching.
The course is an advanced elective for both undergraduate and postgraduate students.","Course Learning Outcomes
CLO1 : Analyze the whole process of information retrieval and search engines
Course Learning Outcomes
CLO2 : Apply various document and retrieval models in information retrieval
Course Learning Outcomes
CLO3 : Use various indexing and query processing techniques and their variants
Course Learning Outcomes
CLO4 : Develop solutions for real problems using existing IR technologies
Course Learning Outcomes
CLO5 : Discuss the past, present and future of information retrieval and search engine technologies","Compression
Crawling
Evaluation
Index Construction
Introduction, Boolean Retrieval
Link Analysis
Optional Topics; Course Revision
Preprocessing
Vector Space Model","General Schedule Information
The course schedule is an approximate guide to the sequence of topics in this course. It is subject to change as the term progresses.",2023.0,T3,2023-10-24 02:03:54,"Information retrieval (IR) is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.
This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:
Information Retrieval:
Web Search:
The lecture materials will be complemented by a non-programming assignment and a programming project. This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval, including its manifestation as Web Search. At the end of the course students will have a solid understanding of IR, which will give them the capability to conduct better searches in large document collections, or to build systems to do such searching.
The course is an advanced elective for both undergraduate and postgraduate students. Course Learning Outcomes
CLO1 : Analyze the whole process of information retrieval and search engines
Course Learning Outcomes
CLO2 : Apply various document and retrieval models in information retrieval
Course Learning Outcomes
CLO3 : Use various indexing and query processing techniques and their variants
Course Learning Outcomes
CLO4 : Develop solutions for real problems using existing IR technologies
Course Learning Outcomes
CLO5 : Discuss the past, present and future of information retrieval and search engine technologies Compression
Crawling
Evaluation
Index Construction
Introduction, Boolean Retrieval
Link Analysis
Optional Topics; Course Revision
Preprocessing
Vector Space Model General Schedule Information
The course schedule is an approximate guide to the sequence of topics in this course. It is subject to change as the term progresses.","{'resilience': 50, 'communication': 25, 'problem solving': 25}","{'web system': 10, 'algorithmic': 10, 'engine search': 10, 'information retrieval': 10, 'link analysis': 10, 'space vector': 10, 'index': 10, 'general model': 10, 'build systems': 10, 'web search': 10}","['Index Construction', 'Vector Space Model', 'Crawling', 'Evaluation', 'Link Analysis', 'Compression', 'Preprocessing']"
COMP6841,Extended Security Engineering and Cyber Security,postgraduate,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security.  We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling.  The course provides an introduction to applied cyber security, as well as analytical skills and taking an engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Core"" version of this course (COMP6441).  CSE students will probably choose to take this Extended course rather than the core course, but are not required to.  You can transfer between these two associated courses before the census date if you can't make up your mind in advance which is better for you.
This extended course is the core course plus additional applied technical material.
After completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:
The precise topics covered in this course will change from year to year to keep the coverage up-to-date and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporary security, a good understanding of the current state of the field, and have begun to think like a security engineer.
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Professional issues and leadership in security
Web application security
Special projects
Masterclass","There are 5 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Cryptographic literacy
4. Applied security technical skills (introductory level)
5. Security engineering professional skills","Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this
Course Learning Outcomes
CLO8 : explain the main classes of memory corruption vulnerabilities and the relative strengths and weaknesses of currently deployed countermeasures
Course Learning Outcomes
CLO9 : successfully attack common vulnerabilities in web based systems and binaries","Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week","General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Seminar (not recorded, attend in person) : Wednesday 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
 ",2023.0,T3,2023-10-24 02:07:47,"In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.
This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security.  We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling.  The course provides an introduction to applied cyber security, as well as analytical skills and taking an engineering approach to security design. We'll also bring you up to date with the current main trends in cybersecurity.
In this course you will undertake an applied self directed security project. 
There is an associated ""Core"" version of this course (COMP6441).  CSE students will probably choose to take this Extended course rather than the core course, but are not required to.  You can transfer between these two associated courses before the census date if you can't make up your mind in advance which is better for you.
This extended course is the core course plus additional applied technical material.
After completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:
The precise topics covered in this course will change from year to year to keep the coverage up-to-date and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporary security, a good understanding of the current state of the field, and have begun to think like a security engineer.
Our intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time.
Digital forensics
Penetration testing
Memory corruption and exploitation
Software assurance
Incident response
Malware analysis and reversing
Cryptanalysis
Professional issues and leadership in security
Web application security
Special projects
Masterclass There are 5 desired objectives of this course:
1. Think like a security engineer
2. Cybersecurity literacy
3. Cryptographic literacy
4. Applied security technical skills (introductory level)
5. Security engineering professional skills Course Learning Outcomes
CLO1 : make reasonable assessments of likely future trends and emerging risks in cyber security, based on an understanding of the historical context and current developments in the field
Course Learning Outcomes
CLO2 : demonstrate an understanding of the relationship of cyber security to related fields including safety science, psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Course Learning Outcomes
CLO3 : analyse real world scenarios and apply a security engineering approach to make appropriate decisions taking into consideration key factors such as cost, human factors, risk, and privacy
Course Learning Outcomes
CLO4 : demonstrate and reflect upon professional competencies including analysis, time and project management, reasonableness checking, self directed research, teamwork, community building, ethical professional behaviour and effective communication
Course Learning Outcomes
CLO5 : apply fundamental cryptographic primitives and protocols to achieve desired properties (including confidentiality, integrity, and authentication) and explain their weaknesses and appropriate use
Course Learning Outcomes
CLO6 : apply concepts such as information and work measures, randomness, and privacy to design appropriate solutions for real world security problems, or recognise when no effective solutions are likely to be feasible
Course Learning Outcomes
CLO7 : analyse their prior approach to security in everyday life and reflect on how a security engineering mindset changes this
Course Learning Outcomes
CLO8 : explain the main classes of memory corruption vulnerabilities and the relative strengths and weaknesses of currently deployed countermeasures
Course Learning Outcomes
CLO9 : successfully attack common vulnerabilities in web based systems and binaries Extended 6841 Seminar - Buffer overflows
Regulation 3040 Seminar - Legal obligations incl. secret-keeping
Extended 6841 Seminar - Cross Site Scripting
Regulation 3040 Seminar - Regulators
Extended 6841 Seminar - Forensics
Regulation 3040 Seminar - Privacy
Extended 6841 Seminar - Format Strings
Regulation 3040 Seminar - Critical infrastructure
Extended 6841 Seminar - Malware Analysis
Regulation 3040 Seminar - Cyberfraud
Extended 6841 Seminar - Reverse Engineering
Regulation 3040 Seminar - Cybercrime
Extended 6841 Seminar - Revision
Regulation 3040 Seminar - International dimensions
Extended 6841 Seminar - Rootkits
Regulation 3040 Seminar - Surveillance; digital identity
Extended 6841 Seminar - SQL Injection
Regulation 3040 Seminar - The role of law in regulation for cyber security
LEC 1 - All: Elections
LEC 2 - Nation States
LEC 1 - All: Welcome to the Course
LEC 2 - Engineering Security
LEC 1 - Asymmetric Ciphers
LEC 2 - Insiders
LEC 1 - Command and Control, Security by Design
LEC 2 - Communication and Change
LEC 1 - Integrity
LEC 2 - Privacy
LEC 1 - Measuring, Modern Ciphers
LEC 2 - Humans
LEC 1 - Planning, Authentication
LEC 2 - Data
LEC 1 - Protocols I - Web
LEC 2 - Just Culture, Normal Accidents
LEC 1 - Risk + Trust 
LEC 2 - Secrets
Term Break - Flexibility Week General Schedule Information
Lectures
Face to face lecture streamstudents are STRONGLY encouraged to attend the lectures.  Transfer out of the face to face stream to free up a spot for another student if you will not be attending. Online lecture stream students watch lecture recordings asynchronously.  
General Schedule Information
Lecture: Monday lecture 4-6pm
Lecture: Tuesday lecture 6-8pm
Seminar (not recorded, attend in person) : Wednesday 6-8pm
Tutorial (timing varies)
Tutorials are face to face for all students.
  OPTIONAL ACTIVITIES:
Monday ""Security Theatre"" movie night 6-8pm
Tuesday Law seminar 3-4.30pm
 ","{'resilience': 12, 'communication': 12, 'leadership': 6, 'critical thinking': 25, 'adaptability': 19, 'teamwork': 12, 'time management': 6, 'social networking': 6}","{'directed self': 4, 'design security': 4, 'analysis malware': 4, 'engineer security': 4, 'web security application': 4, 'person': 4, 'cybercrime': 4, 'strings format': 4, 'security computing': 4, 'digital forensic': 4, 'physical': 4, 'cryptanalysis': 4, 'reverse engineering': 4, 'based systems': 4, 'rootkits': 4, 'analytical': 4, 'buffer overflow': 4, 'ciphers': 4, 'cross site': 4, 'vulnerabilities': 4, 'randomness': 4, 'corruption memory': 4, 'response incident': 4, 'control security': 4}","['Nation States', 'Asymmetric Ciphers', 'Engineering Security', 'Data', 'Communication and Change', 'Command and Control Security by Design', 'Protocols I  Web', 'Privacy', 'International dimensions', 'Integrity', 'Risk + Trust', 'Secrets', 'Surveillance digital identity', 'Cybercrime', 'Measuring Modern Ciphers', 'All Elections', 'The role of law in regulation for cyber security', 'Regulators', 'Humans', 'Cyberfraud', 'Critical infrastructure', 'Legal obligations incl secretkeeping', 'Just Culture Normal Accidents', 'Insiders', 'Planning Authentication']"
COMP6991,Solving Modern Programming Problems with Rust,postgraduate,"This course aims to provide commentary and critique on the practice of programming, and the tooling used to program (primarily programming languages themselves). A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, meta-programming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be well-considered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.
While proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.
Per the advice of previous students, COMP6991 is a difficult course with a considerable workload. Please reach out to us either on the course forum or the course email if you're not sure whether COMP6991 is right for you.","To encourage students to explore new perspectives in programming, particularly with respect to program safety, rigour, efficiency and productivity. After this course, students should be able to design and implement good programs in Rust and improve their design and reasoning skills in programming languages other than Rust ","Course Learning Outcomes
CLO1 : Explain Rust's primary goals (safety, efficiency, productivity) and their motivations
Course Learning Outcomes
CLO2 : Develop programming solutions to substantial problems using Rust
Course Learning Outcomes
CLO3 : Produce effective program designs, and write unit tests and documentation tests to validate Rust programs
Course Learning Outcomes
CLO4 : Create well-considered, high performance, low cost abstractions to solve problems
Course Learning Outcomes
CLO5 : Reason about software through static guarantees to create robust interfaces and produce correct behaviour
Course Learning Outcomes
CLO6 : Manage Rust projects using the Rustup toolchain and Cargo package manager","Borrowing, lifetimes
Collections, error handling
Concurrency, parallelism
Course intro, toolchain setup
Documentation, testing, modularity
Flexibility week
Functions, meta-programming
Polymorphism
Rust intro, algebraic types
Unsafe, community crates
Wrap up, exam overview (No exercises)","General Schedule Information
2x 2-hour lectures weeks 1-5,7-10
1x 2-hour workshop weeks 1-5,7-10",2023.0,T3,2023-10-24 02:11:37,"This course aims to provide commentary and critique on the practice of programming, and the tooling used to program (primarily programming languages themselves). A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, meta-programming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be well-considered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.
While proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.
Per the advice of previous students, COMP6991 is a difficult course with a considerable workload. Please reach out to us either on the course forum or the course email if you're not sure whether COMP6991 is right for you. To encourage students to explore new perspectives in programming, particularly with respect to program safety, rigour, efficiency and productivity. After this course, students should be able to design and implement good programs in Rust and improve their design and reasoning skills in programming languages other than Rust  Course Learning Outcomes
CLO1 : Explain Rust's primary goals (safety, efficiency, productivity) and their motivations
Course Learning Outcomes
CLO2 : Develop programming solutions to substantial problems using Rust
Course Learning Outcomes
CLO3 : Produce effective program designs, and write unit tests and documentation tests to validate Rust programs
Course Learning Outcomes
CLO4 : Create well-considered, high performance, low cost abstractions to solve problems
Course Learning Outcomes
CLO5 : Reason about software through static guarantees to create robust interfaces and produce correct behaviour
Course Learning Outcomes
CLO6 : Manage Rust projects using the Rustup toolchain and Cargo package manager Borrowing, lifetimes
Collections, error handling
Concurrency, parallelism
Course intro, toolchain setup
Documentation, testing, modularity
Flexibility week
Functions, meta-programming
Polymorphism
Rust intro, algebraic types
Unsafe, community crates
Wrap up, exam overview (No exercises) General Schedule Information
2x 2-hour lectures weeks 1-5,7-10
1x 2-hour workshop weeks 1-5,7-10","{'problem solving': 20, 'communication': 10, 'critical thinking': 20, 'reading': 30, 'time management': 10, 'resilience': 10}","{'polymorphism': 11, 'modularity': 11, 'programming concept': 11, 'programming languages': 11, 'programming develop': 11, 'program designs': 11, 'algebraic': 11, 'high performance': 11, 'validate': 11}","['Unsafe community crates', 'Documentation testing modularity', 'Rust intro algebraic types', 'Concurrency parallelism', 'Functions metaprogramming', 'Borrowing lifetimes', 'Collections error handling', 'Polymorphism']"
COMP9021,Principles of Programming,postgraduate,"This course provides students with solid conceptual knowledge and practical skills of both generic programming techniques and Python programming, to be used effectively in the many specialised courses that expect students to have acquired strong enough programming skills and well mastered the Python language. The features of the language are covered to a significant depth, and there is a strong emphasis on problem solving, from a broad base of application domains, with quite a few that involve mathematical notions. Like all foundation courses for postgraduate students, there is a lot of contents to study in limited time and the learning curve is not gentle. Still the course does not assume any prior knowledge of programming in general, or of Python programming in particular, as its content is self-contained for students with the expected mathematical background.","The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, including object-oriented features and the tkinter library to create widgets. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools.","Course Learning Outcomes
CLO1 : Design, implement and test programs written in a language with procedural, object-oriented, and functional constructs.
Course Learning Outcomes
CLO2 : Apply Python language, including advanced syntax and programming techniques.
Course Learning Outcomes
CLO3 : Analyse what happens behind the scene when operating on Python data types, with an understanding of efficiency and memory use.
Course Learning Outcomes
CLO4 : Understand fundamental data structures and algorithms.
Course Learning Outcomes
CLO5 : Design programs to solve small to medium scale problems.
Course Learning Outcomes
CLO6 : Create clear, reliable, well-structured, well-tested, well-documented programs.
Course Learning Outcomes
CLO7 : Apply appropriate tools, in particular for editing, testing and debugging.",,"General Schedule Information
This is a tentative schedule:
Week 1: Introduction to operators, strings, lists, tuples, dictionaries, control structures, reading from files, printing, functions.
Week 2: Functions from the random module. Exceptions. Sets. More operations on strings and lists. More on control struc- tures. Arithmetic operators. Positional and keyword arguments, default values, use of star for function parameters and arguments.
Week 3: String formatting. Various forms of comprehension. Representations in a given base, conversions between bases. The Unicode character set. Sorting. Lambda expressions. Floating point computations. Iterators. Timing pro- gram execution.
Week 4: Walrus operator. Zipping and plotting sequences. Finer use of timeit, insights on the complexity of operations on lists versus sets. Global versus local vari- ables. More operations on sets. Simple versus complex types as default argu- ments. Bitwise operators.
Week 5: More on generator expressions. Slices. Insights on space allocation for lists. Working with paths in a platform- independent manner. Reading from and writing to csv files. More use of the standard library: defaultdict and Counter from collections, product from itertools... Generator functions.
Week 7: Named tuples. Operations with in- finities. Regular expressions. Lists of lists. Numpy arrays, types, reshaping, broadcasting, arithmetic and Boolean operators. More on plotting, creating animations with matplotlib. Command line arguments.
Week 8: Inner functions. Recursion. Mem- oisation, using default arguments or the lru_cache decorator. The __de- faults__ attribute of functions. Iter- tools module: permutations. Turning recursive designs into iterative designs. Specialised operations on strings.
Week 9: Classes and objects. Special meth- ods, in particular for the implementa- tion of operators. Customised excep- tions. More on function parameters. Insights on object creation and initial- isation and on OO syntax. Abstract classes. The fraction module.
Week 10: Dynamic programming. Inheritance. Decorators. Properties, getters and setters. Sorting. Presentation of more optional material and modules for spe- cialised applications: beautifulsoup for web crawling, PIL for image process- ing, pygame...",2023.0,T3,2023-10-24 02:15:30,"This course provides students with solid conceptual knowledge and practical skills of both generic programming techniques and Python programming, to be used effectively in the many specialised courses that expect students to have acquired strong enough programming skills and well mastered the Python language. The features of the language are covered to a significant depth, and there is a strong emphasis on problem solving, from a broad base of application domains, with quite a few that involve mathematical notions. Like all foundation courses for postgraduate students, there is a lot of contents to study in limited time and the learning curve is not gentle. Still the course does not assume any prior knowledge of programming in general, or of Python programming in particular, as its content is self-contained for students with the expected mathematical background. The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, including object-oriented features and the tkinter library to create widgets. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools. Course Learning Outcomes
CLO1 : Design, implement and test programs written in a language with procedural, object-oriented, and functional constructs.
Course Learning Outcomes
CLO2 : Apply Python language, including advanced syntax and programming techniques.
Course Learning Outcomes
CLO3 : Analyse what happens behind the scene when operating on Python data types, with an understanding of efficiency and memory use.
Course Learning Outcomes
CLO4 : Understand fundamental data structures and algorithms.
Course Learning Outcomes
CLO5 : Design programs to solve small to medium scale problems.
Course Learning Outcomes
CLO6 : Create clear, reliable, well-structured, well-tested, well-documented programs.
Course Learning Outcomes
CLO7 : Apply appropriate tools, in particular for editing, testing and debugging.  General Schedule Information
This is a tentative schedule:
Week 1: Introduction to operators, strings, lists, tuples, dictionaries, control structures, reading from files, printing, functions.
Week 2: Functions from the random module. Exceptions. Sets. More operations on strings and lists. More on control struc- tures. Arithmetic operators. Positional and keyword arguments, default values, use of star for function parameters and arguments.
Week 3: String formatting. Various forms of comprehension. Representations in a given base, conversions between bases. The Unicode character set. Sorting. Lambda expressions. Floating point computations. Iterators. Timing pro- gram execution.
Week 4: Walrus operator. Zipping and plotting sequences. Finer use of timeit, insights on the complexity of operations on lists versus sets. Global versus local vari- ables. More operations on sets. Simple versus complex types as default argu- ments. Bitwise operators.
Week 5: More on generator expressions. Slices. Insights on space allocation for lists. Working with paths in a platform- independent manner. Reading from and writing to csv files. More use of the standard library: defaultdict and Counter from collections, product from itertools... Generator functions.
Week 7: Named tuples. Operations with in- finities. Regular expressions. Lists of lists. Numpy arrays, types, reshaping, broadcasting, arithmetic and Boolean operators. More on plotting, creating animations with matplotlib. Command line arguments.
Week 8: Inner functions. Recursion. Mem- oisation, using default arguments or the lru_cache decorator. The __de- faults__ attribute of functions. Iter- tools module: permutations. Turning recursive designs into iterative designs. Specialised operations on strings.
Week 9: Classes and objects. Special meth- ods, in particular for the implementa- tion of operators. Customised excep- tions. More on function parameters. Insights on object creation and initial- isation and on OO syntax. Abstract classes. The fraction module.
Week 10: Dynamic programming. Inheritance. Decorators. Properties, getters and setters. Sorting. Presentation of more optional material and modules for spe- cialised applications: beautifulsoup for web crawling, PIL for image process- ing, pygame...","{'problem solving': 13, 'operators': 7, 'resilience': 20, 'critical thinking': 27, 'teamwork': 7, 'communication': 20, 'adaptability': 7}","{'bitwise operators': 4, 'numpy': 4, 'python': 4, 'programs design': 4, 'independent platform': 4, 'paths': 4, 'matplotlib': 4, 'beautifulsoup': 4, 'limited': 4, 'programming language': 4, 'dynamic programming': 4, 'parameters': 4, 'library': 4, 'arithmetic': 4, 'library standard': 4, 'programming concept': 4, 'oriented object': 4, 'algorithms': 4, 'expression regular': 4, 'generic programming': 4, 'class abstract': 4, 'tested well': 4, 'widgets': 4, 'modules': 4, 'process image': 4, 'base conversion': 4, 'pygame': 4, 'functions generator': 4}",No Information about Topics
COMP9024,Data Structures and Algorithms,postgraduate,"Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, search trees and text processing.","This course aims to make students into confident Computer Scientists, armed with a rigorous understanding of useful data structures and algorithms, and ready to continue with their study in more advanced computing courses.
Since it is a pre-requisite for many later computing courses, it is normally taken early in Masters program.","Course Learning Outcomes
CLO1 : Understand a range of fundamental data structures and algorithms
Course Learning Outcomes
CLO2 : Evaluate the efficiency of software
Course Learning Outcomes
CLO3 : Analyse the correctness of algorithms
Course Learning Outcomes
CLO4 : Apply data structures and algorithms to problems in Computer Science
Course Learning Outcomes
CLO5 : Create new data structures and algorithms for problems in Computer Science","Consultation Hours:
- Mon 10:00AM-12:00PM | Location: Kens Quad Lv2 2082 Computer Lab  | Staff: Luke Wang
- Tue 3:00PM-4:00PM | Location: 217B, Building K17 | Staff: Aditya Joshi
Online consultation hours will be confirmed on the course homepage.
Consultation Hours:
- Tue 3:00PM-4:00PM | Location: 217B, Building K17 | Staff: Aditya Joshi
Online consultation hours will be confirmed on the course homepage.
Lectures:
Mon 04:00PM - 06:00PM | Venue: Ainsworth G03
Wed 02:00PM - 04:00PM | Venue: Physics Theatre
Lectures:
Wed 02:00PM - 04:00PM | Venue: Physics Theatre
No lecture on Monday due to public holiday
Midterm test","General Schedule Information
Lectures introduce concepts and show examples. Lectures will be held as per the following schedule:
Mon 04:00PM - 06:00PM
Weeks: 1-3,5,7-10
Venue: Ainsworth G03
Wed 02:00PM - 04:00PM
Weeks: 1-5,7-10
Venue: Physics Theatre
Consultation hours: These timeslots will allow students to get their questions about the course answered in person/online.
Tue 3:00PM - 4:00PM / In-person / Who: Aditya Joshi / Location: 217B, K-17 Building
Additional in-person and online consultation hours to be communicated. Please refer to the course homepage.
In addition,
Problem sets reinforce concepts, provide additional examples and allow students to solve problems
Problem sets will be available on the course homepage.
Assignments further reinforce concepts and allow students to solve larger problems",2023.0,T3,2023-10-24 02:19:20,"Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, search trees and text processing. This course aims to make students into confident Computer Scientists, armed with a rigorous understanding of useful data structures and algorithms, and ready to continue with their study in more advanced computing courses.
Since it is a pre-requisite for many later computing courses, it is normally taken early in Masters program. Course Learning Outcomes
CLO1 : Understand a range of fundamental data structures and algorithms
Course Learning Outcomes
CLO2 : Evaluate the efficiency of software
Course Learning Outcomes
CLO3 : Analyse the correctness of algorithms
Course Learning Outcomes
CLO4 : Apply data structures and algorithms to problems in Computer Science
Course Learning Outcomes
CLO5 : Create new data structures and algorithms for problems in Computer Science Consultation Hours:
- Mon 10:00AM-12:00PM | Location: Kens Quad Lv2 2082 Computer Lab  | Staff: Luke Wang
- Tue 3:00PM-4:00PM | Location: 217B, Building K17 | Staff: Aditya Joshi
Online consultation hours will be confirmed on the course homepage.
Consultation Hours:
- Tue 3:00PM-4:00PM | Location: 217B, Building K17 | Staff: Aditya Joshi
Online consultation hours will be confirmed on the course homepage.
Lectures:
Mon 04:00PM - 06:00PM | Venue: Ainsworth G03
Wed 02:00PM - 04:00PM | Venue: Physics Theatre
Lectures:
Wed 02:00PM - 04:00PM | Venue: Physics Theatre
No lecture on Monday due to public holiday
Midterm test General Schedule Information
Lectures introduce concepts and show examples. Lectures will be held as per the following schedule:
Mon 04:00PM - 06:00PM
Weeks: 1-3,5,7-10
Venue: Ainsworth G03
Wed 02:00PM - 04:00PM
Weeks: 1-5,7-10
Venue: Physics Theatre
Consultation hours: These timeslots will allow students to get their questions about the course answered in person/online.
Tue 3:00PM - 4:00PM / In-person / Who: Aditya Joshi / Location: 217B, K-17 Building
Additional in-person and online consultation hours to be communicated. Please refer to the course homepage.
In addition,
Problem sets reinforce concepts, provide additional examples and allow students to solve problems
Problem sets will be available on the course homepage.
Assignments further reinforce concepts and allow students to solve larger problems","{'problem solving': 17, 'adaptability': 17, 'time management': 17, 'resilience': 33, 'reading': 17}","{'physics': 12, 'design software': 12, 'graphs': 12, 'dynamic datum': 12, 'person': 12, 'design hardware': 12, 'developers software': 12, 'algorithm': 12}",No Information about Topics
COMP9032,Microprocessors and Interfacing,postgraduate,"This course introduces the students to the basics of microprocessors. It covers microprocessor architecture, assembly laguage programming, I/O interfacing and microprocessor applications. By taking this course, students gain a deep understanding of microprocessor architecture, programming techniques, and the skills required to interface microprocessors with a range of devices, which is valuable for careers in embedded systems, hardware design, firmware development, and other fields where the integration of microprocessors with external systems is essential.","This course aims to provide students with a solid theoretical foundation and practical skills in microprocessors and interfacing, preparing students for careers in fields such as embedded systems, computer architecture, hardware design, firmware development.","Course Learning Outcomes
CLO1 : Demonstrate a good understanding of microprocessor architecture and the interface between software and hardware.
Course Learning Outcomes
CLO2 : Have sound assembly programming skills (based on the AVR microprocessor).
Course Learning Outcomes
CLO3 : Understand how the communication between microprocessor and I/O devices works.
Course Learning Outcomes
CLO4 : Understand how analog signals are converted into digital signals and vice versa.
Course Learning Outcomes
CLO5 : Demonstrate the ability to solve various problems with the AVR microcontroller.
Course Learning Outcomes
CLO6 : Demonstrate the ability to work in teams for lab tasks and design project.",,"General Schedule Information
Week 1:
Lecture: Course Introduction; Processor Fundamentals & ISA
Lab: Install Microchip Studio; Form lab groups
Week 2:
Lecture: AVR Assembly Programming
Lab: Lab1
Week 3:
Lecture: AVR Assembly Programming
Lab: Lab1/Lab2
Week 4:
Lecture: Parallel Input/Output
Lab: Lab2
Week 5:
Lecture: Input/Output Devices
Lab: Lab2 /Lab3
Assignemnt: Project released
Week 6:
Flex Week: No Classes
Week 7:
Lecture: Interrupt
Lab: Lab3 /Lab4
Week 8:
Lectue: Analog Input/Output
Lab: Lab4
Week 9:
Lecture: Serial Communications
Lab: project design
Week 10:
Lecture: Course Review
Lab: Project demo
Assignment: Project report due",2023.0,T3,2023-10-24 02:23:08,"This course introduces the students to the basics of microprocessors. It covers microprocessor architecture, assembly laguage programming, I/O interfacing and microprocessor applications. By taking this course, students gain a deep understanding of microprocessor architecture, programming techniques, and the skills required to interface microprocessors with a range of devices, which is valuable for careers in embedded systems, hardware design, firmware development, and other fields where the integration of microprocessors with external systems is essential. This course aims to provide students with a solid theoretical foundation and practical skills in microprocessors and interfacing, preparing students for careers in fields such as embedded systems, computer architecture, hardware design, firmware development. Course Learning Outcomes
CLO1 : Demonstrate a good understanding of microprocessor architecture and the interface between software and hardware.
Course Learning Outcomes
CLO2 : Have sound assembly programming skills (based on the AVR microprocessor).
Course Learning Outcomes
CLO3 : Understand how the communication between microprocessor and I/O devices works.
Course Learning Outcomes
CLO4 : Understand how analog signals are converted into digital signals and vice versa.
Course Learning Outcomes
CLO5 : Demonstrate the ability to solve various problems with the AVR microcontroller.
Course Learning Outcomes
CLO6 : Demonstrate the ability to work in teams for lab tasks and design project.  General Schedule Information
Week 1:
Lecture: Course Introduction; Processor Fundamentals & ISA
Lab: Install Microchip Studio; Form lab groups
Week 2:
Lecture: AVR Assembly Programming
Lab: Lab1
Week 3:
Lecture: AVR Assembly Programming
Lab: Lab1/Lab2
Week 4:
Lecture: Parallel Input/Output
Lab: Lab2
Week 5:
Lecture: Input/Output Devices
Lab: Lab2 /Lab3
Assignemnt: Project released
Week 6:
Flex Week: No Classes
Week 7:
Lecture: Interrupt
Lab: Lab3 /Lab4
Week 8:
Lectue: Analog Input/Output
Lab: Lab4
Week 9:
Lecture: Serial Communications
Lab: project design
Week 10:
Lecture: Course Review
Lab: Project demo
Assignment: Project report due","{'communication': 25, 'problem solving': 25, 'critical thinking': 25, 'social networking': 25}","{'digital signal': 10, 'architecture hardware': 10, 'firmware': 10, 'avr': 10, 'design hardware': 10, 'microprocessors': 10, 'embed system': 10, 'microprocessor architecture': 10, 'microchip': 10, 'development course': 10}","['AVR Assembly Programming', 'InputOutput Devices', 'Analog InputOutput', 'Parallel InputOutput', 'Interrupt', 'Serial Communications']"
COMP9101,Design and Analysis of Algorithms,postgraduate,"Students will learn a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc). This will include famous algorithms using these ideas in graph problems, string matching, etc, but more importantly how to apply these ideas to develop correct and efficient algorithms to solve new problems. Students will develop their abilities in problem solving and analysis of algorithms, as well as in written communication as they express and argue for their ideas.
There is also an extended Algorithms course COMP3821/9801 which runs only in T1 each year. We recommend that top students take the extended course instead of this one. Extended Algorithms moves at a faster pace and covers more topics and some topics in more depth. It assumes higher autonomy from students and offers a few different perspectives on problem solving.",,"Course Learning Outcomes
CLO1 : Design new algorithms for solving new problems, using various design techniques (greedy, dynamic programming, divide and conquer, etc)
Course Learning Outcomes
CLO2 : Estimate efficiency of algorithms and justify their correctness
Course Learning Outcomes
CLO3 : Demonstrate improved problem solving skills",,"General Schedule Information
Week 1: introduction, preliminaries
Week 2: divide and conquer
Week 3: the greedy method
Week 4: the greedy method
Week 5: flow networks
Week 6: --- flexi week----
Week 7: dynamic programming
Week 8: dynamic programming
Week 9: string matching, linear programming
Week 10: intractability",2023.0,T3,2023-10-24 02:27:40,"Students will learn a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc). This will include famous algorithms using these ideas in graph problems, string matching, etc, but more importantly how to apply these ideas to develop correct and efficient algorithms to solve new problems. Students will develop their abilities in problem solving and analysis of algorithms, as well as in written communication as they express and argue for their ideas.
There is also an extended Algorithms course COMP3821/9801 which runs only in T1 each year. We recommend that top students take the extended course instead of this one. Extended Algorithms moves at a faster pace and covers more topics and some topics in more depth. It assumes higher autonomy from students and offers a few different perspectives on problem solving.  Course Learning Outcomes
CLO1 : Design new algorithms for solving new problems, using various design techniques (greedy, dynamic programming, divide and conquer, etc)
Course Learning Outcomes
CLO2 : Estimate efficiency of algorithms and justify their correctness
Course Learning Outcomes
CLO3 : Demonstrate improved problem solving skills  General Schedule Information
Week 1: introduction, preliminaries
Week 2: divide and conquer
Week 3: the greedy method
Week 4: the greedy method
Week 5: flow networks
Week 6: --- flexi week----
Week 7: dynamic programming
Week 8: dynamic programming
Week 9: string matching, linear programming
Week 10: intractability","{'problem solving': 33, 'communication': 33, 'social networking': 33}","{'dynamic programming': 17, 'graph': 17, 'linear programming': 17, 'algorithms': 17, 'conquer divide': 17, 'design algorithm': 17}","['flow networks', 'divide and conquer', 'the greedy method', 'intractability', 'dynamic programming', 'string matching linear programming']"
COMP9164,Concepts of Programming Languages,postgraduate,"This course discusses and relates a range of programming language concepts and paradigms, including imperative, object-oriented, functional, concurrent & parallel programming. It covers the theoretical foundations (syntax, operational, axiomatic and denotational semantics) as well as practical development and implementation aspects (dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency). Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed.","This course aims to impart the core concepts and principles of programming language design. The course will improve students' appreciation of why programming languages are the way they are, how programming language features can be designed to guarantee desirable properties, and how programming languages are defined mathematically and implemented practically. The practical and theoretical skills in this course can deepen your understanding of what you're doing as a programmer, and make current trends in programming language design intelligible; it also provides essential skills for anyone looking to develop their own programming language, or get into programming language research.","Course Learning Outcomes
CLO1 : Distinguish superficial (i.e., syntactic) from fundamental (i.e., semantic) differences of programming languages
Course Learning Outcomes
CLO2 : Read, write and reason about programs in various programming language paradigms, including imperative, object-oriented, functional and concurrent programming
Course Learning Outcomes
CLO3 : Use the basic tools of language design and analysis, including formal languages and formal descriptions of static and dynamic semantics
Course Learning Outcomes
CLO4 : Use modern language features, such as dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency features","Abstract Data Types, Overloading and Subtyping
Abstract Machines, Environments
Concurrency, Revision
Flexibility Week
Imperative Programming, MinHS
Intro, Haskell, Induction
Natural Deduction, Rule Induction, Syntax
Nothing
Operational Semantics, Lambda Calculus
Polymorphism, Type Inference
Properties, Type safety, Type theory","General Schedule Information
This schedule is tentative and may evolve as the course progresses.",2023.0,T3,2023-10-24 02:31:30,"This course discusses and relates a range of programming language concepts and paradigms, including imperative, object-oriented, functional, concurrent & parallel programming. It covers the theoretical foundations (syntax, operational, axiomatic and denotational semantics) as well as practical development and implementation aspects (dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency). Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed. This course aims to impart the core concepts and principles of programming language design. The course will improve students' appreciation of why programming languages are the way they are, how programming language features can be designed to guarantee desirable properties, and how programming languages are defined mathematically and implemented practically. The practical and theoretical skills in this course can deepen your understanding of what you're doing as a programmer, and make current trends in programming language design intelligible; it also provides essential skills for anyone looking to develop their own programming language, or get into programming language research. Course Learning Outcomes
CLO1 : Distinguish superficial (i.e., syntactic) from fundamental (i.e., semantic) differences of programming languages
Course Learning Outcomes
CLO2 : Read, write and reason about programs in various programming language paradigms, including imperative, object-oriented, functional and concurrent programming
Course Learning Outcomes
CLO3 : Use the basic tools of language design and analysis, including formal languages and formal descriptions of static and dynamic semantics
Course Learning Outcomes
CLO4 : Use modern language features, such as dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency features Abstract Data Types, Overloading and Subtyping
Abstract Machines, Environments
Concurrency, Revision
Flexibility Week
Imperative Programming, MinHS
Intro, Haskell, Induction
Natural Deduction, Rule Induction, Syntax
Nothing
Operational Semantics, Lambda Calculus
Polymorphism, Type Inference
Properties, Type safety, Type theory General Schedule Information
This schedule is tentative and may evolve as the course progresses.","{'resilience': 33, 'reading': 33, 'critical thinking': 11, 'problem solving': 11, 'time management': 11}","{'polymorphism': 12, 'programming language': 12, 'oriented object': 12, 'lambda calculus': 12, 'semantics': 12, 'haskell': 12, 'axiomatic': 12, 'formal language': 12}","['Natural Deduction Rule Induction Syntax', 'Abstract Machines Environments', 'Operational Semantics Lambda Calculus', 'Polymorphism Type Inference', 'Imperative Programming MinHS', 'Intro Haskell Induction', 'Properties Type safety Type theory', 'Abstract Data Types Overloading and Subtyping']"
COMP9222,Digital Circuits and Systems,postgraduate,"This course teaches students the fundamentals of digital design.
The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.
 ","This course aims to provide students with a knowledge of designing and implementing simple digital logic circuits & systems. The basic building blocks of combinational and sequential circuits are introduced to enable students to develop circuit solutions to problems and to understand the design and operation of hardware models of digital systems. Students are introduced to the VHDL hardware description language as a means of describing circuits. Computer-aided design tools are used to specify, simulate and implement a variety of simple digital systems. Students learn how to implement and test their designs using Field-Programmmable Gate Arrays.
As an introductory course, a principal aim is to prepare students for more advanced study in follow-on courses.","Course Learning Outcomes
CLO1 : Design and implement combinational and synchronous sequential logic circuits
Course Learning Outcomes
CLO2 : Analyse combinational and sequential digital logic circuits
Course Learning Outcomes
CLO3 : Describe hardware functions using a hardware description language
Course Learning Outcomes
CLO4 : Make use of CAD tools to specify, simulate and synthesize circuit designs
Course Learning Outcomes
CLO5 : Perform the steps involved in digital circuit implementation using Field-Programmable Gate Arrays","Blackjack player 
Implementation technology; Ch 3
Combinational circuit blocks; Ch 6
Counters
Course wrap-up
Digital system design (continued); Ch 10
Digital system design; Ch 10
Finite State Machines
Finite State Machines (continued)
Flexibility week
Flip-flops, Registers & Counters; Ch 7.1-7.16
Fortnightly quiz on material of Weeks 1 & 2
Fortnightly quiz on material of Weeks 1 - 4
Fortnightly quiz on material of Weeks 1 - 5
Fortnightly quiz on material of Weeks 1 - 8
Implementing Algorithms in Hardware
Implementing Algorithms in Hardware (continued)
Introduction & simplifying circuits; Ch 1 & 2
Optimizing logic functions; Ch 4.1-4.7 & 4.12
Introduction to Quartus II v13.0
Latches, Flip-flops, and Registers
Number representation & arithmetic circuits; Ch 5.1-5.5
Numbers and Displays
Simple Processor
Switches, Lights, and Multiplexers
Synchronous sequential circuits; Ch 8.1-8.9","General Schedule Information
Students are encouraged to attend lectures and expected to attend labs each week to seek assistance with their lab work.
Like most courses at UNSW, your results in the course will reflect the amount of effort you invest in your learning. As a guide, an allocation of 15 total hours of attendance and private study per week for a 6 UoC course such as COMP9222 should see you doing well. You will need to adjust this general advice to meet your own objectives and needs.
Please consult the lecturer or the lab demonstrators if you would like advice on the course.",2023.0,T3,2023-10-24 02:35:18,"This course teaches students the fundamentals of digital design.
The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.
  This course aims to provide students with a knowledge of designing and implementing simple digital logic circuits & systems. The basic building blocks of combinational and sequential circuits are introduced to enable students to develop circuit solutions to problems and to understand the design and operation of hardware models of digital systems. Students are introduced to the VHDL hardware description language as a means of describing circuits. Computer-aided design tools are used to specify, simulate and implement a variety of simple digital systems. Students learn how to implement and test their designs using Field-Programmmable Gate Arrays.
As an introductory course, a principal aim is to prepare students for more advanced study in follow-on courses. Course Learning Outcomes
CLO1 : Design and implement combinational and synchronous sequential logic circuits
Course Learning Outcomes
CLO2 : Analyse combinational and sequential digital logic circuits
Course Learning Outcomes
CLO3 : Describe hardware functions using a hardware description language
Course Learning Outcomes
CLO4 : Make use of CAD tools to specify, simulate and synthesize circuit designs
Course Learning Outcomes
CLO5 : Perform the steps involved in digital circuit implementation using Field-Programmable Gate Arrays Blackjack player 
Implementation technology; Ch 3
Combinational circuit blocks; Ch 6
Counters
Course wrap-up
Digital system design (continued); Ch 10
Digital system design; Ch 10
Finite State Machines
Finite State Machines (continued)
Flexibility week
Flip-flops, Registers & Counters; Ch 7.1-7.16
Fortnightly quiz on material of Weeks 1 & 2
Fortnightly quiz on material of Weeks 1 - 4
Fortnightly quiz on material of Weeks 1 - 5
Fortnightly quiz on material of Weeks 1 - 8
Implementing Algorithms in Hardware
Implementing Algorithms in Hardware (continued)
Introduction & simplifying circuits; Ch 1 & 2
Optimizing logic functions; Ch 4.1-4.7 & 4.12
Introduction to Quartus II v13.0
Latches, Flip-flops, and Registers
Number representation & arithmetic circuits; Ch 5.1-5.5
Numbers and Displays
Simple Processor
Switches, Lights, and Multiplexers
Synchronous sequential circuits; Ch 8.1-8.9 General Schedule Information
Students are encouraged to attend lectures and expected to attend labs each week to seek assistance with their lab work.
Like most courses at UNSW, your results in the course will reflect the amount of effort you invest in your learning. As a guide, an allocation of 15 total hours of attendance and private study per week for a 6 UoC course such as COMP9222 should see you doing well. You will need to adjust this general advice to meet your own objectives and needs.
Please consult the lecturer or the lab demonstrators if you would like advice on the course.","{'numbers': 14, 'communication': 14, 'problem solving': 14, 'critical thinking': 29, 'time management': 14, 'reading': 14}","{'tool design': 7, 'design circuit': 7, 'arithmetic': 7, 'digital logic': 7, 'multiplexers': 7, 'aid design computer': 7, 'algorithms': 7, 'counters': 7, 'FPGA': 7, 'array gate programmable field': 7, 'VHDL': 7, 'digital system': 7, 'simulate': 7, 'courses course': 7, 'gate array': 7}","['Finite State Machines continued', 'Implementing Algorithms in Hardware', 'Latches Flipflops and Registers', 'Finite State Machines', 'Implementing Algorithms in Hardware continued', 'Blackjack player', 'Simple Processor', 'Switches Lights and Multiplexers', 'Numbers and Displays', 'Counters']"
COMP9242,Advanced Operating Systems,postgraduate,"The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.
This course builds upon the basic operating systems course (COMP3231/9201/3891/9283), which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general “systems” space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly sought-after by technology companies and systems researchers.","The course aims to produce future technical leaders in industry and research, it is unapologetically elitist. It develops general “systems skills”, the ability to design, implement and understand a complex software system. It specifically provides a thorough understanding of low-level system software and its interaction with hardware, the trade-offs that determine system performance, techniques to assess performance correctly, and the impact of system design on security.","Course Learning Outcomes
CLO1 : Design and construct low-level operating system code
Course Learning Outcomes
CLO2 : Analyse the performance trade-offs in developing high-performance low-level OS code
Course Learning Outcomes
CLO3 : Understand and be capable of developing OS code inside a variety of OS environments, including monolithic, microkernels, and virtual machines, including device drivers
Course Learning Outcomes
CLO4 : Create benchmarks to evaluate the performance of OSs and application stacks
Course Learning Outcomes
CLO5 : Evaluate research published in the field of operating systems at a level commensurate with their experience",,"General Schedule Information
The authorative lecture schedule (subject to change) is available on the course web site https://www.cse.unsw.edu.au/~cs9242/current/lectures.shtml
An indicative schedule is provided below:
Week 1: Introduction (Microkernels and seL4) , seL4 API and usage
Week 2: Caches (What every OS designer must know), OS Execution Models
Week 3: Why Threads are a Bad Idea (for most purposes), Why Events are a Bad Idea (for high-concurrency servers), Virtual Machines (Introduction and principles)
Week 4: Performance Measurement and Analysis, Real-Time Systems Introduction
Week 5: Unix and Linux Internals, Security Fundamentals
Week 6: – –    Flex week – no lecture    – –    – –
Week 7: Microkernel Design and Implementation (with focus on seL4), Secure Operating Systems Information Leakage (timing channels and speculation)
Week 8: SMP and Locking
Week 9: Multicore Operating Systems
Week 10: Formal verification and seL4, seL4 in the real world, seL4-related research at UNSW, Exam preparation (0.5h)
 ",2023.0,T3,2023-10-24 02:39:08,"The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.
This course builds upon the basic operating systems course (COMP3231/9201/3891/9283), which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general “systems” space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly sought-after by technology companies and systems researchers. The course aims to produce future technical leaders in industry and research, it is unapologetically elitist. It develops general “systems skills”, the ability to design, implement and understand a complex software system. It specifically provides a thorough understanding of low-level system software and its interaction with hardware, the trade-offs that determine system performance, techniques to assess performance correctly, and the impact of system design on security. Course Learning Outcomes
CLO1 : Design and construct low-level operating system code
Course Learning Outcomes
CLO2 : Analyse the performance trade-offs in developing high-performance low-level OS code
Course Learning Outcomes
CLO3 : Understand and be capable of developing OS code inside a variety of OS environments, including monolithic, microkernels, and virtual machines, including device drivers
Course Learning Outcomes
CLO4 : Create benchmarks to evaluate the performance of OSs and application stacks
Course Learning Outcomes
CLO5 : Evaluate research published in the field of operating systems at a level commensurate with their experience  General Schedule Information
The authorative lecture schedule (subject to change) is available on the course web site https://www.cse.unsw.edu.au/~cs9242/current/lectures.shtml
An indicative schedule is provided below:
Week 1: Introduction (Microkernels and seL4) , seL4 API and usage
Week 2: Caches (What every OS designer must know), OS Execution Models
Week 3: Why Threads are a Bad Idea (for most purposes), Why Events are a Bad Idea (for high-concurrency servers), Virtual Machines (Introduction and principles)
Week 4: Performance Measurement and Analysis, Real-Time Systems Introduction
Week 5: Unix and Linux Internals, Security Fundamentals
Week 6: – –    Flex week – no lecture    – –    – –
Week 7: Microkernel Design and Implementation (with focus on seL4), Secure Operating Systems Information Leakage (timing channels and speculation)
Week 8: SMP and Locking
Week 9: Multicore Operating Systems
Week 10: Formal verification and seL4, seL4 in the real world, seL4-related research at UNSW, Exam preparation (0.5h)
 ","{'resilience': 25, 'communication': 12, 'critical thinking': 25, 'time management': 12, 'social networking': 12, 'mobile device abilities': 12}","{'developing systems': 6, 'API': 6, 'SMP': 6, 'unix': 6, 'virtual machine': 6, 'virtual servers': 6, 'techniques performance': 6, 'linux': 6, 'oss': 6, 'benchmarks': 6, 'software system': 6, 'operating system': 6, 'embedded systems': 6, 'performance system': 6, 'high performance': 6, 'monolithic': 6}","['An indicative schedule is provided below', 'Multicore Operating Systems', 'SMP and Locking', 'Unix and Linux Internals Security Fundamentals', 'Caches What every OS designer must know OS Execution Models']"
COMP9301,Cyber Security Project,postgraduate,Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate,This security engineering research project course allows the student to undertake original research in security engineering with guidance from a member of academic staff. The research project is typically undertaken in the second year of your postgraduate degree or final year of undergraduate study. The course will provide students with experience in independently tackling a challenging problem in cyber security.,"Course Learning Outcomes
CLO1 : Graduates will acquire enquiry-based techniques and practice through the completion of a complex cyber security research-based project.
Course Learning Outcomes
CLO2 : Graduates will develop their ability to define, investigate and analyse security engineering problems and develop creative and innovative solutions to these problems.
Course Learning Outcomes
CLO3 : Graduates will develop advanced theory-based knowledge and techniques of cyber security research
Course Learning Outcomes
CLO4 : Graduates will be able to proficiently apply security engineering methods to complex cyber security problem solving.",,"General Schedule Information
Weekly/fornightly meetings with your supervisor.",2023.0,T3,2023-10-24 02:43:00,"Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate This security engineering research project course allows the student to undertake original research in security engineering with guidance from a member of academic staff. The research project is typically undertaken in the second year of your postgraduate degree or final year of undergraduate study. The course will provide students with experience in independently tackling a challenging problem in cyber security. Course Learning Outcomes
CLO1 : Graduates will acquire enquiry-based techniques and practice through the completion of a complex cyber security research-based project.
Course Learning Outcomes
CLO2 : Graduates will develop their ability to define, investigate and analyse security engineering problems and develop creative and innovative solutions to these problems.
Course Learning Outcomes
CLO3 : Graduates will develop advanced theory-based knowledge and techniques of cyber security research
Course Learning Outcomes
CLO4 : Graduates will be able to proficiently apply security engineering methods to complex cyber security problem solving.  General Schedule Information
Weekly/fornightly meetings with your supervisor.","{'supervision': 14, 'problem solving': 14, 'resilience': 14, 'adaptability': 29, 'innovative': 14, 'social networking': 14}","{'research security': 50, 'research engineering': 50}",No Information about Topics
COMP9311,Database Systems,postgraduate,"Large data resources are critical to the functioning of just about every significant modern computer application, and so knowledge of how to manage them is clearly important in the industry. One very important platform for this is relational database management systems (RDBMSs).
This course explores in-depth the practice of developing database applications and the theory behind RDBMSs. The course focuses on database design and querying, as well as analysis of database schemas. It will also give an overview of the technologies used in implementing database management systems and the past, present, and future of database systems and database research.","This course aims to give students a solid grounding in the use of relational database management systems.
In the context of further study, understanding how to use databases effectively provides a foundation for further study in advanced database topics, such as COMP9315 Database Systems Implementation and COMP9318 Data Mining. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.","Course Learning Outcomes
CLO1 : Develop accurate, non-redundant data models
Course Learning Outcomes
CLO2 : Realise data models as relational database schemas
Course Learning Outcomes
CLO3 : Formulate efficient and effective queries via the full range of SQL constructs
Course Learning Outcomes
CLO4 : Use stored procedures and triggers to extend DBMS capabilities
Course Learning Outcomes
CLO5 : Understand the overall architecture of relational DBMSs
Course Learning Outcomes
CLO6 : Understand the concepts behind transactions and concurrency control
Course Learning Outcomes
CLO7 : Appreciate the past, present, and future of database technology","Advanced Topics  (Guest Lecture) & Revision
Advanced Topics: Graph Database
Assignment 1 due
Assignment 1: Data Modelling and Relational Algebra
Assignment 2 Due
Assignment 2: DB Design Theory, Database Storage Structures and Transaction
Course Introduction & Conceptual DB Design (ER)
Functional Dependencies, Normal Forms
Lab01 - Setting up a database server
Lab02 – Schema definition and data constraints
Lab03 – SQL practice
Lab04 – SQL queries with view definitions
Lab05 - SQL functions and PLpgSQL functions
Lab06 - Database triggers
Lab07 - Relational design theory
Lab08 - A practice on SQLite (an alternative DB)
Project 1 Due
Project 1: SQL
Relational DB Design & Disks, Files, Index
Relational Data Model & Relational Algebra
SQL
SQL and PLpgSQL programming
Transaction Management","General Schedule Information
The table summarises the planned weekly activities for the course. These are tentative. Please refer to the relevant sections of the course homepage for the most up-to-date information about the weekly schedule throughout the course delivery period.",2023.0,T3,2023-10-24 02:46:57,"Large data resources are critical to the functioning of just about every significant modern computer application, and so knowledge of how to manage them is clearly important in the industry. One very important platform for this is relational database management systems (RDBMSs).
This course explores in-depth the practice of developing database applications and the theory behind RDBMSs. The course focuses on database design and querying, as well as analysis of database schemas. It will also give an overview of the technologies used in implementing database management systems and the past, present, and future of database systems and database research. This course aims to give students a solid grounding in the use of relational database management systems.
In the context of further study, understanding how to use databases effectively provides a foundation for further study in advanced database topics, such as COMP9315 Database Systems Implementation and COMP9318 Data Mining. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search. Course Learning Outcomes
CLO1 : Develop accurate, non-redundant data models
Course Learning Outcomes
CLO2 : Realise data models as relational database schemas
Course Learning Outcomes
CLO3 : Formulate efficient and effective queries via the full range of SQL constructs
Course Learning Outcomes
CLO4 : Use stored procedures and triggers to extend DBMS capabilities
Course Learning Outcomes
CLO5 : Understand the overall architecture of relational DBMSs
Course Learning Outcomes
CLO6 : Understand the concepts behind transactions and concurrency control
Course Learning Outcomes
CLO7 : Appreciate the past, present, and future of database technology Advanced Topics  (Guest Lecture) & Revision
Advanced Topics: Graph Database
Assignment 1 due
Assignment 1: Data Modelling and Relational Algebra
Assignment 2 Due
Assignment 2: DB Design Theory, Database Storage Structures and Transaction
Course Introduction & Conceptual DB Design (ER)
Functional Dependencies, Normal Forms
Lab01 - Setting up a database server
Lab02 – Schema definition and data constraints
Lab03 – SQL practice
Lab04 – SQL queries with view definitions
Lab05 - SQL functions and PLpgSQL functions
Lab06 - Database triggers
Lab07 - Relational design theory
Lab08 - A practice on SQLite (an alternative DB)
Project 1 Due
Project 1: SQL
Relational DB Design & Disks, Files, Index
Relational Data Model & Relational Algebra
SQL
SQL and PLpgSQL programming
Transaction Management General Schedule Information
The table summarises the planned weekly activities for the course. These are tentative. Please refer to the relevant sections of the course homepage for the most up-to-date information about the weekly schedule throughout the course delivery period.","{'logical thinking': 14, 'resilience': 14, 'communication': 14, 'problem solving': 14, 'adaptability': 29, 'time management': 14}","{'database storage structure': 5, 'data compression': 5, 'alternative': 5, 'database server': 5, 'procedure store': 5, 'database graph': 5, 'database system': 5, 'database developing': 5, 'database application': 5, 'index': 5, 'database schemas': 5, 'sql': 5, 'redundant data': 5, 'control concurrency': 5, 'database trigger': 5, 'functional dependency': 5, 'normal forms': 5, 'information retrieval': 5, 'database design': 5, 'design theory': 5, 'web search': 5, 'models data': 5}","['Relational DB Design  Disks Files Index', 'Database triggers', 'Advanced Topics Graph Database', 'Functional Dependencies Normal Forms', 'Advanced Topics  Guest   Revision', 'SQL', 'Assignment 2 DB Design Theory Database Storage Structures and Transaction', '– Schema definition and data constraints', 'Setting up a database server', 'Relational Data Model  Relational Algebra', 'Relational design theory', '– SQL practice', 'Transaction Management', '– SQL queries with view definitions', 'SQL and PLpgSQL programming', 'SQL functions and PLpgSQL functions', 'A practice on SQLite an alternative DB']"
COMP9313,Big Data Management,postgraduate,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items.","This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management.","Course Learning Outcomes
CLO1 : Describe the important characteristics of Big Data
Course Learning Outcomes
CLO2 : Develop an appropriate storage structure for a Big Data repository
Course Learning Outcomes
CLO3 : Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Course Learning Outcomes
CLO4 : Use a high-level query language to manipulate Big Data
Course Learning Outcomes
CLO5 : Develop efficient solutions for analytical problems involving Big Data",,"General Schedule Information
Week 1    Course information + introduction to big data
Week 2    Hadoop MapReduce 1
Week 3    Hadoop MapReduce 2
Week 4    Spark 1 (proj1 due)
Week 5    Spark 2
Week 6    Recess Week
Week 7    Finding Similar Items (proj2 due)
Week 8    Mining Data Streams
Week 9    Graph Data Management
Week 10    NoSQL, HBase, and Hive/Revision and exam preparation (proj3 due)",2023.0,T3,2023-10-24 02:50:46,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items. This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management. Course Learning Outcomes
CLO1 : Describe the important characteristics of Big Data
Course Learning Outcomes
CLO2 : Develop an appropriate storage structure for a Big Data repository
Course Learning Outcomes
CLO3 : Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Course Learning Outcomes
CLO4 : Use a high-level query language to manipulate Big Data
Course Learning Outcomes
CLO5 : Develop efficient solutions for analytical problems involving Big Data  General Schedule Information
Week 1    Course information + introduction to big data
Week 2    Hadoop MapReduce 1
Week 3    Hadoop MapReduce 2
Week 4    Spark 1 (proj1 due)
Week 5    Spark 2
Week 6    Recess Week
Week 7    Finding Similar Items (proj2 due)
Week 8    Mining Data Streams
Week 9    Graph Data Management
Week 10    NoSQL, HBase, and Hive/Revision and exam preparation (proj3 due)","{'time management': 33, 'teamwork': 17, 'problem solving': 17, 'adaptability': 17, 'resilience': 17}","{'analytics': 9, 'datum big': 9, 'level high': 9, 'yarn': 9, 'query language': 9, 'data stream': 9, 'graph': 9, 'mapreduce': 9, 'nosql': 9, 'hive': 9, 'design algorithm': 9}","['Spark 2', 'Hadoop MapReduce 2', 'Hadoop MapReduce 1', 'Mining Data Streams', 'Graph Data Management']"
COMP9331,Computer Networks and Applications,postgraduate,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course.","To provide an in-depth introduction to the key topics in the field of computer networks, including the Internet.
To get a hands-on understanding of the working of network protocols.
To gain expertise in network programming, designing and implementing network protocols, evaluating network performance and problem-solving skills.
To build the necessary foundational knowledge required in subsequent networking courses (COMP4335-4337, COMP6733, COMP9332-9337).","Course Learning Outcomes
CLO1 : Understand the current architecture of the Internet and the entities involved in its operations
Course Learning Outcomes
CLO2 : Identify soundness or potential flaws in proposed protocols
Course Learning Outcomes
CLO3 : Design networked applications and protocols, and implement them in C, Java or Python
Course Learning Outcomes
CLO4 : Analyse and evaluate the performance of computer networks
Course Learning Outcomes
CLO5 : Capture and analyse network traffic
Course Learning Outcomes
CLO6 : Understand and explain security and ethical issues in computer networking","Application Layer:
Content Distribution Networks
Socket Programming
Transport Layer: 
Transport services
Multiplexing & Demultiplexing
UDP
Application Layer:
Principles of networked applications
The Web & HTTP
Email
Domain Name Service (DNS)
Peer-to-Peer Networks and DHT
Assignment Due: 10 Nov
Assignment Specs Released (Expected)
Course Logistics 
Introduction:
What is the Internet?
Network edge and core
Performance of networks
Introduction:
Layering and Encapsulation
Course prepration (Optional)
Lab 1
Lab 1 submission deadline: 10:00 Monday 25 September
Lab 2
Lab 2 submission deadline: 10:00 Monday 2 October
Lab 3 
Lab 3 submission deadline: 10:00 Monday 09 October
Lab 4
Lab 4 submission deadline: 10:00 Monday 30 Oct
Lab 5 
Lab 5 submission deadline: 10:00 Monday 6 November
Lab 6 
Lab 6 submission deadline: 10:00 Monday 13 November
Link Layer:
Multiple Access Protocols
Link-Layer Addressing and ARP
Ethernet
Switches
Wireless Networks
Wireless Characteristics
802.11
CSMA/CA
A day in the life of a web request 

Network Security
Basic Cryptography
Message integrity & Digital signatures
Authentication
Mid-term exam will take place on the 23 Oct, hence no in-person lecture on that day 
Mid-term exam will be using the Inspera online platform, which you will get access to from a link in the course Moodle site. The exam times will be announced well in advance. The mid-term exam will be on-line, un-invigilated, and you can sit for the exam from a place of your choice. More information for students about Inspera can be found here:https://unsw.sharepoint.com/sites/Assessment-Platform-Pilot .
Network Layer, Control Plane:
Link State and Distance Vector
Hierarchical routing
ICMP
Link Layer:
Error detection
Network Layer, Data Plane:
NAT
IPv6
Network Layer, Control Plane:
Routing algorithms
Network Layer, Data Plane:
Overview
IP
IP Addressing
No lecture, No Lab, No Submission
Self-Study of Lab resources and tools 
(no submission and no marks)
Transport Layer:
Connection management & flow control
Congestion control
Fairness
Transport Layer:
Principles of reliable data delivery
Pipelined Protocols
TCP
Tutorial 1
Tutorial 2","General Schedule Information
The following table lists the tentative weekly schedule. Students will be informed of any changes during the lecture and by announcements on the notices page. 
 ",2023.0,T3,2023-10-24 02:55:15,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course. To provide an in-depth introduction to the key topics in the field of computer networks, including the Internet.
To get a hands-on understanding of the working of network protocols.
To gain expertise in network programming, designing and implementing network protocols, evaluating network performance and problem-solving skills.
To build the necessary foundational knowledge required in subsequent networking courses (COMP4335-4337, COMP6733, COMP9332-9337). Course Learning Outcomes
CLO1 : Understand the current architecture of the Internet and the entities involved in its operations
Course Learning Outcomes
CLO2 : Identify soundness or potential flaws in proposed protocols
Course Learning Outcomes
CLO3 : Design networked applications and protocols, and implement them in C, Java or Python
Course Learning Outcomes
CLO4 : Analyse and evaluate the performance of computer networks
Course Learning Outcomes
CLO5 : Capture and analyse network traffic
Course Learning Outcomes
CLO6 : Understand and explain security and ethical issues in computer networking Application Layer:
Content Distribution Networks
Socket Programming
Transport Layer: 
Transport services
Multiplexing & Demultiplexing
UDP
Application Layer:
Principles of networked applications
The Web & HTTP
Email
Domain Name Service (DNS)
Peer-to-Peer Networks and DHT
Assignment Due: 10 Nov
Assignment Specs Released (Expected)
Course Logistics 
Introduction:
What is the Internet?
Network edge and core
Performance of networks
Introduction:
Layering and Encapsulation
Course prepration (Optional)
Lab 1
Lab 1 submission deadline: 10:00 Monday 25 September
Lab 2
Lab 2 submission deadline: 10:00 Monday 2 October
Lab 3 
Lab 3 submission deadline: 10:00 Monday 09 October
Lab 4
Lab 4 submission deadline: 10:00 Monday 30 Oct
Lab 5 
Lab 5 submission deadline: 10:00 Monday 6 November
Lab 6 
Lab 6 submission deadline: 10:00 Monday 13 November
Link Layer:
Multiple Access Protocols
Link-Layer Addressing and ARP
Ethernet
Switches
Wireless Networks
Wireless Characteristics
802.11
CSMA/CA
A day in the life of a web request 

Network Security
Basic Cryptography
Message integrity & Digital signatures
Authentication
Mid-term exam will take place on the 23 Oct, hence no in-person lecture on that day 
Mid-term exam will be using the Inspera online platform, which you will get access to from a link in the course Moodle site. The exam times will be announced well in advance. The mid-term exam will be on-line, un-invigilated, and you can sit for the exam from a place of your choice. More information for students about Inspera can be found here:https://unsw.sharepoint.com/sites/Assessment-Platform-Pilot .
Network Layer, Control Plane:
Link State and Distance Vector
Hierarchical routing
ICMP
Link Layer:
Error detection
Network Layer, Data Plane:
NAT
IPv6
Network Layer, Control Plane:
Routing algorithms
Network Layer, Data Plane:
Overview
IP
IP Addressing
No lecture, No Lab, No Submission
Self-Study of Lab resources and tools 
(no submission and no marks)
Transport Layer:
Connection management & flow control
Congestion control
Fairness
Transport Layer:
Principles of reliable data delivery
Pipelined Protocols
TCP
Tutorial 1
Tutorial 2 General Schedule Information
The following table lists the tentative weekly schedule. Students will be informed of any changes during the lecture and by announcements on the notices page. 
 ","{'problem solving': 9, 'communication': 9, 'teamwork': 9, 'leadership': 9, 'adaptability': 18, 'critical thinking': 9, 'time management': 9, 'resilience': 9, 'reading': 9, 'social networking': 9}","{'delivery content': 4, 'network layer': 4, 'python': 4, 'pipeline delivery': 4, 'service transport': 4, 'udp': 4, 'transport layer': 4, 'DNS': 4, 'ICMP': 4, 'flow control': 4, 'cryptography': 4, 'person': 4, 'ip tcp': 4, 'TCP': 4, 'java': 4, 'com': 4, 'logistics': 4, 'transmission': 4, 'algorithms': 4, 'present data': 4, 'application layer': 4, 'digital signature': 4, 'multiple protocols': 4, 'access control': 4, 'peer to': 4}","['Fairness', 'Transport Layer', 'Pipelined Protocols', 'Multiple Access Protocols', 'Congestion control', 'Wireless Networks', 'IP', 'Link State and Distance Vector', 'Layering and Encapsulation', 'TCP', 'The Web  HTTP', 'PeertoPeer Networks and DHT', 'Socket Programming', 'LinkLayer Addressing and ARP', 'Error detection', 'Switches', 'Link Layer', 'Application Layer', 'Message integrity  Digital signatures', 'Hierarchical routing', 'Basic Cryptography', 'Domain Name Service DNS', 'NAT', 'CSMACA', 'Performance of networks', 'Network Security', 'Ethernet', 'Network Layer Data Plane', 'Principles of reliable data delivery', 'A day in the life of a web request', 'Network Layer Control Plane', 'Routing algorithms', 'Authentication', 'Wireless Characteristics', 'Multiplexing  Demultiplexing', 'ICMP', 'Transport services', 'Connection management  flow control', 'Network edge and core', 'UDP', 'Principles of networked applications', 'IP Addressing', 'What is the Internet']"
COMP9336,Mobile Data Networking,postgraduate,"First course in wireless and mobile networking examining the fundamental theories as well as the latest advances in wireless data and mobile communication networks. Topics include fundamental concepts in wireless coding, modulation, and signal propagation, WiFi and wireless local area networks, cellular networks, Bluetooth, and Internet of Things networks. The course will also overview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Hands-on experiments with mobile devices will be part of the learning exercise, which involves wireless packet capture, analysis, and programming.","The course aims to produce students who are expert in the area of wireless network technologies and can contribute to solutions in this space.
The course is a discipline elective in the Computer Networks major in the undergraduate computer science program and in the Internetworking majors in the masters program.","Course Learning Outcomes
CLO1 : master the fundamental theories and the basic science and mathematics behind popular wireless networking technologies
Course Learning Outcomes
CLO2 : analyse the algorithms and protocols used by popular wireless and mobile networking technologies
Course Learning Outcomes
CLO3 : gain insight to some of the emerging wireless and mobile networking concepts and technologies
Course Learning Outcomes
CLO4 : experiment with mobile devices",,"General Schedule Information
Here is a tentative schedule, which may be subject to minor adjustments during the term.
Week 1: Wireless fundamentals I, Complete Lab-1
Week 2: Wireless Fundamentals II, Mid-lecture Quiz, Complete Lab-2
Week 3: WiFi I, Mid-lecture Quiz, Complete Lab-3
Week 4: Public Holiday (No lecture or lab sesions, but WiFi II lecture video released and affected labs, i.e. Lab 4, rescheduled)
Week 5: Bluetooth, Mid-lecture Quiz, Complete Lab-5
Week 6: Term Recess (No lecture, no lab)
Week 7: Cellular Networks,  Mid-lecture Quiz, Complete Lab-6
Week 8: Internet of Things Networks,  Mid-lecture Quiz, Complete Lab-7
Week 9: Wireless Sensing, Mid-lecture Quiz, Complete Lab-8
Week 10: Non-terrestrial Networks,  Mid-lecture Quiz, Complete Lab-9",2023.0,T3,2023-10-24 02:59:04,"First course in wireless and mobile networking examining the fundamental theories as well as the latest advances in wireless data and mobile communication networks. Topics include fundamental concepts in wireless coding, modulation, and signal propagation, WiFi and wireless local area networks, cellular networks, Bluetooth, and Internet of Things networks. The course will also overview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Hands-on experiments with mobile devices will be part of the learning exercise, which involves wireless packet capture, analysis, and programming. The course aims to produce students who are expert in the area of wireless network technologies and can contribute to solutions in this space.
The course is a discipline elective in the Computer Networks major in the undergraduate computer science program and in the Internetworking majors in the masters program. Course Learning Outcomes
CLO1 : master the fundamental theories and the basic science and mathematics behind popular wireless networking technologies
Course Learning Outcomes
CLO2 : analyse the algorithms and protocols used by popular wireless and mobile networking technologies
Course Learning Outcomes
CLO3 : gain insight to some of the emerging wireless and mobile networking concepts and technologies
Course Learning Outcomes
CLO4 : experiment with mobile devices  General Schedule Information
Here is a tentative schedule, which may be subject to minor adjustments during the term.
Week 1: Wireless fundamentals I, Complete Lab-1
Week 2: Wireless Fundamentals II, Mid-lecture Quiz, Complete Lab-2
Week 3: WiFi I, Mid-lecture Quiz, Complete Lab-3
Week 4: Public Holiday (No lecture or lab sesions, but WiFi II lecture video released and affected labs, i.e. Lab 4, rescheduled)
Week 5: Bluetooth, Mid-lecture Quiz, Complete Lab-5
Week 6: Term Recess (No lecture, no lab)
Week 7: Cellular Networks,  Mid-lecture Quiz, Complete Lab-6
Week 8: Internet of Things Networks,  Mid-lecture Quiz, Complete Lab-7
Week 9: Wireless Sensing, Mid-lecture Quiz, Complete Lab-8
Week 10: Non-terrestrial Networks,  Mid-lecture Quiz, Complete Lab-9","{'mobile device abilities': 17, 'communication': 17, 'teamwork': 17, 'problem solving': 17, 'resilience': 17, 'social networking': 17}","{'thing internet of': 17, 'bluetooth': 17, 'mobile': 17, 'algorithms': 17, 'video released': 17, 'network local area': 17}",No Information about Topics
COMP9415,Computer Graphics,postgraduate,"In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Reality-based graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.
The objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry.","To teach you how to develop and manipulate 2D and 3D objects, including transformations and object control.
To instruct you in scripting languages used in game engines.
To familiarize you with the development of materials, and the incorporation of reflection and shadows.
To acquaint you with static meshes, collision detection, and physics in 3D.
To familiarize you with lighting techniques and shadows.
To introduce the use of cameras for creating different perspectives, such as first-person and third-person views.
To instruct you on collision detection and the application of physics in both 2D and 3D.
To familiarize you with the process of converting a standard 3D environment into a virtual reality-based environment.
To teach you how to define interactions in virtual reality and create an environment that is as realistic as possible.","Course Learning Outcomes
CLO1 : Describe how game engines work.
Course Learning Outcomes
CLO2 : Explain computer graphics concepts, such as graphical objects, the hierarchical model of objects, lighting, shadow, reflection, surface, texture maps, and their practical implementation.
Course Learning Outcomes
CLO3 : Design 2D, 3D and virtual reality-based graphical environments and objects including lines, curves, surfaces, geometrical shapes, etc.
Course Learning Outcomes
CLO4 : Apply physics and collisions in 2D and 3D environments
Course Learning Outcomes
CLO5 : Render scenes on a range of platforms and hardware devices","2D Objects and transform
Player pawn 2D
Introduction to C# programming
Mapping controllers in 2D
Prefab objects and projectiles in 2D
Creating projectile in 3D
Importing prebuilt graphical elements (FBX files)
Applying damage to the player pawn
Creating conditional trigger box
Introduction to landscape brushes
Texture layers
Advanced concepts in landscape brushes
Grabbing and moving objects in VR
Movement in VR
Snap turn in VR
Teleportation Movement in VR
Introduction to collision detection and physics in 3D
Introduction to the trigger box 3D
Introduction to rendering
Advanced concepts in geometry brushes in 3D
Introduction to lights and shadows
Introduction to blueprint classes
Introduction to computer graphics
Player pawn and transform tools in 3D
Introduction to Blueprints coding
Introduction to virtual reality
Rendering VR scenes
Mapping virtual reality controllers
Creating VR player pawn
Developing VR hand
Mapping controllers to move objects in 3D
Introduction to material concept
Introduction to geometry brushes in 3D
Introduction to static meshes
Physics and collision detection 2D
Introduction to trigger box 2D
Applying damaging and destroying objects 2D
Spawn manager
Adding user interface elements
Animating objects in 2D
Rendering 2D sprites
Player pawn class and camera
Mapping controllers to rotate objects in 3D
Advanced concepts of camera
Advanced material design
Advanced collision detection and physics in 3D
Animating objects
Blueprint functions
Blueprint macros
Term Break (Flex Week)","General Schedule Information
Monday 6-8pm (Rex Vowels Theatre (K-F17-LG3))
Thursday 6-8pm (Physics Theatre (K-K14-19))",2023.0,T3,2023-10-24 03:03:36,"In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Reality-based graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.
The objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry. To teach you how to develop and manipulate 2D and 3D objects, including transformations and object control.
To instruct you in scripting languages used in game engines.
To familiarize you with the development of materials, and the incorporation of reflection and shadows.
To acquaint you with static meshes, collision detection, and physics in 3D.
To familiarize you with lighting techniques and shadows.
To introduce the use of cameras for creating different perspectives, such as first-person and third-person views.
To instruct you on collision detection and the application of physics in both 2D and 3D.
To familiarize you with the process of converting a standard 3D environment into a virtual reality-based environment.
To teach you how to define interactions in virtual reality and create an environment that is as realistic as possible. Course Learning Outcomes
CLO1 : Describe how game engines work.
Course Learning Outcomes
CLO2 : Explain computer graphics concepts, such as graphical objects, the hierarchical model of objects, lighting, shadow, reflection, surface, texture maps, and their practical implementation.
Course Learning Outcomes
CLO3 : Design 2D, 3D and virtual reality-based graphical environments and objects including lines, curves, surfaces, geometrical shapes, etc.
Course Learning Outcomes
CLO4 : Apply physics and collisions in 2D and 3D environments
Course Learning Outcomes
CLO5 : Render scenes on a range of platforms and hardware devices 2D Objects and transform
Player pawn 2D
Introduction to C# programming
Mapping controllers in 2D
Prefab objects and projectiles in 2D
Creating projectile in 3D
Importing prebuilt graphical elements (FBX files)
Applying damage to the player pawn
Creating conditional trigger box
Introduction to landscape brushes
Texture layers
Advanced concepts in landscape brushes
Grabbing and moving objects in VR
Movement in VR
Snap turn in VR
Teleportation Movement in VR
Introduction to collision detection and physics in 3D
Introduction to the trigger box 3D
Introduction to rendering
Advanced concepts in geometry brushes in 3D
Introduction to lights and shadows
Introduction to blueprint classes
Introduction to computer graphics
Player pawn and transform tools in 3D
Introduction to Blueprints coding
Introduction to virtual reality
Rendering VR scenes
Mapping virtual reality controllers
Creating VR player pawn
Developing VR hand
Mapping controllers to move objects in 3D
Introduction to material concept
Introduction to geometry brushes in 3D
Introduction to static meshes
Physics and collision detection 2D
Introduction to trigger box 2D
Applying damaging and destroying objects 2D
Spawn manager
Adding user interface elements
Animating objects in 2D
Rendering 2D sprites
Player pawn class and camera
Mapping controllers to rotate objects in 3D
Advanced concepts of camera
Advanced material design
Advanced collision detection and physics in 3D
Animating objects
Blueprint functions
Blueprint macros
Term Break (Flex Week) General Schedule Information
Monday 6-8pm (Rex Vowels Theatre (K-F17-LG3))
Thursday 6-8pm (Physics Theatre (K-K14-19))","{'reading': 20, 'communication': 10, 'problem solving': 10, 'leadership': 10, 'adaptability': 20, 'critical thinking': 10, 'time management': 10, 'resilience': 10}","{'macros': 6, 'geometry': 6, 'surface': 6, 'controllers': 6, 'spawn': 6, 'person': 6, 'unreal engine': 6, 'delve': 6, 'maps': 6, 'fbx': 6, 'physical': 6, 'blueprint': 6, 'snap': 6, 'user interface': 6, 'computer graphic': 6, 'physics apply': 6, 'hierarchical model': 6}","['Animating objects in 2D', 'Advanced material design', 'Rendering 2D sprites', 'Advanced concepts of camera', 'Grabbing and moving objects in VR', 'Developing VR hand', 'Spawn manager', 'Physics and collision detection 2D', 'Mapping controllers to rotate objects in 3D', 'Advanced collision detection and physics in 3D', 'Applying damage to the player pawn', 'Mapping controllers to move objects in 3D', 'Blueprint macros', 'Adding user interface elements', 'Prefab objects and projectiles in 2D', 'Creating conditional trigger box', 'Importing prebuilt graphical elements FBX files', 'Advanced concepts in landscape brushes', 'Snap turn in VR', 'Animating objects', 'Player pawn 2D', 'Texture layers', 'Movement in VR', 'Blueprint functions', 'Rendering VR scenes', 'Mapping controllers in 2D', 'Teleportation Movement in VR', 'Advanced concepts in geometry brushes in 3D', 'Creating projectile in 3D', 'Player pawn and transform tools in 3D', 'Creating VR player pawn', 'Applying damaging and destroying objects 2D', 'Player pawn class and camera', 'Mapping virtual reality controllers', '2D Objects and transform']"
COMP9418,Advanced Topics in Statistical Machine Learning,postgraduate,"This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others.","Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.
 ","Course Learning Outcomes
CLO1 : Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Course Learning Outcomes
CLO2 : Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm
Course Learning Outcomes
CLO3 : Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Course Learning Outcomes
CLO4 : Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Course Learning Outcomes
CLO5 : Understand and apply basic methods for structured prediction","Assessment 1 description released
Assignment 1 due
Assignment 2 description released
Assignment 2 due
Bayesian networks
Bayesian networks representation and semantics [Chs. 4 and 5]
Belief propagation [Ch. 14]. Approximate inference by Sampling [Ch. 15]
Belief propagation and sampling
Course overview [Ch. 1], propositional logic [Ch. 2] and probability calculus [Ch. 3]
Exact inference [Ch. 6]. Bayesian networks as classifiers
Factor elimination and jointrees
Flexibility Week
Gaussian Bayesian Networks [Koller Ch. 7, 14.1 & 14.2]
Gaussian Bayesian networks
Graph representation, traversal and common algorithms
Learning parameters and graph structure [Ch. 17]
MAP inference [Ch. 10]. Markov networks
Markov chains and hidden Markov models
Markov networks
Probability calculus and factor implementation
Quiz 1 is due
Quiz 2 is due
Quiz 3 is due
Quiz 4 is due
Quiz 5 is due
Quiz 7 is due
Quiz 8 is due
The jointree algorithm [Chs. 7 and 9]
Variable elimination","General Schedule Information
  Please note this is a tentative schedule. All dates are only indicative and subject to change.
We will post new content to WebCMS every Monday morning (before the lecture starts). We will email all students on Monday mornings, informing them of the new content and due dates for the week.
For every week in which an assessment item is due (quiz or assignment), the due date is Sunday at 6 p.m.
 ",2023.0,T3,2023-10-24 03:07:25,"This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others. Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.
  Course Learning Outcomes
CLO1 : Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Course Learning Outcomes
CLO2 : Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm
Course Learning Outcomes
CLO3 : Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Course Learning Outcomes
CLO4 : Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Course Learning Outcomes
CLO5 : Understand and apply basic methods for structured prediction Assessment 1 description released
Assignment 1 due
Assignment 2 description released
Assignment 2 due
Bayesian networks
Bayesian networks representation and semantics [Chs. 4 and 5]
Belief propagation [Ch. 14]. Approximate inference by Sampling [Ch. 15]
Belief propagation and sampling
Course overview [Ch. 1], propositional logic [Ch. 2] and probability calculus [Ch. 3]
Exact inference [Ch. 6]. Bayesian networks as classifiers
Factor elimination and jointrees
Flexibility Week
Gaussian Bayesian Networks [Koller Ch. 7, 14.1 & 14.2]
Gaussian Bayesian networks
Graph representation, traversal and common algorithms
Learning parameters and graph structure [Ch. 17]
MAP inference [Ch. 10]. Markov networks
Markov chains and hidden Markov models
Markov networks
Probability calculus and factor implementation
Quiz 1 is due
Quiz 2 is due
Quiz 3 is due
Quiz 4 is due
Quiz 5 is due
Quiz 7 is due
Quiz 8 is due
The jointree algorithm [Chs. 7 and 9]
Variable elimination General Schedule Information
  Please note this is a tentative schedule. All dates are only indicative and subject to change.
We will post new content to WebCMS every Monday morning (before the lecture starts). We will email all students on Monday mornings, informing them of the new content and due dates for the week.
For every week in which an assessment item is due (quiz or assignment), the due date is Sunday at 6 p.m.
 ","{'resilience': 36, 'communication': 9, 'teamwork': 9, 'leadership': 9, 'adaptability': 9, 'critical thinking': 27}","{'automated reasoning': 7, 'model hide markov': 7, 'parameters': 7, 'semantics': 7, 'maximum likelihood': 7, 'graph': 7, 'algorithms': 7, 'filter kalman': 7, 'monte carlo': 7, 'calculus': 7, 'adopt': 7, 'empirical analysis': 7, 'limits': 7, 'inference statistical': 7}","['Exact inference  Bayesian networks as classifiers', 'Bayesian networks representation and semantics', 'Belief propagation and sampling', 'Gaussian Bayesian Networks', 'Graph representation traversal and common algorithms', 'Factor elimination and jointrees', 'Belief propagation  Approximate inference by Sampling', 'Gaussian Bayesian networks', 'Bayesian networks', 'Probability calculus and factor implementation', 'MAP inference  Markov networks', 'Variable elimination', 'Markov networks', 'Learning parameters and graph structure', 'The jointree algorithm', 'Markov chains and hidden Markov models']"
COMP9444,Neural Networks and Deep Learning,postgraduate,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning.","This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate.","Course Learning Outcomes
CLO1 : Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Course Learning Outcomes
CLO2 : Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Course Learning Outcomes
CLO3 : Analyse a problem and devise a suitable neural network solution
Course Learning Outcomes
CLO4 : Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning","Backprop Variations, Hidden Unit Dynamics
Cross Entropy, Softmax and Weight Decay
Hidden Unit Dynamics
Tutorial
Probability and Backprop
Convolution and Image Processing
Convolution
Image Processing
Tutorial
Softmax, Hidden Unit Dynamics
Flexibility Week: No Lectures in this week
Project Mentoring
Attend respective mentoring session as a team
Generative AI
Generative Artificial Intelligence
Recent Advances in Deep Learning
Project Demonstrations
Demonstration of project work
Introduction to the course
Python Refresher
Numpy Refresher
Matplotlib Refresher
Google Colab Refresher
Perceptrons and Backpropagation
Neuroanatomy and Perceptrons
Multi-Layer Networks and Backpropagation
Tutorial:
No tutorials in Week 1
Probability, Generalization and Overfitting
Probability, Generalization and Overfitting
PyTorch
Tutorial
Perceptrons
Recurrent Networks and LSTM
Recurrent Neural Networks
Long Short-Term Memory
Tutorial
Convolutional Neural Networks
Reinforcement Learning
Reinforcement Learning
TD-Learning and Q-Learning
Policy Learning and Deep RL
Project Mentoring
Attend respective mentoring session as a team
Unsupervised and Multimodal Learning
Autoencoders and Adversarial Training
Generative Adversarial Networks
Vision and Language Learning
Project Mentoring
Attend respective mentoring session as a team
Word Vectors and Language Processing
Word Vectors
Natural Language Processing
Project Mentoring
Attend respective mentoring session as a team",,2023.0,T3,2023-10-24 03:11:23,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning. This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate. Course Learning Outcomes
CLO1 : Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Course Learning Outcomes
CLO2 : Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Course Learning Outcomes
CLO3 : Analyse a problem and devise a suitable neural network solution
Course Learning Outcomes
CLO4 : Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning Backprop Variations, Hidden Unit Dynamics
Cross Entropy, Softmax and Weight Decay
Hidden Unit Dynamics
Tutorial
Probability and Backprop
Convolution and Image Processing
Convolution
Image Processing
Tutorial
Softmax, Hidden Unit Dynamics
Flexibility Week: No Lectures in this week
Project Mentoring
Attend respective mentoring session as a team
Generative AI
Generative Artificial Intelligence
Recent Advances in Deep Learning
Project Demonstrations
Demonstration of project work
Introduction to the course
Python Refresher
Numpy Refresher
Matplotlib Refresher
Google Colab Refresher
Perceptrons and Backpropagation
Neuroanatomy and Perceptrons
Multi-Layer Networks and Backpropagation
Tutorial:
No tutorials in Week 1
Probability, Generalization and Overfitting
Probability, Generalization and Overfitting
PyTorch
Tutorial
Perceptrons
Recurrent Networks and LSTM
Recurrent Neural Networks
Long Short-Term Memory
Tutorial
Convolutional Neural Networks
Reinforcement Learning
Reinforcement Learning
TD-Learning and Q-Learning
Policy Learning and Deep RL
Project Mentoring
Attend respective mentoring session as a team
Unsupervised and Multimodal Learning
Autoencoders and Adversarial Training
Generative Adversarial Networks
Vision and Language Learning
Project Mentoring
Attend respective mentoring session as a team
Word Vectors and Language Processing
Word Vectors
Natural Language Processing
Project Mentoring
Attend respective mentoring session as a team ","{'problem solving': 20, 'resilience': 20, 'adaptability': 20, 'communication': 10, 'critical thinking': 10, 'time management': 10, 'social networking': 10}","{'numpy': 8, 'python': 8, 'matplotlib': 8, 'autoencoders': 8, 'LSTM': 8, 'neural network recurrent': 8, 'networks convolutional': 8, 'softmax': 8, 'model network': 8, 'memory short long term': 8, 'neuroanatomy': 8, 'processing natural language': 8, 'pytorch': 8}","['Hidden Unit Dynamics', 'Word Vectors and Language Processing', 'Reinforcement Learning', 'Softmax Hidden Unit Dynamics', 'Convolutional Neural Networks', 'Policy Learning and Deep RL', 'Long ShortTerm Memory', 'Generative Adversarial Networks', 'Python Refresher', 'PyTorch', 'Google Colab Refresher', 'Probability and Backprop', 'Natural Language Processing', 'Generative AI', 'Image Processing', 'Attend respective mentoring session as a team', 'Matplotlib Refresher', 'Word Vectors', 'Backprop Variations Hidden Unit Dynamics', 'Cross Entropy Softmax and Weight Decay', 'Convolution', 'Numpy Refresher', 'Generative Artificial Intelligence', 'Perceptrons', 'Vision and Language Learning', 'Convolution and Image Processing', 'MultiLayer Networks and Backpropagation', 'TDLearning and QLearning', 'Recurrent Networks and LSTM', 'Recurrent Neural Networks', 'Probability Generalization and Overfitting', 'Recent Advances in Deep Learning', 'Unsupervised and Multimodal Learning', 'Perceptrons and Backpropagation', 'Autoencoders and Adversarial Training', 'Neuroanatomy and Perceptrons']"
COMP9517,Computer Vision,postgraduate,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision.","The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad, interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures.","Course Learning Outcomes
CLO1 : Explain basic scientific, statistical, and engineering approaches to computer vision
Course Learning Outcomes
CLO2 : Implement and test computer vision algorithms using existing software platforms
Course Learning Outcomes
CLO3 : Build larger computer vision applications by integrating software modules","Consultation Session
Deep Learning I
Deep Learning II
Feature Representation
Flexibility Week (No Lectures)
Group Project
Guest Lectures on Advanced Applications of Computer Vision
Image Processing
Image Segmentation
Introduction & Image Formation
Lab 1
Lab 2
Lab 3
Lab 4
Motion Tracking
Pattern Recognition","General Schedule Information
The course schedule includes 2 x 2-hour lectures per week during all weeks of term except flexibility week. In addition, a 1-hour consultation session is scheduled per week starting in the second week of term, where tutors are available to explain the labs (in the first weeks of the course) and the project (in later weeks) and answer any questions about these.",2023.0,T3,2023-10-24 03:15:20,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision. The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad, interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures. Course Learning Outcomes
CLO1 : Explain basic scientific, statistical, and engineering approaches to computer vision
Course Learning Outcomes
CLO2 : Implement and test computer vision algorithms using existing software platforms
Course Learning Outcomes
CLO3 : Build larger computer vision applications by integrating software modules Consultation Session
Deep Learning I
Deep Learning II
Feature Representation
Flexibility Week (No Lectures)
Group Project
Guest Lectures on Advanced Applications of Computer Vision
Image Processing
Image Segmentation
Introduction & Image Formation
Lab 1
Lab 2
Lab 3
Lab 4
Motion Tracking
Pattern Recognition General Schedule Information
The course schedule includes 2 x 2-hour lectures per week during all weeks of term except flexibility week. In addition, a 1-hour consultation session is scheduled per week starting in the second week of term, where tutors are available to explain the labs (in the first weeks of the course) and the project (in later weeks) and answer any questions about these.","{'reading': 17, 'communication': 33, 'problem solving': 17, 'critical thinking': 17, 'resilience': 17}","{'physics': 8, 'object detection': 8, 'level high': 8, 'model building': 8, 'algorithms': 8, 'system visual': 8, 'character recognition optical': 8, 'feature extraction': 8, 'module software': 8, 'models statistical': 8, 'medical imaging': 8, 'computer engineering': 8, 'biometrics': 8}","['Deep Learning I', 'Image Segmentation', 'Guest s on Advanced Applications of Computer Vision', 'Feature Representation', 'Image Processing', 'Motion Tracking', 'Pattern Recognition', 'Deep Learning II']"
COMP9900,Information Technology Project,postgraduate,"This is a software project capstone course. Students work in teams of ideally five (5) members to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.",This course aims to produce students who can apply their computing knowledge and skills to work effectively as IT professionals.,"Course Learning Outcomes
CLO1 : work from a set of requirements, elaborate them, and produce a specification
Course Learning Outcomes
CLO2 : design and build a correct, efficient and robust software system from specification
Course Learning Outcomes
CLO3 : use software development and software project management tools
Course Learning Outcomes
CLO4 : validate the correctness and robustness of software
Course Learning Outcomes
CLO5 : work effectively in a project team, and lead when required
Course Learning Outcomes
CLO6 : manage their time effectively, and make reasoned trade-offs over competing demands
Course Learning Outcomes
CLO7 : communicate technical information clearly, both verbally and in writing",,"General Schedule Information
The following table outlines a provisional schedule for this course. The contents of the lectures are described roughly and are subject to adjustments.
_____________________________________________________________________________________________________________________________________________
Week   Lectures                                                                               Labs                                                                          Assignments     
_____________________________________________________________________________________________________________________________________________
1         Course Introduction, Assessment Tasks Overview       Group formation, project brainstorming                  ---     
_____________________________________________________________________________________________________________________________________________
2         Scrum Agile Methodology                                               Work on the project proposal,                                    ---
                                                                                                   progress report
_____________________________________________________________________________________________________________________________________________
3         Interface Design Principles, Git and GitHub,                Work on the project proposal,                                  Proposal due Friday @ 9pm
           Project Proposal                                                            progress report
_____________________________________________________________________________________________________________________________________________
4         Introduction to Project Management                            Work on the project, progress report                        ---  
           Progressive Demo A, Retrospective A
_____________________________________________________________________________________________________________________________________________
5         Project Scope Management,                                         Work on the project,                                                 Progressive Demo A conducted in lab
           Project Time Management                                             Progressive Demo A                                               Retrospective A Report due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________     
6         Flexibility Week                                                               ---                                                                                 ---
_____________________________________________________________________________________________________________________________________________
7         Project Cost Management                                           Work on the project, progress report                        ---     
           Progressive Demo B, Retrospective B
_____________________________________________________________________________________________________________________________________________
8         Teamwork, Managing Project Conflict                         Work on the project,                                                 Progressive Demo B conducted in lab
                                                                                                   Progressive Demo B                                               Retrospective B Report due Saturday @ 9pm  
_____________________________________________________________________________________________________________________________________________   
9         Project Change Management,                                    Work on the project, progress report                         ---     
           Final Project Demo
_____________________________________________________________________________________________________________________________________________
10       Remaining Assessment Items, Wrap-up                    Project Final Demo                                                  Final Demo conducted in lab
                                                                                                                                                                                      Project Report due Friday @ 9pm
                                                                                                                                                                                     Software Quality due Friday @ 9pm
                                                                                                                                                                                     Peer Assessment due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________",2023.0,T3,2023-10-24 03:19:14,"This is a software project capstone course. Students work in teams of ideally five (5) members to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project. This course aims to produce students who can apply their computing knowledge and skills to work effectively as IT professionals. Course Learning Outcomes
CLO1 : work from a set of requirements, elaborate them, and produce a specification
Course Learning Outcomes
CLO2 : design and build a correct, efficient and robust software system from specification
Course Learning Outcomes
CLO3 : use software development and software project management tools
Course Learning Outcomes
CLO4 : validate the correctness and robustness of software
Course Learning Outcomes
CLO5 : work effectively in a project team, and lead when required
Course Learning Outcomes
CLO6 : manage their time effectively, and make reasoned trade-offs over competing demands
Course Learning Outcomes
CLO7 : communicate technical information clearly, both verbally and in writing  General Schedule Information
The following table outlines a provisional schedule for this course. The contents of the lectures are described roughly and are subject to adjustments.
_____________________________________________________________________________________________________________________________________________
Week   Lectures                                                                               Labs                                                                          Assignments     
_____________________________________________________________________________________________________________________________________________
1         Course Introduction, Assessment Tasks Overview       Group formation, project brainstorming                  ---     
_____________________________________________________________________________________________________________________________________________
2         Scrum Agile Methodology                                               Work on the project proposal,                                    ---
                                                                                                   progress report
_____________________________________________________________________________________________________________________________________________
3         Interface Design Principles, Git and GitHub,                Work on the project proposal,                                  Proposal due Friday @ 9pm
           Project Proposal                                                            progress report
_____________________________________________________________________________________________________________________________________________
4         Introduction to Project Management                            Work on the project, progress report                        ---  
           Progressive Demo A, Retrospective A
_____________________________________________________________________________________________________________________________________________
5         Project Scope Management,                                         Work on the project,                                                 Progressive Demo A conducted in lab
           Project Time Management                                             Progressive Demo A                                               Retrospective A Report due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________     
6         Flexibility Week                                                               ---                                                                                 ---
_____________________________________________________________________________________________________________________________________________
7         Project Cost Management                                           Work on the project, progress report                        ---     
           Progressive Demo B, Retrospective B
_____________________________________________________________________________________________________________________________________________
8         Teamwork, Managing Project Conflict                         Work on the project,                                                 Progressive Demo B conducted in lab
                                                                                                   Progressive Demo B                                               Retrospective B Report due Saturday @ 9pm  
_____________________________________________________________________________________________________________________________________________   
9         Project Change Management,                                    Work on the project, progress report                         ---     
           Final Project Demo
_____________________________________________________________________________________________________________________________________________
10       Remaining Assessment Items, Wrap-up                    Project Final Demo                                                  Final Demo conducted in lab
                                                                                                                                                                                      Project Report due Friday @ 9pm
                                                                                                                                                                                     Software Quality due Friday @ 9pm
                                                                                                                                                                                     Peer Assessment due Saturday @ 9pm
_____________________________________________________________________________________________________________________________________________","{'teamwork': 14, 'time management': 29, 'critical thinking': 29, 'problem solving': 14, 'social networking': 14}","{'git': 9, 'validate': 9, 'github': 9, 'report progress': 9, 'development software': 9, 'proposal project': 9, 'assessment project': 9, 'project software': 9, 'scrum': 9, 'software system': 9, 'quality software': 9}",No Information about Topics
