Course Code,Course Name,Course Summary
COMP1010,The Art of Computing,"This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks e.G. Social networking, reading, essay writing, etc.. The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding."
COMP1511,Programming Fundamentals,"From recent innovations in AI like selfdriving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate realworld problems to computer programs that solve these problems.The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about realworld problems.This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:Fundamental programming concepts, Introduction to Computer Science, The C programming language and use of a C compiler, Programming style, Program design and organisation concepts, Program testing and debugging"
COMP1521,Computer Systems Fundamentals,"This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to lowlevel software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when highlevel programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems."
COMP1531,Software Engineering Fundamentals,"This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.You will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a webbased application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses."
COMP1911,Computing 1A,"From recent innovations in AI like selfdriving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate realworld problems to computer programs that solve these problems.The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about realworld problems.This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:Fundamental programming concepts, Introduction to Computer Science, The C programming language and use of a C compiler, Programming style, Program design and organisation concepts, Program testing and debuggingAdditional Information:This course is taught within COMP1511."
COMP2041,Software Construction: Techniques and Tools,"This course is designed for students who have mastered the basics of programming. It aims to broaden your knowledge of techniques and tools for software construction. It covers: Unix filters, shell scripting and Python for programming, git for version control, docker for portable deployment, package managers for configuration and deployment. At the end of this course, you should be able to build moderatesized software systems and configure them so that others can download and deploy your work."
COMP2111,System Modelling and Design,"This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It reinforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use casestudies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safetycritical industrial contexts."
COMP2121,Microprocessors and Interfacing,"Instruction Set Architecture ISA, Floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and IO interfacing hardware and software, serial communication, timers, analog input and output, converting analog signals to digital signals data acquisition, taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers."
COMP2511,Object-Oriented Design & Programming,"COMP2511 builds on the foundation of firstyear CSE courses, and begins to answer the questions: What does good software look like? And How do you build software that is flexible, reusable and maintainable. The course introduces students to the ObjectOriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and realworld problems. The course also teaches an appreciation for elegantly written code, problem solving and finding welldesigned solutions to problems that have longevity of software in mind."
COMP2521,Data Structures and Algorithms,"The aim of this course is to get you tothink like a computer scientist. This certainly sounds like a noble goal... But what does it really mean? How does ascientist, let alone a computer scientist, actually think?What many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.Computer scientists dont, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems and the interaction between the software and the hardware on which it runs. Also, unlike other scientists, computer scientists frequently build the objects that they study.The goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.TopicsThis course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:Recursion, Analysis of algorithms, Abstract data types, Binary search trees, Balanced search trees, Graphs, Sorting algorithms, Heaps, Hashing, Tries"
COMP3121,Algorithm Design and Analysis,"How would you convince a colleague that your program is correct, and that theirs is flawed?How do you estimate how long a program will run for, and design test cases to find bugs?Br Can all problems be solved efficiently, or are some problems too hard?In this course, you will learn the building blocks to develop problemsolving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divideandconquer, greedy selection and dynamic programming in order to develop accurate and fast algorithms in contexts such as graphs and strings. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.Join us to find out how you can become a better programmer without writing any code."
COMP3131,Programming Languages and Compilers,"This subject focusses on basic compiler techniques needed to implement programming languages in a virtual machine with emphasis on the compiler front end. By writing a compiler in Java to translate a variant of C into Java bytecode, you are also expected to gain a good understanding of important fundamental principles in objectoriented programming languages and develop further your programming and software engineering skills."
COMP3141,Software System Design and Implementation,"This course will present rigorous and formal methods for the design and implementation phases of software system development. Also considered are testing and reuse of designs. As far as possible, software tools that can assist the process will be used. The material will be presented using case studies, and students will be required to undertake a project."
COMP3151,Foundations of Concurrency,"Concurrency processes communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational Nbody problem.Practical work: programming assignments and proving of program safety and liveness properties."
COMP3153,Algorithmic Verification,"It is virtually impossible to guarantee the correctness of a system, and in turn the absence of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification. The course will describe several automatic verification techniques, the algorithms they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools."
COMP3161,Concepts of Programming Languages,"This course discusses and relates a range of programming language concepts and paradigms, including imperative, objectoriented, functional, concurrent amp; parallel programming. It covers the theoretical foundations syntax, operational, axiomatic and denotational semantics as well as practical development and implementation aspects dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency. Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed."
COMP3211,Computer Architecture,"Computer architecture plays a crucial role in defining and bridging the interface between hardware and software in a computer system. It serves as the foundation upon which both hardware and software components are designed and interact with each other. A study of computer architecture complements the study of programming language and algorithm, compiler, and operating system on the software side of the interface, and the study of embedded system, FPGA and VLSI design on the hardware side of the interface."
COMP3222,Digital Circuits and Systems,"This course teaches students the fundamentals of digital design.The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards."
COMP3231,Operating Systems,"Operating System Organisation and services. Process management: scheduling, synchronisation and multiprocessors. Memory management: virtual memory, and paging. Storage management: file systems and IO. Case studies include: UNIX amp; Windows. Programming assignments. Assumed Knowledge: C"
COMP3311,Database Systems,"This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such asa href""http:www.Handbook.Unsw.Edu.AuundergraduatecoursescurrentCOMP9312.Html"" target""blank"" rel""noopener noreferrer nofollow""COMP9312aGraph Data Analytics, anda href""http:www.Handbook.Unsw.Edu.AuundergraduatecoursescurrentCOMP9315.Html"" target""blank"" rel""noopener noreferrer nofollow""COMP9315aDatabase Systems Implementation. Database concepts are also relevant in courses such asa href""http:www.Handbook.Unsw.Edu.AuundergraduatecoursescurrentCOMP9319.Html"" target""blank"" rel""noopener noreferrer nofollow""COMP9319aWeb Data Compression and Search anda href""http:www.Handbook.Unsw.Edu.AuundergraduatecoursescurrentCOMP6714.Html"" target""blank"" rel""noopener noreferrer nofollow""COMP6714aInformation Retrieval and Web Search.By the end of this course, we want you to be capable of building highquality correct and efficient applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally."
COMP3331,Computer Networks and Applications,"This course is an introductory course on computer networks aimed at students with a computer science electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, inclass activities, labs and assignments, you will learn the theory and application of:1 Medium access control, congestion control, flow control, and reliable transmission,2 Addressing and naming,3 Routing and switching,4 Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.5 Specialpurpose networks including content delivery, peertopeer, and wireless networks, and6 Security threats and standard defensive techniquesThis is a combined undergraduate and postgraduate course.The corresponding postgraduate course code is COMP9331."
COMP3411,Artificial Intelligence,"Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computeraided learning. Philosophical and psychological issues. Lab: logic programming assignments."
COMP3421,Computer Graphics,"In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Realitybased graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.The objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry."
COMP3431,Robotic Software Architecture,"An introduction to Intelligent agent design. Picking actions using planning, learning or engineered control. Both practical and theoretical components. Practical component: Reimplement parts of a real agent architecture on a robot. Assignment based. Emphasis on engineering a working system. Theoretical component: Introduction to a variety of research agent architectures including classical planning and reinforcement learning. Lecture and lab based."
COMP3511,Human Computer Interaction,"The course covers topics related to User Interface Design and Visual Design Principles. These topics aim to equip you with the skills necessary to design websites, mobile apps, and various software packages. You will learn how to apply a UserCentered Design process, which involves data collection from users, Requirement Analysis, Design, Prototyping, and Usability Evaluation. This process ensures that the final product is tailored to meet users needs.Additionally, the course covers other relevant topics that help you understand your users and their needs. These topics include an overview of basic Cognitive Capacities, Designing for Accessibility, Internationalization, Levels of Expertise, and Collaboration.Lastly, the course introduces you to new emerging technologies, such as the metaverse, immersive technologies, and smart devices. These technologies require special design considerations and will be explored in the course.By the end of the course, you will have gained a comprehensive understanding of User Interface Design and Visual Design Principles, along with the ability to apply UserCentered Design methodologies and adapt products to meet users needs."
COMP3601,Design Project A,"This course aims to teach students how to carry out realworld hardwaresoftware codesign projects. Throughout the course of the semester, students will work in groups to achieve a complex design. At the beginning of the course, students will be assigned to a group and given a design task. Several required parameters for the task, including a budget, will be provided to students. This course builds upon the skills you have learned in other courses, such as COMP2121DESN2000, COMP3222, electrical engineering, and software design courses to complete a large project through group participation."
COMP3821,Extended Algorithm Design and Analysis,"How can a practitioner of algorithms help smallscale producers interested in sustainable farming? How can you solve strategy games by efficiently using computation time and memory? What do the relationships between difficult problems imply about the existence of feasible solutions to them, from both theoretical and practical standpoints? In this course, you will learn the building blocks to develop problemsolving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divideandconquer, greedy selection and dynamic programming in order to develop fast and accurate algorithms in contexts such as graphs and strings, and study reductions involving linear programming and NPhard problems. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency. Join us to become a more effective, persistent and creative problem solver."
COMP3891,Extended Operating Systems,As for COMP3231 Operating Systems but in greater depth and breadth.Assumed Knowledge: C
COMP3900,Computer Science Project,"This is a software project capstone course. Students work in teams of ideallyfive 5 membersto define, implement and evaluate a realworld software system. Most of the work in this course is teambased project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meetweeklystarting fromWeek 1with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their teammates contributions to the project."
COMP3901,Special Project A,Ever wondered what its like to do research? Have a burning desire to solve an interesting problem of your own?This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.
COMP3902,Special Project B,Ever wondered what its like to do research? Have a burning desire to solve an interesting problem of your own?This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.
COMP4121,Advanced Algorithms,"This course is a continuation of our introductory algorithms courses COMP3121382191019801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skiplists, order statistics and Kargers randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121382191019801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https:www.Cs.Cornell.Edujehbook.Pdf."
COMP4128,Programming Challenges,"How do competitive programmers solve complex problems in a matter of minutes?In this course, you will design and implement advanced algorithms to solve problems accurately and quickly. You will discover sophisticated applications of dynamic programming, data structures, graph algorithms, mathematics and more. Most importantly, you will learn to deconstruct a problem in order to evaluate which algorithm design techniques are appropriate, combining ideas from different contexts, and address the challenges that lie in both solving the problem conceptually and producing a CC program which enacts your solution. Can you rise to the challenge?"
COMP4141,Theory of Computation,"Computability: formal languages and problems, Turing Machines TMs, computability, semidecidability, universal TMs, ChurchTuring thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, nondeterminism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, contextfree grammars and languages CFLs, Chomsky normal form, word problems, pumping lemma, pushdown automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic and its role in a proof of Gdels incompleteness result"
COMP4161,Advanced Topics in Software Verification,"This course is about mechanical proof assistants, how they work, and what they can be used for. It presents specification and proof techniques used in industrial grade theorem provers, teaches the theoretical background to the techniques involved, and shows how to use a theorem prover to conduct formal proofs in practice. The courses is intended to bring thirdfourth year and postgraduate students into contact with the current research topics in the field of theorem proving and automated deduction and to teach them the necessary skills to successfully use industrial grade verification environments in modelling and verification.Topics covered included: higher order logic, natural deduction, lambda calculus, term rewriting, data types and recursive functions, induction principles, calculational reasoning, mathematical proofs, decision procedures for a variety of logical domains, and proofs about programs.Note: experience with firstorder logic and functional programming is required."
COMP4336,Mobile Data Networking,"This is a first course in wireless and mobile networking examining the fundamental theories as well as thelatest advances in wireless data and mobile communication networks. Topics include fundamentalconcepts in wireless coding, modulation, and signal propagation, WiFi and wireless local areanetworks, cellular networks, Bluetooth, and Internet of Things networks. The course will alsooverview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Handson experiments with mobile devices will be part of the learningexercise, which involves wireless packet capture, analysis, and programming."
COMP4337,Securing Fixed and Wireless Networks,"With exponential growth of the Internet, security of a network has become increasingly challenging. This subject will explore the security vulnerabilities in both fixed and wireless networks and cover the fundamental concepts and advanced issues with an emphasis on the Internet architecture and protocols. Br br The following key concepts will be covered: Wireless Communications and Security overview, Review of Cryptographic techniques, 802.11 Technologies and legacy 802.11 Security: lessons learnt, Encryption Ciphers and Methods in Wireless Networks, Wireless Security Risks, Wireless Security Auditing and Pen Test Introduction, IPSec and IP layer security, PKIX.509, Transport Layer SecurityDTLS, Intrusion Detection and Protection Systems, Network Firewalls, Secure Neighbor Discovery, Routing and Forwarding Security, Authentication and Key Management in Wireless NetworksSensor Networks, Broadcast Security and Secure Code Dissemination, Network Privacy and Anonymity, Security and Privacy in Location Services, Smart Grid and IoT security."
COMP4418,Knowledge Representation and Reasoning,"How can you timetable classes to fit everyones schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?Knowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, socalled combinatorial problems. To do so, I will teach you modeling, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification."
COMP4431,Game Design Workshop,"Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?This course will explore the three basic elements of game design mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on thedesign of play, not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry."
COMP4511,User Interface Design and Construction,"COMP4511 is a handson projectbased course designed to build and solidify the basic skills you acquired in COMP35119511. Students will be required to build their interface at least three times remember the process is iterative!, once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.The process doesnt start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?As you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the objectoriented design. You will build the code implementation iterating through both your objectoriented design and your user interface design.The real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect not what you as a programmer expect. Thats the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.We teach a process that is relevant to industry. Preparing students for the realworld challenges of user interface design. And face it, user interfaces are everywhere.The process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?COMP3511 Human Computer Interaction is a prerequisite and you need a mark of 70 or better you are expected to start design, prototyping and designing usability tests in the first week. You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher."
COMP4601,Design Project B,"COMP4601 is a teambased project development course involving the analysis, design and implementation of embedded, high performance or low power FPGAbased accelerators using highlevel synthesis.Students study concepts through lectures and guided lab exercises during the first half of the course, when project teams are also formed and the project goals are developed. During the second half of the course, students are involved in presenting group seminars and working on their projects. The course finishes with final project presentations."
COMP4920,Professional Issues and Ethics in Information Technology,"In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claimsmoral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past realworld computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ethics washing the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability along with their attendant relationships with power, as they relate to computer science in general."
COMP4951,Research Thesis A,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP4952,Research Thesis B,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP4953,Research Thesis C,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP4961,Computer Science Thesis A,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP4962,Computer Science Thesis B,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP4963,Computer Science Thesis C,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design andor the investigation of a hypothesis. Thesis projects are complex, openended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.Through the thesis, you will put into practice the knowledge and skills that youve learned in your study up to this point. You do this by investigating a research topic, developing a significant softwarehardware system, or some combination of these.Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C."
COMP6080,Web Front-End Programming,"COMP6080 aims to develop your confidence in building modern webbased applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UIUX Principles, Accessibility, Network amp; Asynchronous Programming, Frontend Testing, and other basic infrastructure.This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current frontend developers from industry. These lectures primarily come from employees at Canva, a Sydneybased technology company that does a lot of work with frontend technologies.COMP6080 is a challenging course. Frontend development is unlike most things youve experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if theyre hoping to achieve a high mark. Wed encourage you to reflect on this fact before you enrol in the course."
COMP6131,Static Analysis for Software Security,"This course is designed to provide a systematic exploration of automated source code analysis and verification techniques, with the aim of gaining handson experience in implementing code analysis tools to identify common yet important software vulnerabilities in software systems. By taking this course, students can put static analysis theories and advanced techniques into practice. They will be able to build static code analysis toolse.G., written in C based on modern compilers and popular opensource frameworks to scan, comprehend and detect programming mistakes and vulnerabilities with the purpose of enhancing code quality and security."
COMP6441,Security Engineering and Cyber Security,"In this introductory cybersecurity course we look at Security Engineering the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary. We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background. We concentrate on analytical skills and the engineering approach to security design. Well also bring you up to date with the current main trends in cybersecurity.In this course you will undertake an applied self directed security project.There is an associated Extended version of this course COMP6841 for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling. CSE students will probably choose to take the extended version but are not required to. You can transfer between the courses before the census date if you cant make up your mind in advance which is better for you.The precise topics covered in this introductory course change somewhat from year to year to keep the coverage uptodate and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.After completing either of these courses COMP6441 or COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:Digital forensics, Penetration testing, Memory corruption and exploitation, Software assurance, Incident response, Malware analysis and reversing, Cryptanalysis, Cloud Security, Professional issues and leadership in security, Web application security, Fun special projects, MasterclassOur intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways as well as how to create things as is traditional in computing with puzzles, cunning, cloakanddagger antics and a neverending supply of amusing stories. However it will not be an easy course you are expected to master the underlying theory and to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time."
COMP6443,Web Application Security and Testing,Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.
COMP6445,Digital Forensics,"The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory professional practice, and looks at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use standard forensic tools to extract, carve and analyse data as well as learning the lowlevel technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest antiforensics techniques.COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and indepth study of the topic.COMP6445 students are welcome to attend the extended lectures. The information below applies to both courses except where otherwise indicated.By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Antiforensics, Professional Forensic Practice, chain of custody, records etc, Logging, and Mobile Forensics.Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and crossexamination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses."
COMP6447,System and Software Security Assessment,"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.Students from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing lowlevel software vulnerabilities and also of the economics and causal factors involved with their real world use.The course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.Students need a keen, devious and analytical mind.To get the most from this course you will need to engage in independent study and act as a selfdirected learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.Seek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity."
COMP6448,Security Engineering Masterclass,This is an occasional course that will involve a visiting expert in the security area giving a series of lectures and workshops on an advanced topic in cyber security. The precise timing and topics depend on the visitor. The course will be run in intensive mode.
COMP6451,Cryptocurrency and Distributed Ledger Technologies,"Cryptocurrency and Distributed Ledger Technologies are a currently emerging area of technology that draws on multiple areas of computer science to implement systems that provide secure infrastructure for important societal functions, including financial transactions and the management of commercial trust relationships.This course aims to develop an understanding of the requirements for electronic payment systems and how these requirements are realised using distributed ledger technologies. The technical ideas to be understood include the key cryptographic constructs, economic incentive mechanisms and distributed algorithms underpinning cryptocurrencies such as Bitcoin and Ethereum. The concept of smart contract will be introduced, and the course aims to develop a basic facility with programming smart contracts on one cryptocurrency platform. The course also aims to introduce students to the broader context of the range of alternate designs for distributed ledger technologies, the range of potential applications for these technologies, and the socioeconomic, ethical and legal dimensions of their use."
COMP6452,Software Architecture for Blockchain Applications,"This course addresses the knowledge that is needed in order to build applications based on blockchain technology, by offering an architectural view of software systems that make beneficial use of it. It provides guidance on assessing the suitability of blockchain, on the roles blockchain can play in an architecture, on designing blockchain applications, and on assessing different architecture designs and tradeoffs. It also serves as a reference on blockchain design patterns and design analysis, and refers to practical examples of blockchainbased applications.The course covers the following:a general introduction to the topic and to existing blockchain platforms including Bitcoin, Ethereum, and Hyperledger Fabric, and offers examples of blockchainbased applications;, the functional aspects of software architecture are covered, describing the main roles blockchain can play in an architecture, as well as its potential suitability and design process;, nonfunctional aspects of blockchain applications, which are often crosscutting concerns including cost estimation, performance, security;Realworld use cases will be covered, offering additional insights from a practical perspective."
COMP6453,Applied Cryptography,"Cryptography is an indispensable tool for protecting information in computer systems. This course is designed to provide an understanding of Cryptographic algorithms and Cryptanalysis with an aim of using them to protect computer systems, networks, and data protection. The course will emphasise on the foundational aspects of encryption and authentication techniques with an aim to use them correctly and effectively in applications.The technical ideas to be understood include classical algorithms, symmetric key encryption algorithms, public key encryption algorithms, cryptanalysis of ciphers, hash functions, digital signatures, zeroknowledge proofs. Applications like credential management, computing on encrypted data in cloud homomorphic encryption, secure multiparty computation, secure network protocols, blockchains will be explored. Post quantum Cryptography will also be studied."
COMP6713,Natural Language Processing,"Natural language processing NLP is a branch of artificial intelligence that deals with computational approaches used to process text.Human language i.E., natural language is inherently ambiguous. Ambiguity resolution using computational techniques is at the heart of NLP. As a result, the advancements in NLP can be visualized as three generations: rulebased, statistical and neural. The course introduces the three generations of NLP through the philosophy of ambiguity resolution being the core task of NLP. The content covers different NLP subproblems such as POS tagging, sentiment classification, named entity recognition, machine translation and summarisation, and typical approaches in the three generations to tackle these subproblems.With recent advancements in large language models, there has been a renewed interest in NLP from industry and research alike. However, NLP precedes large language models. The exposition of NLP centered around ambiguity resolution helps to develop an understanding of the past and the present of NLP."
COMP6714,Information Retrieval and Web Search,"Information retrieval IR is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.This course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:Information Retrieval:olDocument modeling, Inverted index construction and compression, Vector space model and ranking methods, Probabilistic and language models, Evaluation methods, Relevance feedback and query expansion.OlWeb Search:olWeb search engine architecture, Web crawling and indexing, Web structure and usage analytics.OlThe lecture materials will be complemented by a nonprogramming assignment and a programming project."
COMP6721,(In-)Formal Methods: The Lost Art,"InFormal Methodsare practical structuring and design patterns that encourage programming that is easy to understand and to maintain. They are only a part of the large body of good programming practices, distinguished from that larger set because for the methods we consider the computerscience community has determined thesciencebehind the structures: we know why they are effective.Unusually, this course does not take the traditional route of teaching that science first, and then turning it into practical programming toolsofthought. Instead, we teach the mental tools first, try them on examples and only then, once their effectiveness has been demonstrated, will we look behind the scenes to see where they come from.Initially the material will deal with conventional programs, those that must give the right output. This is known asfunctionalcorrectness, and a sorting program is a simple example. Later in the course we will look at additional correctness criteria, such assecurityperform this calculation in a way that keeps part of the answer hidden andrandomisationimplement overtheinternet protocols that depend intrinsically on coinflipping. Those last two topics will draw on uptotheminute research."
COMP6733,Internet of Things Experimental Design Studio,"Internet of Things IoT will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with handson experience with a popular endtoend IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications Bluetooth Low Energy and 6LoWPAN and security issues, sensors and sensor data smoothing and filtering, lightweight insitu machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voicebased stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C."
COMP6741,Algorithms for Intractable Problems,"The course focuses on algorithms for solving intractable computational problems, socalled NPhard problems. Ideally, one would want to design algorithms that solve each instance exactly and in polynomial time. But since no polynomial time algorithm is known for any NPhard problem, we will relax these requirements and design algorithms that either do not solve the problem exactly, that only solve a subset of instances, or whose worstcase running time is superpolynomial in the input size or some other parameter of the input.Among algorithms that do not solve the problem exactly, we discuss heuristics and approximation algorithms. Heuristics do not guarantee to compute optimal solutions but tend to work well in practice. Approximation algorithms give additional guarantees of the quality of computed solution as compared to the optimal solution.Among algorithms that only solve a subset of instances, we discuss graph classes where NPhard graph problems often become polynomialtime solvable when the input is restricted to these classes.Among algorithms that do not run in polynomial time, we discuss exponentialtime algorithms and parameterized algorithms. In exponentialtime algorithms we discuss algorithmic techniques to solve NPhard problems provably faster than bruteforce in the worst case. In parameterized algorithms, a parameter k is associated with each instance and the goal is to design algorithms whose worstcase running time is fast whenever k is small. We will also see lower bounds for problems and how to rule out certain running times under various complexity assumptions.In addition to deterministic algorithms, we discuss speedups if we have access to randomised algorithms or quantum algorithms."
COMP6752,Modelling Concurrent Systems,"This course tries to make students familiar with stateoftheart techniques in modelling concurrent systems. This is done by comparing some of the more successful models of concurrency found in the literature. The focus will be on the rationale behind the design decisions underlying those models, viewed from philosophical, mathematical and computational perspectives. The course contains important background knowledge for students aiming at a scientific career in which the design of mathematical models of system behaviour is a component.Topics chosen from: semantic models of concurrent and distributed systems e.G. Process algebra, event structures, Petri nets, Chu spaces, operational and denotational semantics, semantic equivalences and implementation relations, linear versus branching time, interleaving versus partial order semantics, true concurrency, algorithms for equivalence checking and their complexity, modal and temporal logic for concurrent systems."
COMP6771,Advanced C++ Programming,"COMP6771 is an advanced programming course teaching practical aspects of intermediateadvanced C programming. The course focuses on teaching the fundamentals of C, followed by exploring powerful abstractions that C enables. This course focuses on using abstractions as well as building abstractions.COMP6771 is focused on modern, practical programming methods and tools. This course is designed for latter year CSE students with a reasonable degree of programming competencies.The course is heavily supported by Christopher Di Bella , a UNSW CSE graduate who is a wellregarded expert on C. His knowledge and expertise assists in forming and updating the course.Our aim for students who complete this course satisfactorily is that they are highly competent in understanding C and its core features, being able to build complex programs, data structures, and algorithms with C, and being ready to immediately move into the workforce in areas that rely heavily on C.COMP6771 can be a challenging course for students due to the volume of work to complete in a 10 week period."
COMP6841,Extended Security Engineering and Cyber Security,"In this introductory cybersecurity course we look at Security Engineering the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary. We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attentionto systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.This course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling. The course provides an introduction to applied cyber security, as well asanalytical skills and taking an engineering approach to security design. Well also bring you up to date with the current main trends in cybersecurity.In this course you will undertake an applied self directed security project.There is an associated Core version of this course COMP6441. CSE students will probably choose to take this Extended course rather than the core course, but are not required to. You can transfer between these two associated courses before the census date if you cant make up your mind in advance which is better for you.This extended course is the core course plus additional applied technical material.After completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:Digital forensics, Penetration testing, Memory corruption and exploitation, Software assurance, Incident response, Malware analysis and reversing, Cryptanalysis, Professional issues and leadership in security, Web application security, Special projects, MasterclassThe precise topics covered in this course will change from year to year to keep the coverage uptodate and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporarysecurity,a good understandingof the current state of the field,andhave begunto think like a security engineer.Our intention is tomake this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways as well as how to create things as is traditional in computing with puzzles, cunning, cloakanddagger antics and a neverending supplyof amusing stories. However it will not be an easy course you are expected to master the underlying theory and to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time."
COMP6843,Extended Web Application Security and Testing,"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.A programming background is required. Students also need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.This is the extended version of COMP6443. This course includes the material of COMP6443 plus penetration testing, and red teaming. Students will work in teams to conduct penetration tests and report on them to real and simulated clients."
COMP6845,Extended Digital Forensics and Incident Response,"The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract, carve and analyse data as well as learning the lowlevel technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest antiforensics techniques.COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and indepth study of the topic.The information below applies to both courses except where otherwise indicated. The main differences between COMP6445 and COMP6845 derive from the motivations behind them, unlike other SECedu courses, the extended course COMP6845 is not only exclusively a more technical deep dive into core COMP6445 concepts but also exposes students to advanced topics in Digital Forensics such as Splunk Logging, iOS and Android Forensics. Hence, COMP6845 includes a deeper dive into more technical aspects of digital forensics. This is achieved through additional weekly workshoplecture during the term.COMP6445 students are welcome to attend the extended lectures.By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Antiforensics, Professional Forensic Practice, chain of custody, records etc, Logging, and Mobile Forensics. Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and crossexamination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses."
COMP6991,Solving Modern Programming Problems with Rust,"This course aims to provide commentary and critique on the practice of programming, and the tooling used to program primarily programming languages themselves. A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, metaprogramming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be wellconsidered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.While proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.Per the advice of previous students, COMP6991 is adifficultcourse with a considerable workload. Please reach out to us either on the course forum or the course email if youre not sure whether COMP6991 is right for you."
COMP9242,Advanced Operating Systems,"The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.This course builds upon the basic operating systems course COMP3231920138919283, which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general systems space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly soughtafter by technology companies and systems researchers."
COMP9243,Distributed Systems,"A detailed coverage of distributed systems, with a particular focus on operating systems issues: clientserver paradigm, remoteprocedure call as OS support for clientserver; distributed shared memory, distributed memory coherency; distributed file systems; distributed process management, including load sharing and process migration; concurrency control; fault tolerance, recoverability and distributed transactions; naming; industry standards; case studies."
COMP9301,Cyber Security Project,Students will complete a small research project under the supervision of an academic member of the school and cosupervision of an industry expert as appropriate
COMP9302,Cyber Security Project B,Students will complete a large research project under the supervision of an academic member of the school and cosupervision of an industry expert as appropriate
COMP9312,Data Analytics for Graphs,"Graphs are ubiquitous and are widely used to capture relationships between different entities in realworld applications. However, compared with traditional sequential data e.G. Text and audio, the unstructured property and the sparsity make processing big graphs very challenging. The course will introduce a series of data structures and algorithms for graph processing in terms of database i.E., big data and deep learning. Fundamental methods and the stateoftheart research works will be integrated. The course will serve as a launching pad for those interested in graph analytics, big data processing and graph neural networks.Data structures and algorithms are the building blocks of many complex systems and software. Certain fundamental graph algorithms such as Dijkstras algorithm and depthfirst search have been covered by many text books and compulsory courses. They may be discussed in terms of pseudocode and time complexity. This course will start from studying how to efficiently implement the fundamental algorithms in big graphs. Then, the course explores more challenging and more complex algorithms stepbystep. When dealing with big graphs, we may consider various scenarios such as external memory solutions, distributed solutions, multicore solutions, etc.The course also puts some attention to graph neural networks, which is a hotspot in the area of AI and deep learning. The course will not study theoretical details about machine learning and deep learning but just introduce several representative graph neural networks. The students will play with basic graph learning tasks and understand learningbased techniques for graph problems such as link prediction and node classification."
COMP9313,Big Data Management,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the opensource big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an opensource memorybased distributed computing framework Spark. Another major focus of this course is algorithm design on largescale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items."
COMP9315,Database Systems Implementation,"This course aims to introduce students to the detailed internal structure of database management systems DBMSs such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background. While the focus is on relational DBMSs, given that they have the bestdeveloped technological foundation, we will also consider more recent developments in the management of large data repositories.Relational DBMSs need to deal with a variety of issues: storage structures and management, implementation of relational operations, query optimisation, transactions, concurrency, recovery, security. The course will address most of these, along with a brief look at emerging database systems trends. The level of detail on individual topics will vary; some will be covered in significant detail, others will be covered relatively briefly.An important aspect of this course is to give you a chance to explore the internals of arealDBMS: PostgreSQL. Lectures will discuss the general principles of how DBMSs are implemented, and will also illustrate them with examples from PostgreSQL where possible. Since DBMSs are very large pieces of software, it wont be possible to explore the entire PostgreSQL system in depth."
COMP9319,Web Data Compression and Search,"As the amount of Web data increases, it is becoming vital to not only be able to search and retrieve this information quickly, but also to store it in a compact manner. This is especially important for mobile devices which are becoming increasingly popular. Without loss of generality, within this course, we assume Web data excluding media content will be in XML and its like e.G., HTML, JSON.If time allows, we may cover optional topics such as: streaming algorithms, text analytics, Web data optimization for mobile devices. The lecture materials will be complemented by two programming assignments and numerous tutorialtype, written exercises."
COMP9321,Data Services Engineering,"This course aims to introduce the student to core concepts and practical skills for engineering the data in Webserviceoriented datadriven applications. Specifically, the course aims to expose students to basic infrastructure for building data services on the Web, including techniques to access and ingest data in internalexternal sources, develop software services to curate e.G. Extract, transform, correct, aggregate the data, develop services to apply various analytics and develop services to visualize the data to communicate effectively usingdata. The course uses the Python programming language as the practical basis for its modules. However, the concepts taught are universal and can be applied to any other web development languageframework."
COMP9332,Network Routing and Switching,"This course will focus on the routing and switching architectures, algorithms and protocols for packet switching networks, both connectionless and connection oriented networks such as IP and ATM networks. Advanced Internet addressing : CIDR, VPN, NAT. In depth discussion of interior and exterior routing protocols, such BGP, OSPF. IP over ATM solutions : such as LANE, Classical IP over ATM. IP switching and MPLS. Mobile IP. Internet Multicasting. Overview of emerging switching and routing technologies, such as optical routing and QoS routing. There is a substantial network programming component in the assessable material, for which C prgramming knowledge is assumed."
COMP9334,Capacity Planning of Computer Systems and Networks,"We live in a world that events do not happen instantly. It takes a certain amount of time to download a video from a server to your own mobile device. It takes a certain amount of time for a computer to finish the execution of an algorithm. The time to completion or response time in performance analysis terminology is a performance metric that computer scientists and computer engineers should be concerned about because no one wants to wait unnecessarily. If you can understand the factors that determine the response time, then you can influence those factors so that the response time becomes acceptable. This course will take a mathematical modelling and analytical approach to understand response time in computer systems and networks. The primary goal is to explore how mathematical modelling and mathematical methods can be used to model, analyse and design computer systems and networks so that they have good performance. There are three major topics that will be covered by this course:Queuing analysis Note: Queues are important because they give rise to waiting time., Discrete event simulation, Integer programming for network design"
COMP9417,Machine Learning and Data Mining,"Machine learning is the algorithmic approach to learning from data. The course also covers aspects of data mining, the application of machine learning to obtain insight from data. In this course machine learning algorithms are placed in the context of their theoretical foundations in order to understand their derivation and correct application. Machine learning also is an empirical science, where performance of algorithms must be rigorously evaluated on datasets. Completion of this course will contribute to further learning in advanced topics such as deep learning, bioinformatics, computer vision, and robotics. Topics covered in the course include: linear models for regression and classification, local methods nearest neighbour, tree learning, kernel machines, neural networks, unsupervised learning, ensemble learning, and learning theory. To expand and extend the development of theory and algorithms presented in lectures, practical examples will be given in tutorials and programming tasks during the project."
COMP9418,Advanced Topics in Statistical Machine Learning,"This course presents an indepth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models PGMs. PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains MCMC, Gibbs Sampling, Viterbi and the BaumWelch algorithms, among others."
COMP9444,Neural Networks and Deep Learning,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning."
COMP9447,Security Engineering Workshop,"Applied workshop in an emerging area in cyber security. The course is supervised and taught by relevant academics andor industry experts in the field. Areas vary depending on the availability of subject domain experts from time to time. Examples of relevant areas include: Cloud Security, Cryptanalysis on commercial products, mainframe security audit and penetration testing."
COMP9491,Applied Artificial Intelligence,"This course presents some advanced topics in various aspects of artificial intelligence such as computer vision, speech and language processing, deep learning, and knowledge representation and reasoning. The course aims to integrate these various aspects of AI and present case studies where such integration of different methodologies delivers interesting applications. Project development is the major component of this course, to develop a solution to a practical or industrybased problem that requires an integration of more than one type of AI techniques ranging from symbolic AI e.G. Knowledge representation and reasoning to deep learning, with example applications in computer vision, speech and language processing, etc. Assessment is based on group project development."
COMP9517,Computer Vision,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract highlevel information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physicsbased mathematical and statistical models as well as machinelearning methods are used to assist in the task. Current realworld applications are wideranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a realworld application of computer vision."
COMP9727,Recommender Systems,"Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by ecommerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems."
