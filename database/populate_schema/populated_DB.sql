-- MySQL dump 10.13  Distrib 8.1.0, for Linux (aarch64)
--
-- Host: localhost    Database: uni
-- ------------------------------------------------------
-- Server version	8.1.0

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

CREATE DATABASE uni;
USE uni;

--
-- Table structure for table `tblCourse`
--

DROP TABLE IF EXISTS `tblCourse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblCourse` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `courseCode` varchar(8) DEFAULT NULL,
  `courseName` varchar(255) DEFAULT NULL,
  `courseDescription` text,
  `courseSkills` text,
  `courseKnowledge` text,
  `topics` text,
  `yearDate` int DEFAULT NULL,
  `term` varchar(25) DEFAULT NULL,
  `revision` datetime DEFAULT NULL,
  `school` varchar(255) DEFAULT NULL,
  `thumbnail` text,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `unique_course_revision` (`courseCode`,`yearDate`,`term`),
  KEY `school` (`school`),
  CONSTRAINT `tblCourse_ibfk_1` FOREIGN KEY (`school`) REFERENCES `tblSchool` (`schoolName`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblCourse`
--

LOCK TABLES `tblCourse` WRITE;
/*!40000 ALTER TABLE `tblCourse` DISABLE KEYS */;
INSERT INTO `tblCourse` VALUES (1,'COMP1010','The Art of Computing','This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding.','{\"problem solving\": 18, \"resilience\": 27, \"critical thinking\": 18, \"spreadsheets\": 9, \"adaptability\": 9, \"time management\": 9, \"social networking\": 9}','{\"HTML\": 14, \"git\": 14, \"flask\": 14, \"python\": 14, \"modules\": 14, \"libraries\": 14, \"computer system\": 14}','[\'programming in Python\', \'computational problem solving\', \'spreadsheets\', \'computer systems\']',2023,'T3','2023-10-23 22:55:56','School of Computer Science and Engineering',NULL),(2,'COMP1511','Programming Fundamentals','From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.\nIn this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.\nThe concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.\nThis course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:\nFundamental programming concepts\nIntroduction to Computer Science\nThe C programming language and use of a C compiler\nProgramming style\nProgram design and organisation concepts\nProgram testing and debugging','{\"operate\": 9, \"problem solving\": 18, \"communication\": 27, \"adaptability\": 18, \"critical thinking\": 9, \"resilience\": 18}','{\"level high\": 6, \"robotics\": 6, \"general programming\": 6, \"translate\": 6, \"unix\": 6, \"programming language\": 6, \"flow control\": 6, \"compiler c\": 6, \"genome\": 6, \"programming concept\": 6, \"mechanics\": 6, \"programs computer\": 6, \"design program\": 6, \"computer system\": 6, \"list link\": 6, \"arrays\": 6}','[\'Malloc and start of Linked Lists\', \'VariablesConstants\', \'Control Flow\', \'Static Arrays\', \'Pointers\', \'Memory\', \'What is a program\', \'Memory allocation\', \'Arrays\', \'Basic linked list\', \'Control Flow and Variables\', \'2D Arrays\', \'Strings\', \'Variables\', \'Program 1 Arrays\', \'Procedures\', \'Linked Lists\', \'What is programming\', \'Setting up your environment\', \'Memory heap vs stack\', \'Dynamic arrays\', \'Basic InputOutput\', \'UNIX + Tools\', \'Program 2 Linked Lists\', \'Functions\', \'Basic control flow\', \'Custom Data Types\']',2023,'T3','2023-10-23 22:59:47','School of Computer Science and Engineering',NULL),(3,'COMP1521','Computer Systems Fundamentals','This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems.','{\"communication\": 29, \"problem solving\": 14, \"leadership\": 14, \"adaptability\": 14, \"time management\": 14, \"reading\": 14}','{\"programs executes\": 6, \"level high\": 6, \"IEEE\": 6, \"networks architecture systems\": 6, \"assembly language\": 6, \"level high language\": 6, \"virtual memory\": 6, \"issues systems\": 6, \"system file\": 6, \"architecture operating\": 6, \"programming file\": 6, \"computer system\": 6, \"programs procedural\": 6, \"operating system\": 6, \"electronic component\": 6, \"compilers\": 6}','[\'file metadata file systems\', \'using threads in C\', \'manipulating files metadata and directories\', \'Bit manipulations Integer representations\', \'concurrency parallelism threads\', \'MIPS assembly programming\']',2023,'T3','2023-10-23 23:04:17','School of Computer Science and Engineering',NULL),(4,'COMP1531','Software Engineering Fundamentals','This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.\nYou will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a web-based application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.','{\"resilience\": 15, \"teamwork\": 8, \"communication\": 15, \"problem solving\": 8, \"adaptability\": 15, \"critical thinking\": 8, \"time management\": 8, \"reading\": 8, \"social networking\": 8, \"mobile device abilities\": 8}','{\"coverage code\": 5, \"cycle life\": 5, \"practices software\": 5, \"elicit requirements\": 5, \"design build\": 5, \"validate\": 5, \"end front\": 5, \"methodologies development\": 5, \"model data\": 5, \"design systems\": 5, \"methodologies software\": 5, \"git\": 5, \"software agile\": 5, \"software system\": 5, \"servers http\": 5, \"user story\": 5, \"development software\": 5, \"javascript\": 5, \"model conceptual\": 5}','[\'Advanced Functions\', \'Git  Solo Usage\', \'Software Complexity\', \'Package Management\', \'Bonus Building an MVP\', \'Exceptions\', \'Continuous Integration\', \'Validation\', \'Git  Team Usage\', \'Static Verification\', \'Javascript\', \'Dynamic Verification\', \'Persistence\', \'Designing for Maintainability\', \'Linting\', \'Use Cases User Stories\', \'Conceptual Modelling\', \'Auth\', \'Data Interchange\', \'Deployment\', \'Bonus Web Frontend\', \'Mutlifile  Importing\', \'Git  Undo\', \'Code Coverage\', \'HTTP Servers\']',2023,'T3','2023-10-23 23:08:07','School of Computer Science and Engineering',NULL),(5,'COMP2511','Object-Oriented Design and Programming','COMP2511 builds on the foundation of first-year CSE courses, and begins to answer the questions: \"What does good software look like?\" and \"How do you build software that is flexible, reusable and maintainable\". The course introduces students to the Object-Oriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and real-world problems. The course also teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software in mind.','{\"problem solving\": 29, \"critical thinking\": 43, \"communication\": 14, \"adaptability\": 14}','{\"polymorphism\": 4, \"pattern composite\": 4, \"orient programming object\": 4, \"design software\": 4, \"programming language\": 4, \"design iterator\": 4, \"pattern observer\": 4, \"java\": 4, \"model domain\": 4, \"OOP\": 4, \"oriented object\": 4, \"pattern iterator\": 4, \"IDE\": 4, \"builder pattern\": 4, \"maintainable\": 4, \"pattern visitor\": 4, \"microservice\": 4, \"software system\": 4, \"generic programming\": 4, \"class abstract\": 4, \"cycle development software life\": 4, \"junit\": 4, \"development software\": 4, \"orient design object\": 4, \"event driven\": 4, \"designed systems\": 4}','[\'Builder Pattern\', \'Exceptions\', \'Risk Engineering\', \'Decorator Pattern\', \'Template Pattern\', \'Refactoring\', \'Design by Contract\', \'Design Principles\', \'Design Patterns Summary\', \'Observer Pattern\', \'State Pattern\', \'Generic Programming\', \'Inheritance  Polymorphism\', \'Composite Pattern\', \'JUnit Testing\', \'Domain Modelling\', \'Creational Patterns\', \'Adapter Pattern\', \'Abstract Classes  Interfaces\', \'Iterator Pattern\', \'Guest\', \'Visitor Pattern\', \'Encapsulation\', \'Strategy Pattern\', \'Test Design\', \'The Functional Paradigm\', \'Event Driven Design\', \'The ObjectOriented Paradigm\', \'Generics  Collections\']',2023,'T3','2023-10-23 23:11:57','School of Computer Science and Engineering',NULL),(6,'COMP2521','Data Structures and Algorithms','The aim of this course is to get you to think like a computer scientist . This certainly sounds like a noble goal... but what does it really mean? How does a scientist , let alone a computer scientist, actually think?\nWhat many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.\nComputer scientists don\'t, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also, unlike other scientists, computer scientists frequently build the objects that they study.\nThe goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.\nTopics\nThis course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:\nRecursion\nAnalysis of algorithms\nAbstract data types\nBinary search trees\nBalanced search trees\nGraphs\nSorting algorithms\nHeaps\nHashing\nTries','{\"problem solving\": 25, \"operate\": 12, \"communication\": 12, \"adaptability\": 12, \"resilience\": 25, \"social networking\": 12}','{\"future study\": 7, \"bioinformatics\": 7, \"binary search tree\": 7, \"programming tool\": 7, \"type abstract\": 7, \"queue priority\": 7, \"graphs\": 7, \"programming language\": 7, \"algorithms\": 7, \"sorting algorithms\": 7, \"software system\": 7, \"list link\": 7, \"graph d\": 7, \"computer engineering\": 7}','[\'Tries problem solving with data structures and algorithms\', \'Binary search trees\', \'Abstract data types binary search trees\', \'Sorting algorithms\', \'Graph traversal graph problems\', \'Graph traversal\', \'Arrays and linked list revision\', \'Binary search trees continued graph basics\', \'Minimum spanning trees\', \'Directedweighted graphs Dijkstras algorithm minimum spanning trees\', \'Dijkstras algorithm minimum spanning trees\', \'Graph basics\', \'Hash tables\', \'Pointers and linked list revision\', \'Hash tables priority queues and heaps\', \'Recursion\']',2023,'T3','2023-10-23 23:15:48','School of Computer Science and Engineering',NULL),(7,'COMP3121','Algorithms and Programming Techniques','Students will learn a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc). This will include famous algorithms using these ideas in graph problems, string matching, etc, but more importantly how to apply these ideas to develop correct and efficient algorithms to solve new problems. Students will develop their abilities in problem solving and analysis of algorithms, as well as in written communication as they express and argue for their ideas.\nThere is also an extended Algorithms course COMP3821/9801 which runs only in T1 each year. We recommend that top students take the extended course instead of this one. Extended Algorithms moves at a faster pace and covers more topics and some topics in more depth. It assumes higher autonomy from students and offers a few different perspectives on problem solving.','{\"problem solving\": 33, \"communication\": 33, \"social networking\": 33}','{\"dynamic programming\": 17, \"graph\": 17, \"linear programming\": 17, \"algorithms\": 17, \"conquer divide\": 17, \"design algorithm\": 17}','[\'flow networks\', \'divide and conquer\', \'the greedy method\', \'intractability\', \'dynamic programming\', \'string matching linear programming\']',2023,'T3','2023-10-23 23:20:18','School of Computer Science and Engineering',NULL),(8,'COMP3161','Concepts of Programming Languages','This course discusses and relates a range of programming language concepts and paradigms, including imperative, object-oriented, functional, concurrent and parallel programming. It covers the theoretical foundations (syntax, operational, axiomatic and denotational semantics) as well as practical development and implementation aspects (dynamic and strong typing, polymorphism, overloading, automatic memory management, and concurrency). Due to the course topics, a variety of programming languages will be studied and used. Assignments will be in the programming language Haskell, but no previous knowledge of Haskell is assumed.','{\"resilience\": 33, \"reading\": 33, \"critical thinking\": 11, \"problem solving\": 11, \"time management\": 11}','{\"polymorphism\": 12, \"programming language\": 12, \"oriented object\": 12, \"lambda calculus\": 12, \"semantics\": 12, \"haskell\": 12, \"axiomatic\": 12, \"formal language\": 12}','[\'Natural Deduction Rule Induction Syntax\', \'Abstract Machines Environments\', \'Operational Semantics Lambda Calculus\', \'Polymorphism Type Inference\', \'Imperative Programming MinHS\', \'Intro Haskell Induction\', \'Properties Type safety Type theory\', \'Abstract Data Types Overloading and Subtyping\']',2023,'T3','2023-10-23 23:24:08','School of Computer Science and Engineering',NULL),(9,'COMP3222','Digital Circuits and Systems','This course teaches students the fundamentals of digital design.\nThe course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.\n ','{\"numbers\": 14, \"communication\": 14, \"problem solving\": 14, \"critical thinking\": 29, \"time management\": 14, \"reading\": 14}','{\"tool design\": 7, \"design circuit\": 7, \"arithmetic\": 7, \"digital logic\": 7, \"multiplexers\": 7, \"aid design computer\": 7, \"algorithms\": 7, \"counters\": 7, \"FPGA\": 7, \"array gate programmable field\": 7, \"VHDL\": 7, \"digital system\": 7, \"simulate\": 7, \"courses course\": 7, \"gate array\": 7}','[\'Finite State Machines continued\', \'Implementing Algorithms in Hardware\', \'Latches Flipflops and Registers\', \'Finite State Machines\', \'Implementing Algorithms in Hardware continued\', \'Blackjack player\', \'Simple Processor\', \'Switches Lights and Multiplexers\', \'Numbers and Displays\', \'Counters\']',2023,'T3','2023-10-23 23:27:58','School of Computer Science and Engineering',NULL),(10,'COMP3311','Database Systems','This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.\nLarge data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such as COMP9312 Graph Data Analytics, and COMP9315 Database Systems Implementation. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.\nBy the end of this course, we want you to be capable of building high-quality (correct and efficient) applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally.','{\"resilience\": 14, \"time management\": 29, \"critical thinking\": 14, \"communication\": 29, \"teamwork\": 14}','{\"python\": 7, \"data compression\": 7, \"procedure store\": 7, \"analytics\": 7, \"database system\": 7, \"database developing\": 7, \"database application\": 7, \"redundant data\": 7, \"graph\": 7, \"control concurrency\": 7, \"functional dependency\": 7, \"information retrieval\": 7, \"diagram er\": 7, \"web search\": 7, \"models data\": 7}','[\'SQL queries\', \'Relational Algebra Query Execution\', \'DBPL interaction Python Psycopg2\', \'Triggers Aggregates\', \'Aggregates\', \'Relational Model SQL DDL Mapping ER to SQL\', \'Functional dependencies normalization\', \'Set up PostgreSQL server SQLite\', \'Stored functions\', \'Defining a database\', \'PLpgSQL\', \'Transactions Concurrency Database Futures Course Review\', \'Python meets SQL\']',2023,'T3','2023-10-23 23:31:47','School of Computer Science and Engineering',NULL),(11,'COMP3331','Computer Networks and Applications','This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:\n(1) Medium access control, congestion control, flow control, and reliable transmission,\n(2) Addressing and naming,\n(3) Routing and switching,\n(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.\n(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and\n(6) Security threats and standard defensive techniques (if time permits)\nThis is a combined undergraduate and postgraduate course.','{\"problem solving\": 9, \"communication\": 9, \"teamwork\": 9, \"leadership\": 9, \"adaptability\": 18, \"critical thinking\": 9, \"time management\": 9, \"resilience\": 9, \"reading\": 9, \"social networking\": 9}','{\"delivery content\": 4, \"network layer\": 4, \"python\": 4, \"pipeline delivery\": 4, \"service transport\": 4, \"udp\": 4, \"transport layer\": 4, \"DNS\": 4, \"ICMP\": 4, \"flow control\": 4, \"cryptography\": 4, \"person\": 4, \"ip tcp\": 4, \"TCP\": 4, \"java\": 4, \"com\": 4, \"logistics\": 4, \"transmission\": 4, \"algorithms\": 4, \"present data\": 4, \"application layer\": 4, \"digital signature\": 4, \"multiple protocols\": 4, \"access control\": 4, \"peer to\": 4}','[\'Fairness\', \'Transport Layer\', \'Pipelined Protocols\', \'Multiple Access Protocols\', \'Congestion control\', \'Wireless Networks\', \'IP\', \'Link State and Distance Vector\', \'Layering and Encapsulation\', \'TCP\', \'The Web  HTTP\', \'PeertoPeer Networks and DHT\', \'Socket Programming\', \'LinkLayer Addressing and ARP\', \'Error detection\', \'Switches\', \'Link Layer\', \'Application Layer\', \'Message integrity  Digital signatures\', \'Hierarchical routing\', \'Basic Cryptography\', \'Domain Name Service DNS\', \'NAT\', \'CSMACA\', \'Performance of networks\', \'Network Security\', \'Ethernet\', \'Network Layer Data Plane\', \'Principles of reliable data delivery\', \'A day in the life of a web request\', \'Network Layer Control Plane\', \'Routing algorithms\', \'Authentication\', \'Wireless Characteristics\', \'Multiplexing  Demultiplexing\', \'ICMP\', \'Transport services\', \'Connection management  flow control\', \'Network edge and core\', \'UDP\', \'Principles of networked applications\', \'IP Addressing\', \'What is the Internet\']',2023,'T3','2023-10-23 23:36:16','School of Computer Science and Engineering',NULL),(12,'COMP3421','Computer Graphics','In this course, you will delve into the fundamentals and practical aspects of Computer Graphics by working with game engines. You will gain knowledge and skills in developing 2D, 3D, and Virtual Reality-based graphical objects and environments using game engines including Unreal Engine and Unity. Additionally, you will understand computer graphics concepts, including lighting, reflection, static meshes, 2D Transforms, 3D Transforms, surface, texture maps, materials, cameras, object physical behaviors, collision detection, hierarchical modeling of objects, shaders, and rendering.\nThe objectives of this course are to equip you with the necessary skills to work as a computer graphics expert in the industry, specifically in the development of optimal graphical interactive environments and game development. Through practical experience in computer graphics, you will also acquire the essential theoretical foundation that prepares you for a successful career in the industry.','{\"reading\": 20, \"communication\": 10, \"problem solving\": 10, \"leadership\": 10, \"adaptability\": 20, \"critical thinking\": 10, \"time management\": 10, \"resilience\": 10}','{\"macros\": 5, \"geometry\": 5, \"surface\": 5, \"effect visual\": 5, \"controllers\": 5, \"spawn\": 5, \"person\": 5, \"unreal engine\": 5, \"comprehend\": 5, \"delve\": 5, \"maps\": 5, \"fbx\": 5, \"physical\": 5, \"blueprint\": 5, \"snap\": 5, \"user interface\": 5, \"computer graphic\": 5, \"physics apply\": 5, \"hierarchical model\": 5}','[\'Animating objects in 2D\', \'Advanced material design\', \'Rendering 2D sprites\', \'Advanced concepts of camera\', \'Grabbing and moving objects in VR\', \'Developing VR hand\', \'Spawn manager\', \'Physics and collision detection 2D\', \'Creating Visual Effects The Niagara VFX System\', \'Mapping controllers to rotate objects in 3D\', \'Advanced collision detection and physics in 3D\', \'Applying damage to the player pawn\', \'Mapping controllers to move objects in 3D\', \'Blueprint macros\', \'Adding user interface elements\', \'Prefab objects and projectiles in 2D\', \'Creating conditional trigger box\', \'Importing prebuilt graphical elements FBX files\', \'Advanced concepts in landscape brushes\', \'Snap turn in VR\', \'Animating objects\', \'Player pawn 2D\', \'Texture layers\', \'Movement in VR\', \'Blueprint functions\', \'Rendering VR scenes\', \'Mapping controllers in 2D\', \'Teleportation Movement in VR\', \'Advanced concepts in geometry brushes in 3D\', \'Creating projectile in 3D\', \'Player pawn and transform tools in 3D\', \'Creating VR player pawn\', \'Applying damaging and destroying objects 2D\', \'Player pawn class and camera\', \'Mapping virtual reality controllers\', \'2D Objects and transform\']',2023,'T3','2023-10-23 23:40:48','School of Computer Science and Engineering',NULL),(13,'COMP3900','Computer Science Project','This is a software project capstone course. Students work in teams of ideally five (5) members to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates\' contributions to the project.','{\"teamwork\": 14, \"time management\": 29, \"critical thinking\": 29, \"problem solving\": 14, \"social networking\": 14}','{\"git\": 9, \"validate\": 9, \"github\": 9, \"report progress\": 9, \"development software\": 9, \"proposal project\": 9, \"assessment project\": 9, \"project software\": 9, \"scrum\": 9, \"software system\": 9, \"quality software\": 9}','[]',2023,'T3','2023-10-23 23:44:48','School of Computer Science and Engineering',NULL),(14,'COMP3901','Special Project A','Ever wondered what it\'s like to do research? Have a burning desire to solve an interesting problem of your own?\nThis course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.','{\"resilience\": 25, \"communication\": 25, \"supervision\": 25, \"critical thinking\": 25}','{\"development course\": 100}','[]',2023,'T3','2023-10-23 23:48:37','School of Computer Science and Engineering',NULL),(15,'COMP3902','Special Project B','Ever wondered what it\'s like to do research? Have a burning desire to solve an interesting problem of your own?\nThis course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.','{\"resilience\": 25, \"communication\": 25, \"supervision\": 25, \"critical thinking\": 25}','{\"development course\": 100}','[]',2023,'T3','2023-10-23 23:52:26','School of Computer Science and Engineering',NULL),(16,'COMP4121','Advanced Algorithms','This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some of the basic randomised algorithms and data structures, such as randomised hashing, skip-lists, order statistics and Karger\'s randomised Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, the Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, such as the recommender systems as well as some of the algorithms used in Data Science. We will cover parts of three books: our COMP3121/3821/9101/9801 textbook Algorithm Design by Kleinberg and Tardosh, Networked Life by Mung Chiang and Foundations of Data Science by Blum, Hopcroft and Kannan. The first two books are available in the bookstore. A preprint of the third book is available for free at https://www.cs.cornell.edu/jeh/book.pdf.','{\"problem solving\": 17, \"resilience\": 33, \"communication\": 17, \"adaptability\": 17, \"critical thinking\": 17}','{\"model hide markov\": 14, \"algorithms\": 14, \"transform fast fourier\": 14, \"database access\": 14, \"pagerank\": 14, \"recommender system\": 14, \"design algorithm\": 14}','[\'Google PageRank algorithm and Markov chains\', \'Recommender systems clustering algorithms\', \'The Discrete Fourier Transform the Fast Fourier Transform and convolution\', \'Order statistic skip lists and randomised database access\', \'Kargers Min Cut algorithm universal and perfect hashing\', \'Hidden Markov models and the Viterbi algorithm\', \'Gaussian Annulus random projections and Johnson Lindenstrauss lemma\', \'probability and statistics refresher\', \'The Singular Values Decomposition and applications\']',2023,'T3','2023-10-23 23:56:13','School of Computer Science and Engineering',NULL),(17,'COMP4128','Programming Challenges',' ','{\"problem solving\": 50, \"time management\": 25, \"teamwork\": 25}','{\"graphs\": 25, \"algorithmic\": 25, \"dynamic programming\": 25, \"paths\": 25}','[\'Data Structures I\', \'Data Structures II\', \'Mathematics continued\', \'Dynamic Programming\', \'Mathematics\', \'Network Flow\', \'Dynamic Programming continued\', \'Shortest Paths\', \'Data Structures II continued\', \'Graphs\', \'Graphs continued\', \'ProblemSolving Paradigms\', \'Data Structures I continued\']',2023,'T3','2023-10-24 00:00:07','School of Computer Science and Engineering',NULL),(18,'COMP4336','Mobile Data Networking','This is a first course in wireless and mobile networking examining the fundamental theories as well as the latest advances in wireless data and mobile communication networks. Topics include fundamental concepts in wireless coding, modulation, and signal propagation, WiFi and wireless local area networks, cellular networks, Bluetooth, and Internet of Things networks. The course will also overview some of the emerging wireless networking concepts, such as wireless sensing, and droneassisted mobile networks. Hands-on experiments with mobile devices will be part of the learning exercise, which involves wireless packet capture, analysis, and programming.','{\"mobile device abilities\": 17, \"communication\": 17, \"teamwork\": 17, \"problem solving\": 17, \"resilience\": 17, \"social networking\": 17}','{\"thing internet of\": 17, \"bluetooth\": 17, \"mobile\": 17, \"algorithms\": 17, \"video released\": 17, \"network local area\": 17}','[]',2023,'T3','2023-10-24 00:04:00','School of Computer Science and Engineering',NULL),(19,'COMP4418','Knowledge Representation and Reasoning','How can you timetable classes to fit everyone’s schedule? Could tactical voting occur in Australia? Can a single computer program play and solve both sudoku and minesweeper?\nKnowledge Representation and Reasoning is at the core of Artificial Intelligence and the corresponding course, COMP4418, will equip you to answer the questions above and many other ones, so-called combinatorial problems. To do so, I will teach you “modeling”, that is the representation of a problem and its solutions in a way the computer can understand. You will learn a declarative programming language, a paradigm in which one only specifies what constitutes a solution to a problem and then leaves it to the computer to actually find the solution. With this new tool under your belt, you can effectively tackle most combinatorial problems coming your way, from planning and scheduling to digital circuit synthesis or some limited program verification.','{\"problem solving\": 17, \"resilience\": 17, \"critical thinking\": 17, \"adaptability\": 17, \"reading\": 8, \"communication\": 8, \"time management\": 8, \"social networking\": 8}','{\"theory game\": 14, \"limited\": 14, \"vocabulary\": 14, \"programming language\": 14, \"architecture software\": 14, \"program computer\": 14, \"minesweeper\": 14}','[\'Formal Logic and Reasoning Firstorder Logic\', \'Solving problems with Answer Set Programming\', \'Multiagent Resource Allocation\', \'Cooperative Game Theory\', \'Social Choice\', \'Reasoning about Actions\', \'Implementing Formal Reasoning Commonsense Reasoning\']',2023,'T3','2023-10-24 00:07:50','School of Computer Science and Engineering',NULL),(20,'COMP4431','Game Design Workshop','Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?\nThis course will explore the three basic elements of game design - mechanics, aesthetics, and dynamics. We will also look at game design through the lens of accessibility. The focus is on the design of play , not on programming or graphics. The iterative process of game design is demonstrated through the design, prototyping and playtesting a boardgame. You will be working in the maker space to create rapid prototypes and iterative playtesting of your games. There will also be guest lectures from the games industry.','{\"communication\": 12, \"leadership\": 12, \"problem solving\": 12, \"adaptability\": 25, \"critical thinking\": 12, \"resilience\": 25}','{\"prototype\": 14, \"mechanics\": 14, \"flipped classroom\": 14, \"prototypes rapid\": 14, \"order higher\": 14, \"franchises\": 14, \"com\": 14}','[\'Continuing the ideation process\', \'Beginning the tightrope of balance\', \'The MDA Framework\', \'Playtesting\', \'Induction to Maker Space Equipment\', \'GUEST LECTURE Gender and identity in gaming and ethics of games\', \'The game pitch\', \'Ethics of games\', \'What is a game\', \'Prototyping\', \'Core Mechanics\', \'Brainstorming and ideation\', \'Inclusivity and Accessibility of Games\', \'Lets start getting hands dirty with some prototyping\', \'Starting to play with mechanics\', \'Balance\', \'Which leads right into playtesting and balancing\', \'Preparing for your final deliverable and playtesting\', \'Game Community\', \'Evaluating your game\', \'What is game design\', \'Aesthetics of games\', \'Prototyping Playtesting and Balancing\', \'Playtesting all the games\', \'Design Documentation\']',2023,'T3','2023-10-24 00:11:41','School of Computer Science and Engineering',NULL),(21,'COMP4511','User Interface Design and Construction','COMP4511 is a hands-on project-based course designed to build and solidify the basic skills you acquired in COMP3511/9511. Students will be required to build their interface at least three times (remember the process is iterative!), once as a low fidelity prototype, moving to a higher fidelity electronic prototype and finishing with a beta version of the app. This semester, we will be using React to help us write the app. The course will provide you with a basic understanding and the building blocks required to create your app, and let you guide the design and development process.\nThe process doesn\'t start with coding, it starts with an understanding your users. You develop personas of your target audience and work through the design issues: What information are they going to be dealing with? What are the workflows? How are they going to interact with the application? What is the application going to look like?\nAs you learned in Human Computer Interaction, you have to conceptualise your design on paper and evaluate prototypes with users. Then you start on the design of your system, not focussing on just the code but also the object-oriented design. You will build the code implementation iterating through both your object-oriented design and your user interface design.\nThe real insights come when we usability test your application. Do your users really understand how to use your application? Does it work the way that they expect - not what you as a programmer expect. That\'s the challenge. What is the difference between a bug and a design flaw? Proper evaluation techniques will help you uncover both.\nWe teach a process that is relevant to industry. Preparing students for the real-world challenges of user interface design. And face it, user interfaces are everywhere.\nThe process is not just about putting buttons and text on screen. COMP3511 only touched the surface of what user interface design is all about. Are you up for the challenge of designing graphical user interfaces?\nCOMP3511 Human Computer Interaction is a pre-requisite and you need a mark of 70 or better (you are expected to start design, prototyping and designing usability tests in the first week). You should have completed COMP2511 which introduces you to object oriented techniques, UML and design patterns, with a mark of 65 or higher.','{\"resilience\": 18, \"basic skills\": 6, \"critical thinking\": 24, \"communication\": 18, \"reading\": 6, \"problem solving\": 6, \"leadership\": 6, \"adaptability\": 12, \"mobile device abilities\": 6}','{\"surface\": 5, \"tool design\": 5, \"information architecture\": 5, \"multi generational\": 5, \"prototype\": 5, \"user graphical interface\": 5, \"person\": 5, \"project plan\": 5, \"logistics\": 5, \"analysis need\": 5, \"audience target\": 5, \"software system\": 5, \"development process\": 5, \"user story\": 5, \"user interface\": 5, \"designing graphical\": 5, \"mobile\": 5, \"app mobile\": 5, \"orient design object\": 5, \"workflows\": 5}','[\'Prototyping with Figma Usability Testing and Evaluation recap\', \'Multi Generational Design and Inclusive Design\', \'Introducing Atomic Design Creating a Design System\', \'Personas and Scenarios User Stories for Requirements User Story Mapping\', \'Visual Design in Apps  Colour Theory in Apps\', \'Recharge week so no lectures\', \'Mobile Design Principles\', \'Blackboard collaborate React Native\', \'Blackboard collaborate Design Thinking continued\']',2023,'T3','2023-10-24 00:15:33','School of Computer Science and Engineering',NULL),(22,'COMP4920','Professional Issues and Ethics in Information Technology','In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of \"ethics washing\" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.','{\"resilience\": 25, \"articulate\": 12, \"ethical responsibility\": 12, \"adaptability\": 25, \"critical thinking\": 25}','{\"ontology\": 14, \"research ethics\": 14, \"algorithmic\": 14, \"transparency\": 14, \"claims\": 14, \"debates\": 14, \"practice professional\": 14}','[\'Trust Automation and Value Sensitive Design\', \'Ethics in Computing and Value Alignment\', \'Utilitarian ethics and evidence deontological ethics and computability\', \'Environment extractivism and power\', \'Reflections\', \'Virtue ethics and digital identity\', \'Ethics Washing\', \'Bias fairness and explainability\']',2023,'T3','2023-10-24 00:19:21','School of Computer Science and Engineering',NULL),(23,'COMP4951','Research Thesis A','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.','{\"innovatively\": 12, \"problem solving\": 12, \"resilience\": 12, \"communication\": 12, \"critical thinking\": 25, \"adaptability\": 12, \"social networking\": 12}','{\"research development and\": 25, \"environment development\": 25, \"specific design\": 25, \"ended open\": 25}','[]',2023,'T3','2023-10-24 00:23:11','School of Computer Science and Engineering',NULL),(24,'COMP4952','Research Thesis B','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.','{\"innovatively\": 12, \"problem solving\": 12, \"resilience\": 12, \"communication\": 12, \"critical thinking\": 25, \"adaptability\": 12, \"social networking\": 12}','{\"research development and\": 25, \"environment development\": 25, \"specific design\": 25, \"ended open\": 25}','[]',2023,'T3','2023-10-24 00:26:59','School of Computer Science and Engineering',NULL),(25,'COMP4953','Research Thesis C','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.','{\"innovatively\": 11, \"problem solving\": 11, \"resilience\": 11, \"communication\": 11, \"critical thinking\": 33, \"adaptability\": 11, \"social networking\": 11}','{\"evaluate project\": 20, \"research development and\": 20, \"environment development\": 20, \"specific design\": 20, \"ended open\": 20}','[]',2023,'T3','2023-10-24 00:30:48','School of Computer Science and Engineering',NULL),(26,'COMP4961','Computer Science Thesis A','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.\n ','{\"innovatively\": 12, \"problem solving\": 12, \"resilience\": 12, \"communication\": 12, \"critical thinking\": 25, \"adaptability\": 12, \"social networking\": 12}','{\"research development and\": 25, \"environment development\": 25, \"specific design\": 25, \"ended open\": 25}','[]',2023,'T3','2023-10-24 00:34:37','School of Computer Science and Engineering',NULL),(27,'COMP4962','Computer Science Thesis B','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.','{\"innovatively\": 12, \"problem solving\": 12, \"resilience\": 12, \"communication\": 12, \"critical thinking\": 25, \"adaptability\": 12, \"social networking\": 12}','{\"research development and\": 25, \"environment development\": 25, \"specific design\": 25, \"ended open\": 25}','[]',2023,'T3','2023-10-24 00:39:06','School of Computer Science and Engineering',NULL),(28,'COMP4963','Computer Science Thesis C','The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.\nThrough the thesis, you will put into practice the knowledge and skills that you\'ve learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.\nUndergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.','{\"innovatively\": 11, \"problem solving\": 11, \"resilience\": 11, \"communication\": 11, \"critical thinking\": 33, \"adaptability\": 11, \"social networking\": 11}','{\"evaluate project\": 20, \"research development and\": 20, \"environment development\": 20, \"specific design\": 20, \"ended open\": 20}','[]',2023,'T3','2023-10-24 00:42:55','School of Computer Science and Engineering',NULL),(29,'COMP6080','Web Front-End Programming','COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network and Asynchronous Programming, Front-end Testing, and other basic infrastructure.\nThis course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.\nCOMP6080 is a challenging course. Front-end development is unlike most things you\'ve experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they\'re hoping to achieve a high mark. We\'d encourage you to reflect on this fact before you enrol in the course.','{\"critical thinking\": 11, \"time management\": 22, \"teamwork\": 11, \"problem solving\": 11, \"leadership\": 11, \"adaptability\": 11, \"resilience\": 11, \"reading\": 11}','{\"canva\": 5, \"mobile page\": 5, \"aggregate\": 5, \"accessibility network\": 5, \"hook\": 5, \"semantics\": 5, \"end front\": 5, \"flexbox\": 5, \"git\": 5, \"debug\": 5, \"ajax\": 5, \"data formats\": 5, \"HTML\": 5, \"servers http\": 5, \"libraries component\": 5, \"javascript\": 5, \"json\": 5, \"level higher\": 5, \"xmlhttprequest\": 5}','[\'Understandability\', \'CSS Showcase\', \'Demo Javascript  Browser\', \'useContext\', \'DOM\', \'Transpilation\', \'Working with Multiple Files\', \'NPM Advanced\', \'useState hook\', \'Flexbox\', \'CSS Frameworks\', \'Using Git in pairs\', \'Demo Ass2  Async  Planning\', \'CSS Grids\', \'Prerendering\', \'Demo ReactJS Further\', \'Perceivability\', \'Operabilitity\', \'AJAX\', \'Usability testing\', \'Demo Javascript  NodeJS\', \'Javascript Intro compared to C\', \'Before you code\', \'CSS Formatting\', \'Component Testing\', \'UI Testing Demo\', \'Linting\', \'Components  Props\', \'Demo ReactJS in Ass3\', \'State management\', \'Dev Tools\', \'Good  Bad UI 1\', \'Using CSS Frameworks\', \'Preprocessors\', \'Node Package Manager\', \'Figma  Component Libraries\', \'More Tags\', \'Using Fetch  Hooks\', \'CSS Layouts\', \'SVGs\', \'Forms\', \'Demo HTMLCSS Page\', \'Good  Bad UI 2\', \'Robustness\', \'Understand HTTP Servers\', \'Fetch\', \'Javascript Closures\', \'Local Storage\', \'UI Testing\', \'Routing  SPAs\', \'useEffect hook\', \'Promises\', \'UI Fundamentals\', \'Fonts\', \'HTML Fundamentals\', \'CSS Rules\', \'Mobile CSS\', \'The Javascript Ecosystem\', \'Await  Async\', \'Javascript Language Features  Syntax\', \'Lifescycle\', \'Events\', \'Class components\', \'JSON  Datainterchange formats\', \'XMLHttpRequest XHR\', \'Javascript Advanced Functions\', \'Demo ReactJS Intro  A11y\', \'Events  Callbacks\', \'Basic Global CSS Usage\', \'Image Types\', \'zindex\']',2023,'T3','2023-10-24 00:46:45','School of Computer Science and Engineering',NULL),(30,'COMP6441','Security Engineering and Cyber Security','In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.\nThis course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security. We do not assume a programming background.  We concentrate on analytical skills and the engineering approach to security design. We\'ll also bring you up to date with the current main trends in cybersecurity.\nIn this course you will undertake an applied self directed security project. \nThere is an associated \"Extended\" version of this course (COMP6841) for students who can code, ideally in C, and who know low level concepts such as memory implementation and function calling.  CSE students will probably choose to take the extended version but are not required to.  You can transfer between the courses before the census date if you can\'t make up your mind in advance which is better for you.\nThe precise topics covered in this introductory course change somewhat from year to year to keep the coverage up-to-date and relevant. As you will see cybersecurity has recently been and remains a rapidly changing field. The field is now way too big for us to cover everything in detail in just one course but by the end of course you will have an overview of the major topics in contemporary security, a good understanding of the current state of play, and have begun to think like a security engineer.\nAfter completing either of these courses (COMP6441 or COMP6841) you can proceed to the other UNSW Computing Security Courses covering topics in:\nOur intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study in your own time.\nDigital forensics\nPenetration testing\nMemory corruption and exploitation\nSoftware assurance\nIncident response\nMalware analysis and reversing\nCryptanalysis\nCloud Security\nProfessional issues and leadership in security\nWeb application security\nFun special projects\nMasterclass','{\"resilience\": 12, \"communication\": 12, \"leadership\": 6, \"critical thinking\": 24, \"adaptability\": 18, \"teamwork\": 12, \"problem solving\": 6, \"time management\": 6, \"social networking\": 6}','{\"directed self\": 5, \"design security\": 5, \"analysis malware\": 5, \"engineer security\": 5, \"web security application\": 5, \"cybercrime\": 5, \"strings format\": 5, \"security computing\": 5, \"digital forensic\": 5, \"physical\": 5, \"cryptanalysis\": 5, \"reverse engineering\": 5, \"rootkits\": 5, \"analytical\": 5, \"cloud security\": 5, \"buffer overflow\": 5, \"ciphers\": 5, \"cross site\": 5, \"randomness\": 5, \"corruption memory\": 5, \"response incident\": 5, \"control security\": 5}','[\'Nation States\', \'Asymmetric Ciphers\', \'Engineering Security\', \'Data\', \'Communication and Change\', \'Command and Control Security by Design\', \'Protocols I  Web\', \'Privacy\', \'International dimensions\', \'Integrity\', \'Risk + Trust\', \'Secrets\', \'Surveillance digital identity\', \'Cybercrime\', \'Measuring Modern Ciphers\', \'All Elections\', \'The role of law in regulation for cyber security\', \'Regulators\', \'Humans\', \'Cyberfraud\', \'Critical infrastructure\', \'Legal obligations incl secretkeeping\', \'Just Culture Normal Accidents\', \'Insiders\', \'Planning Authentication\']',2023,'T3','2023-10-24 00:50:35','School of Computer Science and Engineering',NULL),(31,'COMP6447','System and Software Security Assessment','This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.\nStudents from this course will engage in wargames, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.\nThe course covers techniques and skills including vulnerability classes, source code auditing,fuzzing, security bugs, software security assurance, taint analysis, memory corruption, overflows and return oriented programming. The course coverage will be constantly updated over time to reflect emerging attack and defence methods.\nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.\nStudents need a keen, devious and analytical mind.\nTo get the most from this course you will need to engage in independent study and act as a self-directed learner. Attending lectures alone will not be sufficient to pass the course. You will need to devote considerable practice to all the techniques we cover and read further on topics which interest you or which you do not fully understand. For a credit level result we expect you will spend 15 hours per week in total on this course.\nSeek feedback from your friendly lecturers, tutors and class peers constantly over the term and closely monitor yourself to make sure you are not falling behind. Experience has shown that students who do not work hard at the course do not do well, and often express disappointment later on at the missed opportunity.','{\"teamwork\": 12, \"critical thinking\": 25, \"problem solving\": 12, \"adaptability\": 25, \"resilience\": 12, \"social networking\": 12}','{\"directed self\": 7, \"study independent\": 7, \"strings format\": 7, \"shellcode\": 7, \"software bugs\": 7, \"reverse engineering\": 7, \"analytical\": 7, \"buffer overflow\": 7, \"code source\": 7, \"security software\": 7, \"vulnerabilities\": 7, \"act\": 7, \"oriented programming\": 7, \"corruption memory\": 7, \"exploited\": 7}','[\'Buffer overflows\', \'Return oriented programming\', \'Heap Exploitation\', \'Harder Challenges\', \'Reverse Engineering\', \'Stack Canaries\', \'Buffer Overflows\', \'Intro to Reverse Engineering\', \'Hacking in the Real World\', \'Countermeasures  ASLR PIE\', \'Fuzzers\', \'Stack canaries\', \'Harder ROP + Revision\', \'Tooling\', \'Harder Binaries\', \'How to write shellcode\', \'Return Oriented Programming\', \'Memory Fundamentals\', \'Advanced Reverse Engineering\', \'Source Code Auditing\', \'Harder return oriented programming  pivot\', \'How to defeat ASLR PIE\', \'Format Strings\', \'Learn Pwntools\', \'Environment Setup\', \'History of Hacking\', \'Shellcode\']',2023,'T3','2023-10-24 00:54:24','School of Computer Science and Engineering',NULL),(32,'COMP6714','Information Retrieval and Web Search','Information retrieval (IR) is the process of retrieving relevant information by specifying a query to an IR system. Web search is one form of an IR system that allows users to search information on the Internet based on a search engine. It involves computing a numeric score on how well each result matches the query and ranking the results according to this score.\nThis course aims to introduce the concepts, theories, and algorithmic issues important to Information Retrieval. If time allows, the course will also cover some recent topics and common practices. The course is composed of the following parts:\nInformation Retrieval:\nWeb Search:\nThe lecture materials will be complemented by a non-programming assignment and a programming project.','{\"resilience\": 50, \"communication\": 25, \"problem solving\": 25}','{\"web system\": 10, \"algorithmic\": 10, \"engine search\": 10, \"information retrieval\": 10, \"link analysis\": 10, \"space vector\": 10, \"index\": 10, \"general model\": 10, \"build systems\": 10, \"web search\": 10}','[\'Index Construction\', \'Vector Space Model\', \'Crawling\', \'Evaluation\', \'Link Analysis\', \'Compression\', \'Preprocessing\']',2023,'T3','2023-10-24 00:58:20','School of Computer Science and Engineering',NULL),(33,'COMP6841','Extended Security Engineering and Cyber Security','In this introductory cybersecurity course we look at Security Engineering – the engineering principles behind designing, monitoring, and maintaining security in the face of an adversary.  We explore selected case studies and examine the practical principles behind effective security. We introduce the fundamental ideas of security and then we look at how these are applied in current cyber security practice. We will pay particular attention to systems which fail and the importance of thinking like an attacker. This course involves analysis, critical thinking and design. A cunning and devious mind will be an asset. Although our main concern is cybersecurity, the engineering principles we cover apply to security more generally.\nThis course introduces modern cybersecurity design and practice, and is suitable for anyone with a playful analytical mind and a general interest in security.  We assume knowledge of coding, ideally in C, and knowledge of low level computing concepts such as memory implementation and function calling.  The course provides an introduction to applied cyber security, as well as analytical skills and taking an engineering approach to security design. We\'ll also bring you up to date with the current main trends in cybersecurity.\nIn this course you will undertake an applied self directed security project. \nThere is an associated \"Core\" version of this course (COMP6441).  CSE students will probably choose to take this Extended course rather than the core course, but are not required to.  You can transfer between these two associated courses before the census date if you can\'t make up your mind in advance which is better for you.\nThis extended course is the core course plus additional applied technical material.\nAfter completing COMP6841 you can proceed to the other UNSW Computing Security Courses covering topics in:\nThe precise topics covered in this course will change from year to year to keep the coverage up-to-date and relevant. The field is now too big for us to cover everything in detail in a single course but by the end of this course you will have an overview of the major topics in contemporary security, a good understanding of the current state of the field, and have begun to think like a security engineer.\nOur intention is to make this a highly enjoyable course. The field is quite stimulating as the security mindset you will develop involves understanding know how to break things in creative ways (as well as how to create things as is traditional in computing) with puzzles, cunning, cloak-and-dagger antics and a never-ending supply of amusing stories. However it will not be an easy course – you are expected to master the underlying theory *and* to be able to apply it to real world situations. There is a lot to learn and we expect you to work hard and study it in your own time.\nDigital forensics\nPenetration testing\nMemory corruption and exploitation\nSoftware assurance\nIncident response\nMalware analysis and reversing\nCryptanalysis\nProfessional issues and leadership in security\nWeb application security\nSpecial projects\nMasterclass','{\"resilience\": 12, \"communication\": 12, \"leadership\": 6, \"critical thinking\": 25, \"adaptability\": 19, \"teamwork\": 12, \"time management\": 6, \"social networking\": 6}','{\"directed self\": 4, \"design security\": 4, \"analysis malware\": 4, \"engineer security\": 4, \"web security application\": 4, \"person\": 4, \"cybercrime\": 4, \"strings format\": 4, \"security computing\": 4, \"digital forensic\": 4, \"physical\": 4, \"cryptanalysis\": 4, \"reverse engineering\": 4, \"based systems\": 4, \"rootkits\": 4, \"analytical\": 4, \"buffer overflow\": 4, \"ciphers\": 4, \"cross site\": 4, \"vulnerabilities\": 4, \"randomness\": 4, \"corruption memory\": 4, \"response incident\": 4, \"control security\": 4}','[\'Nation States\', \'Asymmetric Ciphers\', \'Engineering Security\', \'Data\', \'Communication and Change\', \'Command and Control Security by Design\', \'Protocols I  Web\', \'Privacy\', \'International dimensions\', \'Integrity\', \'Risk + Trust\', \'Secrets\', \'Surveillance digital identity\', \'Cybercrime\', \'Measuring Modern Ciphers\', \'All Elections\', \'The role of law in regulation for cyber security\', \'Regulators\', \'Humans\', \'Cyberfraud\', \'Critical infrastructure\', \'Legal obligations incl secretkeeping\', \'Just Culture Normal Accidents\', \'Insiders\', \'Planning Authentication\']',2023,'T3','2023-10-24 01:02:13','School of Computer Science and Engineering',NULL),(34,'COMP6991','Solving Modern Programming Problems with Rust','This course aims to provide commentary and critique on the practice of programming, and the tooling used to program (primarily programming languages themselves). A variety of programming concepts across many programming languages are examined, including: syntax, typing, polymorphism, documentation, testing, meta-programming, concurrency, parallelism, safety, and more. The Rust programming language is used as a reference language to teach considerations behind these concepts. As a language commonly cited to be well-considered, it serves as a good foundation to help students understand where countless other languages may let them down. Lectures will compare and contrast Rust with other languages, but will also discuss where Rust can similarly let students down.\nWhile proficiency in writing Rust programs is an important learning outcome of this course, of greater importance is the ability to write more robust programs in whichever language a student happens to be using at the time.\nPer the advice of previous students, COMP6991 is a difficult course with a considerable workload. Please reach out to us either on the course forum or the course email if you\'re not sure whether COMP6991 is right for you.','{\"problem solving\": 20, \"communication\": 10, \"critical thinking\": 20, \"reading\": 30, \"time management\": 10, \"resilience\": 10}','{\"polymorphism\": 11, \"modularity\": 11, \"programming concept\": 11, \"programming languages\": 11, \"programming develop\": 11, \"program designs\": 11, \"algebraic\": 11, \"high performance\": 11, \"validate\": 11}','[\'Unsafe community crates\', \'Documentation testing modularity\', \'Rust intro algebraic types\', \'Concurrency parallelism\', \'Functions metaprogramming\', \'Borrowing lifetimes\', \'Collections error handling\', \'Polymorphism\']',2023,'T3','2023-10-24 01:06:03','School of Computer Science and Engineering',NULL),(35,'COMP9242','Advanced Operating Systems','The course provides students with a deep understanding of modern operating system technology, implementation techniques and research issues.\nThis course builds upon the basic operating systems course (COMP3231/9201/3891/9283), which provides an understanding of the underlying operating systems which students have implicitly relied upon in developing applications in foundational courses within Computer Science and Engineering, and will rely on in their future careers when developing systems and applications. Advanced operating systems enables students to specialise in operating systems, giving them the skills and insight to become highly competent developers or researchers in the general “systems” space, including operating systems, network systems, embedded and cyberphysical systems. The course produces graduates who are highly sought-after by technology companies and systems researchers.','{\"resilience\": 25, \"communication\": 12, \"critical thinking\": 25, \"time management\": 12, \"social networking\": 12, \"mobile device abilities\": 12}','{\"developing systems\": 6, \"API\": 6, \"SMP\": 6, \"unix\": 6, \"virtual machine\": 6, \"virtual servers\": 6, \"techniques performance\": 6, \"linux\": 6, \"oss\": 6, \"benchmarks\": 6, \"software system\": 6, \"operating system\": 6, \"embedded systems\": 6, \"performance system\": 6, \"high performance\": 6, \"monolithic\": 6}','[\'An indicative schedule is provided below\', \'Multicore Operating Systems\', \'SMP and Locking\', \'Unix and Linux Internals Security Fundamentals\', \'Caches What every OS designer must know OS Execution Models\']',2023,'T3','2023-10-24 01:09:50','School of Computer Science and Engineering',NULL),(36,'COMP9301','Cyber Security Project','Students will complete a small research project under the supervision of an academic member of the school and co-supervision of an industry expert as appropriate','{\"supervision\": 14, \"problem solving\": 14, \"resilience\": 14, \"adaptability\": 29, \"innovative\": 14, \"social networking\": 14}','{\"research security\": 50, \"research engineering\": 50}','[]',2023,'T3','2023-10-24 01:13:40','School of Computer Science and Engineering',NULL),(37,'COMP9313','Big Data Management','This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items.','{\"time management\": 33, \"teamwork\": 17, \"problem solving\": 17, \"adaptability\": 17, \"resilience\": 17}','{\"analytics\": 9, \"datum big\": 9, \"level high\": 9, \"yarn\": 9, \"query language\": 9, \"data stream\": 9, \"graph\": 9, \"mapreduce\": 9, \"nosql\": 9, \"hive\": 9, \"design algorithm\": 9}','[\'Spark 2\', \'Hadoop MapReduce 2\', \'Hadoop MapReduce 1\', \'Mining Data Streams\', \'Graph Data Management\']',2023,'T3','2023-10-24 01:17:38','School of Computer Science and Engineering',NULL),(38,'COMP9418','Advanced Topics in Statistical Machine Learning','This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.\nIn this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.\nDuring this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others.','{\"resilience\": 36, \"communication\": 9, \"teamwork\": 9, \"leadership\": 9, \"adaptability\": 9, \"critical thinking\": 27}','{\"automated reasoning\": 7, \"model hide markov\": 7, \"parameters\": 7, \"semantics\": 7, \"maximum likelihood\": 7, \"graph\": 7, \"algorithms\": 7, \"filter kalman\": 7, \"monte carlo\": 7, \"calculus\": 7, \"adopt\": 7, \"empirical analysis\": 7, \"limits\": 7, \"inference statistical\": 7}','[\'Exact inference  Bayesian networks as classifiers\', \'Bayesian networks representation and semantics\', \'Belief propagation and sampling\', \'Gaussian Bayesian Networks\', \'Graph representation traversal and common algorithms\', \'Factor elimination and jointrees\', \'Belief propagation  Approximate inference by Sampling\', \'Gaussian Bayesian networks\', \'Bayesian networks\', \'Probability calculus and factor implementation\', \'MAP inference  Markov networks\', \'Variable elimination\', \'Markov networks\', \'Learning parameters and graph structure\', \'The jointree algorithm\', \'Markov chains and hidden Markov models\']',2023,'T3','2023-10-24 01:21:26','School of Computer Science and Engineering',NULL),(39,'COMP9444','Neural Networks and Deep Learning','Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.\nTopics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning.','{\"problem solving\": 20, \"resilience\": 20, \"adaptability\": 20, \"communication\": 10, \"critical thinking\": 10, \"time management\": 10, \"social networking\": 10}','{\"numpy\": 8, \"python\": 8, \"matplotlib\": 8, \"autoencoders\": 8, \"LSTM\": 8, \"neural network recurrent\": 8, \"networks convolutional\": 8, \"softmax\": 8, \"model network\": 8, \"memory short long term\": 8, \"neuroanatomy\": 8, \"processing natural language\": 8, \"pytorch\": 8}','[\'Hidden Unit Dynamics\', \'Word Vectors and Language Processing\', \'Reinforcement Learning\', \'Softmax Hidden Unit Dynamics\', \'Convolutional Neural Networks\', \'Policy Learning and Deep RL\', \'Long ShortTerm Memory\', \'Generative Adversarial Networks\', \'Python Refresher\', \'PyTorch\', \'Google Colab Refresher\', \'Probability and Backprop\', \'Natural Language Processing\', \'Generative AI\', \'Image Processing\', \'Attend respective mentoring session as a team\', \'Matplotlib Refresher\', \'Word Vectors\', \'Backprop Variations Hidden Unit Dynamics\', \'Cross Entropy Softmax and Weight Decay\', \'Convolution\', \'Numpy Refresher\', \'Generative Artificial Intelligence\', \'Perceptrons\', \'Vision and Language Learning\', \'Convolution and Image Processing\', \'MultiLayer Networks and Backpropagation\', \'TDLearning and QLearning\', \'Recurrent Networks and LSTM\', \'Recurrent Neural Networks\', \'Probability Generalization and Overfitting\', \'Recent Advances in Deep Learning\', \'Unsupervised and Multimodal Learning\', \'Perceptrons and Backpropagation\', \'Autoencoders and Adversarial Training\', \'Neuroanatomy and Perceptrons\']',2023,'T3','2023-10-24 01:25:17','School of Computer Science and Engineering',NULL),(40,'COMP9517','Computer Vision','Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision.','{\"reading\": 17, \"communication\": 33, \"problem solving\": 17, \"critical thinking\": 17, \"resilience\": 17}','{\"physics\": 8, \"object detection\": 8, \"level high\": 8, \"model building\": 8, \"algorithms\": 8, \"system visual\": 8, \"character recognition optical\": 8, \"feature extraction\": 8, \"module software\": 8, \"models statistical\": 8, \"medical imaging\": 8, \"computer engineering\": 8, \"biometrics\": 8}','[\'Deep Learning I\', \'Image Segmentation\', \'Guest s on Advanced Applications of Computer Vision\', \'Feature Representation\', \'Image Processing\', \'Motion Tracking\', \'Pattern Recognition\', \'Deep Learning II\']',2023,'T3','2023-10-24 01:29:13','School of Computer Science and Engineering',NULL),(41,'COMP9727','Recommender Systems','Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by e-commerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems.','{\"social networking\": 25, \"critical thinking\": 50, \"communication\": 25}','{\"association rule\": 8, \"prototype\": 8, \"user interface\": 8, \"commerce e\": 8, \"linear algebra\": 8, \"algorithms\": 8, \"network analysis\": 8, \"processing natural language\": 8, \"application specific\": 8, \"personalized\": 8, \"project assessment\": 8, \"recommender system\": 8}','[\'KnowledgeBased Recommender Systems\', \'Review linear algebra matrices and vectors\', \'ContentBased Recommender Systems\', \'Social Recommender Systems\', \'Industry Guest\', \'Social Network Analysis\', \'Sequential Recommender Systems\', \'ContextAware Recommender Systems\', \'Collaborative Filtering\']',2023,'T3','2023-10-24 01:33:01','School of Computer Science and Engineering',NULL);
/*!40000 ALTER TABLE `tblCourse` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblCourseArchive`
--

DROP TABLE IF EXISTS `tblCourseArchive`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblCourseArchive` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `courseID` int DEFAULT NULL,
  `courseCode` varchar(8) DEFAULT NULL,
  `courseName` varchar(255) DEFAULT NULL,
  `courseDescription` text,
  `courseSkills` text,
  `courseKnowledge` text,
  `topics` text,
  `yearDate` int DEFAULT NULL,
  `term` varchar(25) DEFAULT NULL,
  `revision` datetime DEFAULT NULL,
  `school` varchar(255) DEFAULT NULL,
  `thumbnail` text,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `unique_course_revision` (`courseCode`,`yearDate`,`term`,`revision`),
  KEY `courseID` (`courseID`),
  KEY `school` (`school`),
  CONSTRAINT `tblCourseArchive_ibfk_1` FOREIGN KEY (`courseID`) REFERENCES `tblCourse` (`ID`),
  CONSTRAINT `tblCourseArchive_ibfk_2` FOREIGN KEY (`school`) REFERENCES `tblSchool` (`schoolName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblCourseArchive`
--

LOCK TABLES `tblCourseArchive` WRITE;
/*!40000 ALTER TABLE `tblCourseArchive` DISABLE KEYS */;
/*!40000 ALTER TABLE `tblCourseArchive` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblCourseEnrolment`
--

DROP TABLE IF EXISTS `tblCourseEnrolment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblCourseEnrolment` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `course` int DEFAULT NULL,
  `user` int DEFAULT NULL,
  `courseRole` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `course` (`course`),
  KEY `user` (`user`),
  CONSTRAINT `tblCourseEnrolment_ibfk_1` FOREIGN KEY (`course`) REFERENCES `tblCourse` (`ID`),
  CONSTRAINT `tblCourseEnrolment_ibfk_2` FOREIGN KEY (`user`) REFERENCES `tblUser` (`zID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblCourseEnrolment`
--

LOCK TABLES `tblCourseEnrolment` WRITE;
/*!40000 ALTER TABLE `tblCourseEnrolment` DISABLE KEYS */;
INSERT INTO `tblCourseEnrolment` VALUES (1,2,1234561,'academic'),(2,29,1234561,'academic'),(3,6,1234561,'academic'),(4,2,1234563,'student'),(5,3,1234563,'student'),(6,29,1234564,'student'),(7,4,1234564,'student'),(8,2,1234565,'student'),(9,40,1234565,'student');
/*!40000 ALTER TABLE `tblCourseEnrolment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblCourseRole`
--

DROP TABLE IF EXISTS `tblCourseRole`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblCourseRole` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `courseRoleName` varchar(255) DEFAULT NULL,
  `courseRoleDescription` text,
  `coursePermissions` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblCourseRole`
--

LOCK TABLES `tblCourseRole` WRITE;
/*!40000 ALTER TABLE `tblCourseRole` DISABLE KEYS */;
/*!40000 ALTER TABLE `tblCourseRole` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblGroup`
--

DROP TABLE IF EXISTS `tblGroup`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblGroup` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `groupName` varchar(255) DEFAULT NULL,
  `project` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `project` (`project`),
  CONSTRAINT `tblGroup_ibfk_1` FOREIGN KEY (`project`) REFERENCES `tblProject` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblGroup`
--

LOCK TABLES `tblGroup` WRITE;
/*!40000 ALTER TABLE `tblGroup` DISABLE KEYS */;
INSERT INTO `tblGroup` VALUES (1,'GROUPERS',1),(2,'SKILL KINGS',2),(3,'Knowledge',3),(4,'LOL',2);
/*!40000 ALTER TABLE `tblGroup` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblGroupMember`
--

DROP TABLE IF EXISTS `tblGroupMember`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblGroupMember` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `groupID` int DEFAULT NULL,
  `student` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `groupID` (`groupID`),
  KEY `student` (`student`),
  CONSTRAINT `tblGroupMember_ibfk_1` FOREIGN KEY (`groupID`) REFERENCES `tblGroup` (`ID`),
  CONSTRAINT `tblGroupMember_ibfk_2` FOREIGN KEY (`student`) REFERENCES `tblUser` (`zID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblGroupMember`
--

LOCK TABLES `tblGroupMember` WRITE;
/*!40000 ALTER TABLE `tblGroupMember` DISABLE KEYS */;
INSERT INTO `tblGroupMember` VALUES (1,1,1234563),(2,2,1234563),(3,3,1234563),(4,1,1234564),(5,4,1234564);
/*!40000 ALTER TABLE `tblGroupMember` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblMajor`
--

DROP TABLE IF EXISTS `tblMajor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblMajor` (
  `ID` varchar(6) NOT NULL,
  `majorName` varchar(255) DEFAULT NULL,
  `program` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `program` (`program`),
  CONSTRAINT `tblMajor_ibfk_1` FOREIGN KEY (`program`) REFERENCES `tblProgram` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblMajor`
--

LOCK TABLES `tblMajor` WRITE;
/*!40000 ALTER TABLE `tblMajor` DISABLE KEYS */;
/*!40000 ALTER TABLE `tblMajor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblProgram`
--

DROP TABLE IF EXISTS `tblProgram`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblProgram` (
  `ID` int NOT NULL,
  `programName` varchar(255) DEFAULT NULL,
  `managingSchool` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `managingSchool` (`managingSchool`),
  CONSTRAINT `tblProgram_ibfk_1` FOREIGN KEY (`managingSchool`) REFERENCES `tblSchool` (`schoolName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblProgram`
--

LOCK TABLES `tblProgram` WRITE;
/*!40000 ALTER TABLE `tblProgram` DISABLE KEYS */;
/*!40000 ALTER TABLE `tblProgram` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblProject`
--

DROP TABLE IF EXISTS `tblProject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblProject` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `course` int DEFAULT NULL,
  `projectName` text,
  `client` text,
  `creatorZId` int DEFAULT NULL,
  `skills` text,
  `knowledge` text,
  `thumbnail` text,
  `scope` text,
  `requirements` text,
  `topics` text,
  `outcomes` text,
  PRIMARY KEY (`ID`),
  KEY `course` (`course`),
  CONSTRAINT `tblProject_ibfk_1` FOREIGN KEY (`course`) REFERENCES `tblCourse` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblProject`
--

LOCK TABLES `tblProject` WRITE;
/*!40000 ALTER TABLE `tblProject` DISABLE KEYS */;
INSERT INTO `tblProject` VALUES (1,NULL,'Fitness Tracker','Jane Doe',1234561,'{\n          \"operate\": 9,\n          \"problem solving\": 18,\n          \"communication\": 27,\n          \"adaptability\": 18,\n          \"critical thinking\": 9,\n          \"resilience\": 18\n      }','{\n          \"level high\": 6,\n          \"robotics\": 6,\n          \"general programming\": 6,\n          \"translate\": 6,\n          \"unix\": 6,\n          \"programming language\": 6,\n          \"flow control\": 6,\n          \"compiler c\": 6,\n          \"genome\": 6,\n          \"programming concept\": 6,\n          \"mechanics\": 6,\n          \"programs computer\": 6,\n          \"design program\": 6,\n          \"computer system\": 6,\n          \"list link\": 6,\n          \"arrays\": 6\n      }',NULL,'Completes this within 5 weeks','Completed comp1511','[\"topic 1\", \"topic 2\"]',NULL),(2,NULL,'Recipe App','Mr Corp',1234561,'{\n          \"operate\": 9,\n          \"problem solving\": 18,\n          \"communication\": 27,\n          \"resilience\": 18\n      }','{\n          \"level high\": 6,\n          \"robotics\": 6,\n          \"general programming\": 6,\n          \"translate\": 6,\n          \"unix\": 6,\n          \"programming language\": 6,\n          \"flow control\": 6,\n          \"compiler c\": 6,\n          \"genome\": 6,\n          \"programming concept\": 6,\n          \"mechanics\": 6,\n          \"programs computer\": 6,\n          \"arrays\": 6\n      }',NULL,'Completes this within 3 weeks','Completed comp2521','[\"topic 2\", \"topic 3\"]',NULL),(3,NULL,'E-commerce Website','Mr Corp',1234562,'{\n          \"problem solving\": 9, \n          \"communication\": 9, \n          \"teamwork\": 9,\n          \"leadership\": 9, \n          \"adaptability\": 18, \n          \"critical thinking\": 9, \n          \"time management\": 9, \n          \"resilience\": 9, \n          \"reading\": 9, \n          \"social networking\": 9\n      }','{\n          \"level high\": 6,\n          \"robotics\": 6,\n          \"general programming\": 6,\n          \"translate\": 6,\n          \"unix\": 6,\n          \"programming language\": 6,\n          \"flow control\": 6,\n          \"compiler c\": 6,\n          \"genome\": 6,\n          \"programming concept\": 6,\n          \"mechanics\": 6,\n          \"programs computer\": 6,\n          \"arrays\": 6\n      }',NULL,'Completes this within 2 weeks','Completed comp2521 and comp1511','[\"topic 4\", \"topic 8\"]',NULL);
/*!40000 ALTER TABLE `tblProject` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblSchool`
--

DROP TABLE IF EXISTS `tblSchool`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblSchool` (
  `schoolName` varchar(255) NOT NULL,
  PRIMARY KEY (`schoolName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblSchool`
--

LOCK TABLES `tblSchool` WRITE;
/*!40000 ALTER TABLE `tblSchool` DISABLE KEYS */;
INSERT INTO `tblSchool` VALUES ('Australian Graduate School of Management'),('Graduate School of Biomedical Engineering'),('School of Accounting, Auditing and Taxation'),('School of Art and Design'),('School of Aviation'),('School of Banking and Finance'),('School of Biological, Earth and Environmental Sciences'),('School of Biomedical Sciences'),('School of Biotechnology and Biomolecular Sciences'),('School of Built Environment'),('School of Chemical Engineering'),('School of Chemistry'),('School of Civil and Environmental Engineering'),('School of Clinical Medicine'),('School of Computer Science and Engineering'),('School of Economics'),('School of Education'),('School of Electrical Engineering and Telecommunications'),('School of Global and Public Law'),('School of Health Sciences'),('School of Humanities and Languages'),('School of Information Systems and Technology Management'),('School of Law, Society and Criminology'),('School of Management and Governance'),('School of Marketing'),('School of Materials Science and Engineering'),('School of Mathematics and Statistics'),('School of Mechanical and Manufacturing Engineering'),('School of Minerals and Energy Resources Engineering'),('School of Optometry and Vision Science'),('School of Photovoltaic and Renewable Energy Engineering'),('School of Physics'),('School of Population Health'),('School of Private and Commercial Law'),('School of Psychology'),('School of Risk and Actuarial Studies'),('School of Social Sciences'),('School of the Arts and Media'),('UNSW Business School');
/*!40000 ALTER TABLE `tblSchool` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblUser`
--

DROP TABLE IF EXISTS `tblUser`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblUser` (
  `firstname` varchar(100) DEFAULT NULL,
  `lastname` varchar(100) DEFAULT NULL,
  `zID` int NOT NULL,
  `email` varchar(255) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `enPassword` varchar(255) DEFAULT NULL,
  `contactNumber` bigint DEFAULT NULL,
  `metadataJson` text,
  `verified` bit(1) DEFAULT NULL,
  `summary` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `headline` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `imageURL` text,
  `privacy` bit(1) DEFAULT NULL,
  PRIMARY KEY (`zID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblUser`
--

LOCK TABLES `tblUser` WRITE;
/*!40000 ALTER TABLE `tblUser` DISABLE KEYS */;
INSERT INTO `tblUser` VALUES ('Calvin','Dole',1234561,'z1234561@unsw.edu.au','2001-08-14','b493d48364afe44d11c0165cf470a4164d1e2609911ef998be868d46ade3de4e',61123456789,'{\"class\": {\"admin\": {}, \"academic\": {\"type\": \"academic\", \"school\": \"\", \"skills\": {\"operate\": 21, \"problem solving\": 54, \"communication\": 39, \"adaptability\": 41, \"critical thinking\": 20, \"resilience\": 54, \"time management\": 22, \"teamwork\": 11, \"leadership\": 11, \"reading\": 11, \"social networking\": 12}, \"knowledge\": {\"level high\": 6, \"robotics\": 6, \"general programming\": 6, \"translate\": 6, \"unix\": 6, \"programming language\": 13, \"flow control\": 6, \"compiler c\": 6, \"genome\": 6, \"programming concept\": 6, \"mechanics\": 6, \"programs computer\": 6, \"design program\": 6, \"computer system\": 6, \"list link\": 13, \"arrays\": 6, \"canva\": 5, \"mobile page\": 5, \"aggregate\": 5, \"accessibility network\": 5, \"hook\": 5, \"semantics\": 5, \"end front\": 5, \"flexbox\": 5, \"git\": 5, \"debug\": 5, \"ajax\": 5, \"data formats\": 5, \"HTML\": 5, \"servers http\": 5, \"libraries component\": 5, \"javascript\": 5, \"json\": 5, \"level higher\": 5, \"xmlhttprequest\": 5, \"future study\": 7, \"bioinformatics\": 7, \"binary search tree\": 7, \"programming tool\": 7, \"type abstract\": 7, \"queue priority\": 7, \"graphs\": 7, \"algorithms\": 7, \"sorting algorithms\": 7, \"software system\": 7, \"graph d\": 7, \"computer engineering\": 7}}, \"student\": {\"major\": \"null\", \"program\": \"null\", \"transcript\": \"null\", \"skills\": {}, \"knowledge\": {}, \"jobExperience\": {}}}}',_binary '',NULL,NULL,NULL,NULL),('Sammi','A',1234562,'z1234562@unsw.edu.au','2000-12-12','b493d48364afe44d11c0165cf470a4164d1e2609911ef998be868d46ade3de4e',61495833859,'{\n  \"class\": {\n    \"academic\": {\n      \"type\": \"academic\",\n      \"school\": \"School of Computer Science and Engineering\",\n      \"skills\":{},\n      \"knowledge\":{}\n    },\n    \"student\": {\n        \"major\": \"null\",\n        \"program\": \"null\",\n        \"transcript\": \"null\",\n        \"skills\": {},\n        \"knowledge\":{},\n        \"jobExperience\": {}\n    }\n  }\n}',_binary '',NULL,NULL,NULL,NULL),('Elvin','Man',1234563,'z1234563@unsw.edu.au','2000-12-12','b493d48364afe44d11c0165cf470a4164d1e2609911ef998be868d46ade3de4e',61495833859,'{\"class\": {\"student\": {\"major\": \"null\", \"program\": \"null\", \"transcript\": \"null\", \"skills\": {\"operate\": 9, \"problem solving\": 32, \"communication\": 56, \"adaptability\": 32, \"critical thinking\": 9, \"resilience\": 18, \"leadership\": 14, \"time management\": 14, \"reading\": 14}, \"knowledge\": {\"level high\": 12, \"robotics\": 6, \"general programming\": 6, \"translate\": 6, \"unix\": 6, \"programming language\": 6, \"flow control\": 6, \"compiler c\": 6, \"genome\": 6, \"programming concept\": 6, \"mechanics\": 6, \"programs computer\": 6, \"design program\": 6, \"computer system\": 12, \"list link\": 6, \"arrays\": 6, \"programs executes\": 6, \"IEEE\": 6, \"networks architecture systems\": 6, \"assembly language\": 6, \"level high language\": 6, \"virtual memory\": 6, \"issues systems\": 6, \"system file\": 6, \"architecture operating\": 6, \"programming file\": 6, \"programs procedural\": 6, \"operating system\": 6, \"electronic component\": 6, \"compilers\": 6}, \"jobExperience\": {}}}}',_binary '',NULL,NULL,NULL,NULL),('Evan','LiIIII',1234564,'z1234564@unsw.edu.au','2000-12-12','b493d48364afe44d11c0165cf470a4164d1e2609911ef998be868d46ade3de4e',61495833859,'{\"class\": {\"student\": {\"major\": \"null\", \"program\": \"null\", \"transcript\": \"null\", \"skills\": {\"critical thinking\": 19, \"time management\": 30, \"teamwork\": 19, \"problem solving\": 19, \"leadership\": 11, \"adaptability\": 26, \"resilience\": 26, \"reading\": 19, \"communication\": 15, \"social networking\": 8, \"mobile device abilities\": 8}, \"knowledge\": {\"canva\": 5, \"mobile page\": 5, \"aggregate\": 5, \"accessibility network\": 5, \"hook\": 5, \"semantics\": 5, \"end front\": 10, \"flexbox\": 5, \"git\": 10, \"debug\": 5, \"ajax\": 5, \"data formats\": 5, \"HTML\": 5, \"servers http\": 10, \"libraries component\": 5, \"javascript\": 10, \"json\": 5, \"level higher\": 5, \"xmlhttprequest\": 5, \"coverage code\": 5, \"cycle life\": 5, \"practices software\": 5, \"elicit requirements\": 5, \"design build\": 5, \"validate\": 5, \"methodologies development\": 5, \"model data\": 5, \"design systems\": 5, \"methodologies software\": 5, \"software agile\": 5, \"software system\": 5, \"user story\": 5, \"development software\": 5, \"model conceptual\": 5}, \"jobExperience\": {}}}}',_binary '','','','',NULL),('Finharhar','Jason',1234565,'z1234565@unsw.edu.au','2000-12-12','b493d48364afe44d11c0165cf470a4164d1e2609911ef998be868d46ade3de4e',61495833859,'{\"class\": {\"student\": {\"major\": \"null\", \"program\": \"null\", \"transcript\": \"null\", \"skills\": {\"operate\": 9, \"problem solving\": 35, \"communication\": 60, \"adaptability\": 18, \"critical thinking\": 26, \"resilience\": 35, \"reading\": 17}, \"knowledge\": {\"level high\": 14, \"robotics\": 6, \"general programming\": 6, \"translate\": 6, \"unix\": 6, \"programming language\": 6, \"flow control\": 6, \"compiler c\": 6, \"genome\": 6, \"programming concept\": 6, \"mechanics\": 6, \"programs computer\": 6, \"design program\": 6, \"computer system\": 6, \"list link\": 6, \"arrays\": 6, \"physics\": 8, \"object detection\": 8, \"model building\": 8, \"algorithms\": 8, \"system visual\": 8, \"character recognition optical\": 8, \"feature extraction\": 8, \"module software\": 8, \"models statistical\": 8, \"medical imaging\": 8, \"computer engineering\": 8, \"biometrics\": 8}, \"jobExperience\": {}}}}',_binary '','','','',NULL);
/*!40000 ALTER TABLE `tblUser` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tblUserCode`
--

DROP TABLE IF EXISTS `tblUserCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tblUserCode` (
  `code` varchar(6) NOT NULL,
  `user` int DEFAULT NULL,
  PRIMARY KEY (`code`),
  KEY `user` (`user`),
  CONSTRAINT `tblUserCode_ibfk_1` FOREIGN KEY (`user`) REFERENCES `tblUser` (`zID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tblUserCode`
--

LOCK TABLES `tblUserCode` WRITE;
/*!40000 ALTER TABLE `tblUserCode` DISABLE KEYS */;
/*!40000 ALTER TABLE `tblUserCode` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-11-15  3:42:53
